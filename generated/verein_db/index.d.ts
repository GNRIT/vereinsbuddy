
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model allergie
 * 
 */
export type allergie = $Result.DefaultSelection<Prisma.$allergiePayload>
/**
 * Model dienstgrad
 * 
 */
export type dienstgrad = $Result.DefaultSelection<Prisma.$dienstgradPayload>
/**
 * Model dienstabend
 * 
 */
export type dienstabend = $Result.DefaultSelection<Prisma.$dienstabendPayload>
/**
 * Model einheit
 * 
 */
export type einheit = $Result.DefaultSelection<Prisma.$einheitPayload>
/**
 * Model einsatz
 * 
 */
export type einsatz = $Result.DefaultSelection<Prisma.$einsatzPayload>
/**
 * Model einteilung
 * The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
 */
export type einteilung = $Result.DefaultSelection<Prisma.$einteilungPayload>
/**
 * Model fahrzeug
 * 
 */
export type fahrzeug = $Result.DefaultSelection<Prisma.$fahrzeugPayload>
/**
 * Model ff_mitglied
 * 
 */
export type ff_mitglied = $Result.DefaultSelection<Prisma.$ff_mitgliedPayload>
/**
 * Model ff_mitglied_lehrgang
 * 
 */
export type ff_mitglied_lehrgang = $Result.DefaultSelection<Prisma.$ff_mitglied_lehrgangPayload>
/**
 * Model funktion_ff
 * 
 */
export type funktion_ff = $Result.DefaultSelection<Prisma.$funktion_ffPayload>
/**
 * Model funktion_jf
 * 
 */
export type funktion_jf = $Result.DefaultSelection<Prisma.$funktion_jfPayload>
/**
 * Model jf_erziehungsberechtigter
 * 
 */
export type jf_erziehungsberechtigter = $Result.DefaultSelection<Prisma.$jf_erziehungsberechtigterPayload>
/**
 * Model jf_mitglied
 * 
 */
export type jf_mitglied = $Result.DefaultSelection<Prisma.$jf_mitgliedPayload>
/**
 * Model lehrgang
 * 
 */
export type lehrgang = $Result.DefaultSelection<Prisma.$lehrgangPayload>
/**
 * Model mitglied_funktionen
 * 
 */
export type mitglied_funktionen = $Result.DefaultSelection<Prisma.$mitglied_funktionenPayload>
/**
 * Model mitglied_login
 * 
 */
export type mitglied_login = $Result.DefaultSelection<Prisma.$mitglied_loginPayload>
/**
 * Model teilnahme
 * 
 */
export type teilnahme = $Result.DefaultSelection<Prisma.$teilnahmePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const einsatz_art: {
  brand: 'brand',
  hilfeleistung: 'hilfeleistung',
  sonstiges: 'sonstiges'
};

export type einsatz_art = (typeof einsatz_art)[keyof typeof einsatz_art]


export const fahrzeug_status: {
  verfuegbar: 'verfuegbar',
  im_einsatz: 'im_einsatz',
  in_wartung: 'in_wartung',
  ausser_dienst: 'ausser_dienst'
};

export type fahrzeug_status = (typeof fahrzeug_status)[keyof typeof fahrzeug_status]


export const ff_mitglied_status: {
  aktiv: 'aktiv',
  anwaerter: 'anwaerter',
  ausgetreten: 'ausgetreten'
};

export type ff_mitglied_status = (typeof ff_mitglied_status)[keyof typeof ff_mitglied_status]


export const jf_mitglied_status: {
  aktiv: 'aktiv',
  anwaerter: 'anwaerter',
  ausgetreten: 'ausgetreten'
};

export type jf_mitglied_status = (typeof jf_mitglied_status)[keyof typeof jf_mitglied_status]


export const mitglied_funktionen_typ: {
  ff: 'ff',
  jf: 'jf'
};

export type mitglied_funktionen_typ = (typeof mitglied_funktionen_typ)[keyof typeof mitglied_funktionen_typ]


export const mitglied_login_typ: {
  ff: 'ff',
  jf: 'jf'
};

export type mitglied_login_typ = (typeof mitglied_login_typ)[keyof typeof mitglied_login_typ]


export const teilnahme_typ: {
  einsatz: 'einsatz',
  dienstabend: 'dienstabend'
};

export type teilnahme_typ = (typeof teilnahme_typ)[keyof typeof teilnahme_typ]

}

export type einsatz_art = $Enums.einsatz_art

export const einsatz_art: typeof $Enums.einsatz_art

export type fahrzeug_status = $Enums.fahrzeug_status

export const fahrzeug_status: typeof $Enums.fahrzeug_status

export type ff_mitglied_status = $Enums.ff_mitglied_status

export const ff_mitglied_status: typeof $Enums.ff_mitglied_status

export type jf_mitglied_status = $Enums.jf_mitglied_status

export const jf_mitglied_status: typeof $Enums.jf_mitglied_status

export type mitglied_funktionen_typ = $Enums.mitglied_funktionen_typ

export const mitglied_funktionen_typ: typeof $Enums.mitglied_funktionen_typ

export type mitglied_login_typ = $Enums.mitglied_login_typ

export const mitglied_login_typ: typeof $Enums.mitglied_login_typ

export type teilnahme_typ = $Enums.teilnahme_typ

export const teilnahme_typ: typeof $Enums.teilnahme_typ

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Allergies
 * const allergies = await prisma.allergie.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Allergies
   * const allergies = await prisma.allergie.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.allergie`: Exposes CRUD operations for the **allergie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Allergies
    * const allergies = await prisma.allergie.findMany()
    * ```
    */
  get allergie(): Prisma.allergieDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dienstgrad`: Exposes CRUD operations for the **dienstgrad** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dienstgrads
    * const dienstgrads = await prisma.dienstgrad.findMany()
    * ```
    */
  get dienstgrad(): Prisma.dienstgradDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dienstabend`: Exposes CRUD operations for the **dienstabend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dienstabends
    * const dienstabends = await prisma.dienstabend.findMany()
    * ```
    */
  get dienstabend(): Prisma.dienstabendDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.einheit`: Exposes CRUD operations for the **einheit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Einheits
    * const einheits = await prisma.einheit.findMany()
    * ```
    */
  get einheit(): Prisma.einheitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.einsatz`: Exposes CRUD operations for the **einsatz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Einsatzs
    * const einsatzs = await prisma.einsatz.findMany()
    * ```
    */
  get einsatz(): Prisma.einsatzDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.einteilung`: Exposes CRUD operations for the **einteilung** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Einteilungs
    * const einteilungs = await prisma.einteilung.findMany()
    * ```
    */
  get einteilung(): Prisma.einteilungDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fahrzeug`: Exposes CRUD operations for the **fahrzeug** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fahrzeugs
    * const fahrzeugs = await prisma.fahrzeug.findMany()
    * ```
    */
  get fahrzeug(): Prisma.fahrzeugDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ff_mitglied`: Exposes CRUD operations for the **ff_mitglied** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ff_mitglieds
    * const ff_mitglieds = await prisma.ff_mitglied.findMany()
    * ```
    */
  get ff_mitglied(): Prisma.ff_mitgliedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ff_mitglied_lehrgang`: Exposes CRUD operations for the **ff_mitglied_lehrgang** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ff_mitglied_lehrgangs
    * const ff_mitglied_lehrgangs = await prisma.ff_mitglied_lehrgang.findMany()
    * ```
    */
  get ff_mitglied_lehrgang(): Prisma.ff_mitglied_lehrgangDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.funktion_ff`: Exposes CRUD operations for the **funktion_ff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Funktion_ffs
    * const funktion_ffs = await prisma.funktion_ff.findMany()
    * ```
    */
  get funktion_ff(): Prisma.funktion_ffDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.funktion_jf`: Exposes CRUD operations for the **funktion_jf** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Funktion_jfs
    * const funktion_jfs = await prisma.funktion_jf.findMany()
    * ```
    */
  get funktion_jf(): Prisma.funktion_jfDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jf_erziehungsberechtigter`: Exposes CRUD operations for the **jf_erziehungsberechtigter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jf_erziehungsberechtigters
    * const jf_erziehungsberechtigters = await prisma.jf_erziehungsberechtigter.findMany()
    * ```
    */
  get jf_erziehungsberechtigter(): Prisma.jf_erziehungsberechtigterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jf_mitglied`: Exposes CRUD operations for the **jf_mitglied** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jf_mitglieds
    * const jf_mitglieds = await prisma.jf_mitglied.findMany()
    * ```
    */
  get jf_mitglied(): Prisma.jf_mitgliedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lehrgang`: Exposes CRUD operations for the **lehrgang** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lehrgangs
    * const lehrgangs = await prisma.lehrgang.findMany()
    * ```
    */
  get lehrgang(): Prisma.lehrgangDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mitglied_funktionen`: Exposes CRUD operations for the **mitglied_funktionen** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mitglied_funktionens
    * const mitglied_funktionens = await prisma.mitglied_funktionen.findMany()
    * ```
    */
  get mitglied_funktionen(): Prisma.mitglied_funktionenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mitglied_login`: Exposes CRUD operations for the **mitglied_login** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mitglied_logins
    * const mitglied_logins = await prisma.mitglied_login.findMany()
    * ```
    */
  get mitglied_login(): Prisma.mitglied_loginDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teilnahme`: Exposes CRUD operations for the **teilnahme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teilnahmes
    * const teilnahmes = await prisma.teilnahme.findMany()
    * ```
    */
  get teilnahme(): Prisma.teilnahmeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    allergie: 'allergie',
    dienstgrad: 'dienstgrad',
    dienstabend: 'dienstabend',
    einheit: 'einheit',
    einsatz: 'einsatz',
    einteilung: 'einteilung',
    fahrzeug: 'fahrzeug',
    ff_mitglied: 'ff_mitglied',
    ff_mitglied_lehrgang: 'ff_mitglied_lehrgang',
    funktion_ff: 'funktion_ff',
    funktion_jf: 'funktion_jf',
    jf_erziehungsberechtigter: 'jf_erziehungsberechtigter',
    jf_mitglied: 'jf_mitglied',
    lehrgang: 'lehrgang',
    mitglied_funktionen: 'mitglied_funktionen',
    mitglied_login: 'mitglied_login',
    teilnahme: 'teilnahme'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    vereindb?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "allergie" | "dienstgrad" | "dienstabend" | "einheit" | "einsatz" | "einteilung" | "fahrzeug" | "ff_mitglied" | "ff_mitglied_lehrgang" | "funktion_ff" | "funktion_jf" | "jf_erziehungsberechtigter" | "jf_mitglied" | "lehrgang" | "mitglied_funktionen" | "mitglied_login" | "teilnahme"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      allergie: {
        payload: Prisma.$allergiePayload<ExtArgs>
        fields: Prisma.allergieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.allergieFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$allergiePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.allergieFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$allergiePayload>
          }
          findFirst: {
            args: Prisma.allergieFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$allergiePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.allergieFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$allergiePayload>
          }
          findMany: {
            args: Prisma.allergieFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$allergiePayload>[]
          }
          create: {
            args: Prisma.allergieCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$allergiePayload>
          }
          createMany: {
            args: Prisma.allergieCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.allergieCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$allergiePayload>[]
          }
          delete: {
            args: Prisma.allergieDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$allergiePayload>
          }
          update: {
            args: Prisma.allergieUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$allergiePayload>
          }
          deleteMany: {
            args: Prisma.allergieDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.allergieUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.allergieUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$allergiePayload>[]
          }
          upsert: {
            args: Prisma.allergieUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$allergiePayload>
          }
          aggregate: {
            args: Prisma.AllergieAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAllergie>
          }
          groupBy: {
            args: Prisma.allergieGroupByArgs<ExtArgs>
            result: $Utils.Optional<AllergieGroupByOutputType>[]
          }
          count: {
            args: Prisma.allergieCountArgs<ExtArgs>
            result: $Utils.Optional<AllergieCountAggregateOutputType> | number
          }
        }
      }
      dienstgrad: {
        payload: Prisma.$dienstgradPayload<ExtArgs>
        fields: Prisma.dienstgradFieldRefs
        operations: {
          findUnique: {
            args: Prisma.dienstgradFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstgradPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.dienstgradFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstgradPayload>
          }
          findFirst: {
            args: Prisma.dienstgradFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstgradPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.dienstgradFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstgradPayload>
          }
          findMany: {
            args: Prisma.dienstgradFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstgradPayload>[]
          }
          create: {
            args: Prisma.dienstgradCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstgradPayload>
          }
          createMany: {
            args: Prisma.dienstgradCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.dienstgradCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstgradPayload>[]
          }
          delete: {
            args: Prisma.dienstgradDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstgradPayload>
          }
          update: {
            args: Prisma.dienstgradUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstgradPayload>
          }
          deleteMany: {
            args: Prisma.dienstgradDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.dienstgradUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.dienstgradUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstgradPayload>[]
          }
          upsert: {
            args: Prisma.dienstgradUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstgradPayload>
          }
          aggregate: {
            args: Prisma.DienstgradAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDienstgrad>
          }
          groupBy: {
            args: Prisma.dienstgradGroupByArgs<ExtArgs>
            result: $Utils.Optional<DienstgradGroupByOutputType>[]
          }
          count: {
            args: Prisma.dienstgradCountArgs<ExtArgs>
            result: $Utils.Optional<DienstgradCountAggregateOutputType> | number
          }
        }
      }
      dienstabend: {
        payload: Prisma.$dienstabendPayload<ExtArgs>
        fields: Prisma.dienstabendFieldRefs
        operations: {
          findUnique: {
            args: Prisma.dienstabendFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstabendPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.dienstabendFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstabendPayload>
          }
          findFirst: {
            args: Prisma.dienstabendFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstabendPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.dienstabendFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstabendPayload>
          }
          findMany: {
            args: Prisma.dienstabendFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstabendPayload>[]
          }
          create: {
            args: Prisma.dienstabendCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstabendPayload>
          }
          createMany: {
            args: Prisma.dienstabendCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.dienstabendCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstabendPayload>[]
          }
          delete: {
            args: Prisma.dienstabendDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstabendPayload>
          }
          update: {
            args: Prisma.dienstabendUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstabendPayload>
          }
          deleteMany: {
            args: Prisma.dienstabendDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.dienstabendUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.dienstabendUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstabendPayload>[]
          }
          upsert: {
            args: Prisma.dienstabendUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dienstabendPayload>
          }
          aggregate: {
            args: Prisma.DienstabendAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDienstabend>
          }
          groupBy: {
            args: Prisma.dienstabendGroupByArgs<ExtArgs>
            result: $Utils.Optional<DienstabendGroupByOutputType>[]
          }
          count: {
            args: Prisma.dienstabendCountArgs<ExtArgs>
            result: $Utils.Optional<DienstabendCountAggregateOutputType> | number
          }
        }
      }
      einheit: {
        payload: Prisma.$einheitPayload<ExtArgs>
        fields: Prisma.einheitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.einheitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einheitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.einheitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einheitPayload>
          }
          findFirst: {
            args: Prisma.einheitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einheitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.einheitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einheitPayload>
          }
          findMany: {
            args: Prisma.einheitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einheitPayload>[]
          }
          create: {
            args: Prisma.einheitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einheitPayload>
          }
          createMany: {
            args: Prisma.einheitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.einheitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einheitPayload>[]
          }
          delete: {
            args: Prisma.einheitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einheitPayload>
          }
          update: {
            args: Prisma.einheitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einheitPayload>
          }
          deleteMany: {
            args: Prisma.einheitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.einheitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.einheitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einheitPayload>[]
          }
          upsert: {
            args: Prisma.einheitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einheitPayload>
          }
          aggregate: {
            args: Prisma.EinheitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEinheit>
          }
          groupBy: {
            args: Prisma.einheitGroupByArgs<ExtArgs>
            result: $Utils.Optional<EinheitGroupByOutputType>[]
          }
          count: {
            args: Prisma.einheitCountArgs<ExtArgs>
            result: $Utils.Optional<EinheitCountAggregateOutputType> | number
          }
        }
      }
      einsatz: {
        payload: Prisma.$einsatzPayload<ExtArgs>
        fields: Prisma.einsatzFieldRefs
        operations: {
          findUnique: {
            args: Prisma.einsatzFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einsatzPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.einsatzFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einsatzPayload>
          }
          findFirst: {
            args: Prisma.einsatzFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einsatzPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.einsatzFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einsatzPayload>
          }
          findMany: {
            args: Prisma.einsatzFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einsatzPayload>[]
          }
          create: {
            args: Prisma.einsatzCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einsatzPayload>
          }
          createMany: {
            args: Prisma.einsatzCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.einsatzCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einsatzPayload>[]
          }
          delete: {
            args: Prisma.einsatzDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einsatzPayload>
          }
          update: {
            args: Prisma.einsatzUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einsatzPayload>
          }
          deleteMany: {
            args: Prisma.einsatzDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.einsatzUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.einsatzUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einsatzPayload>[]
          }
          upsert: {
            args: Prisma.einsatzUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einsatzPayload>
          }
          aggregate: {
            args: Prisma.EinsatzAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEinsatz>
          }
          groupBy: {
            args: Prisma.einsatzGroupByArgs<ExtArgs>
            result: $Utils.Optional<EinsatzGroupByOutputType>[]
          }
          count: {
            args: Prisma.einsatzCountArgs<ExtArgs>
            result: $Utils.Optional<EinsatzCountAggregateOutputType> | number
          }
        }
      }
      einteilung: {
        payload: Prisma.$einteilungPayload<ExtArgs>
        fields: Prisma.einteilungFieldRefs
        operations: {
          findUnique: {
            args: Prisma.einteilungFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einteilungPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.einteilungFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einteilungPayload>
          }
          findFirst: {
            args: Prisma.einteilungFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einteilungPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.einteilungFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einteilungPayload>
          }
          findMany: {
            args: Prisma.einteilungFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einteilungPayload>[]
          }
          create: {
            args: Prisma.einteilungCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einteilungPayload>
          }
          createMany: {
            args: Prisma.einteilungCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.einteilungCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einteilungPayload>[]
          }
          delete: {
            args: Prisma.einteilungDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einteilungPayload>
          }
          update: {
            args: Prisma.einteilungUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einteilungPayload>
          }
          deleteMany: {
            args: Prisma.einteilungDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.einteilungUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.einteilungUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einteilungPayload>[]
          }
          upsert: {
            args: Prisma.einteilungUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$einteilungPayload>
          }
          aggregate: {
            args: Prisma.EinteilungAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEinteilung>
          }
          groupBy: {
            args: Prisma.einteilungGroupByArgs<ExtArgs>
            result: $Utils.Optional<EinteilungGroupByOutputType>[]
          }
          count: {
            args: Prisma.einteilungCountArgs<ExtArgs>
            result: $Utils.Optional<EinteilungCountAggregateOutputType> | number
          }
        }
      }
      fahrzeug: {
        payload: Prisma.$fahrzeugPayload<ExtArgs>
        fields: Prisma.fahrzeugFieldRefs
        operations: {
          findUnique: {
            args: Prisma.fahrzeugFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fahrzeugPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.fahrzeugFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fahrzeugPayload>
          }
          findFirst: {
            args: Prisma.fahrzeugFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fahrzeugPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.fahrzeugFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fahrzeugPayload>
          }
          findMany: {
            args: Prisma.fahrzeugFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fahrzeugPayload>[]
          }
          create: {
            args: Prisma.fahrzeugCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fahrzeugPayload>
          }
          createMany: {
            args: Prisma.fahrzeugCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.fahrzeugCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fahrzeugPayload>[]
          }
          delete: {
            args: Prisma.fahrzeugDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fahrzeugPayload>
          }
          update: {
            args: Prisma.fahrzeugUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fahrzeugPayload>
          }
          deleteMany: {
            args: Prisma.fahrzeugDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.fahrzeugUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.fahrzeugUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fahrzeugPayload>[]
          }
          upsert: {
            args: Prisma.fahrzeugUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fahrzeugPayload>
          }
          aggregate: {
            args: Prisma.FahrzeugAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFahrzeug>
          }
          groupBy: {
            args: Prisma.fahrzeugGroupByArgs<ExtArgs>
            result: $Utils.Optional<FahrzeugGroupByOutputType>[]
          }
          count: {
            args: Prisma.fahrzeugCountArgs<ExtArgs>
            result: $Utils.Optional<FahrzeugCountAggregateOutputType> | number
          }
        }
      }
      ff_mitglied: {
        payload: Prisma.$ff_mitgliedPayload<ExtArgs>
        fields: Prisma.ff_mitgliedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ff_mitgliedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitgliedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ff_mitgliedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitgliedPayload>
          }
          findFirst: {
            args: Prisma.ff_mitgliedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitgliedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ff_mitgliedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitgliedPayload>
          }
          findMany: {
            args: Prisma.ff_mitgliedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitgliedPayload>[]
          }
          create: {
            args: Prisma.ff_mitgliedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitgliedPayload>
          }
          createMany: {
            args: Prisma.ff_mitgliedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ff_mitgliedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitgliedPayload>[]
          }
          delete: {
            args: Prisma.ff_mitgliedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitgliedPayload>
          }
          update: {
            args: Prisma.ff_mitgliedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitgliedPayload>
          }
          deleteMany: {
            args: Prisma.ff_mitgliedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ff_mitgliedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ff_mitgliedUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitgliedPayload>[]
          }
          upsert: {
            args: Prisma.ff_mitgliedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitgliedPayload>
          }
          aggregate: {
            args: Prisma.Ff_mitgliedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFf_mitglied>
          }
          groupBy: {
            args: Prisma.ff_mitgliedGroupByArgs<ExtArgs>
            result: $Utils.Optional<Ff_mitgliedGroupByOutputType>[]
          }
          count: {
            args: Prisma.ff_mitgliedCountArgs<ExtArgs>
            result: $Utils.Optional<Ff_mitgliedCountAggregateOutputType> | number
          }
        }
      }
      ff_mitglied_lehrgang: {
        payload: Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>
        fields: Prisma.ff_mitglied_lehrgangFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ff_mitglied_lehrgangFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitglied_lehrgangPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ff_mitglied_lehrgangFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitglied_lehrgangPayload>
          }
          findFirst: {
            args: Prisma.ff_mitglied_lehrgangFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitglied_lehrgangPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ff_mitglied_lehrgangFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitglied_lehrgangPayload>
          }
          findMany: {
            args: Prisma.ff_mitglied_lehrgangFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitglied_lehrgangPayload>[]
          }
          create: {
            args: Prisma.ff_mitglied_lehrgangCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitglied_lehrgangPayload>
          }
          createMany: {
            args: Prisma.ff_mitglied_lehrgangCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ff_mitglied_lehrgangCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitglied_lehrgangPayload>[]
          }
          delete: {
            args: Prisma.ff_mitglied_lehrgangDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitglied_lehrgangPayload>
          }
          update: {
            args: Prisma.ff_mitglied_lehrgangUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitglied_lehrgangPayload>
          }
          deleteMany: {
            args: Prisma.ff_mitglied_lehrgangDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ff_mitglied_lehrgangUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ff_mitglied_lehrgangUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitglied_lehrgangPayload>[]
          }
          upsert: {
            args: Prisma.ff_mitglied_lehrgangUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ff_mitglied_lehrgangPayload>
          }
          aggregate: {
            args: Prisma.Ff_mitglied_lehrgangAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFf_mitglied_lehrgang>
          }
          groupBy: {
            args: Prisma.ff_mitglied_lehrgangGroupByArgs<ExtArgs>
            result: $Utils.Optional<Ff_mitglied_lehrgangGroupByOutputType>[]
          }
          count: {
            args: Prisma.ff_mitglied_lehrgangCountArgs<ExtArgs>
            result: $Utils.Optional<Ff_mitglied_lehrgangCountAggregateOutputType> | number
          }
        }
      }
      funktion_ff: {
        payload: Prisma.$funktion_ffPayload<ExtArgs>
        fields: Prisma.funktion_ffFieldRefs
        operations: {
          findUnique: {
            args: Prisma.funktion_ffFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_ffPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.funktion_ffFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_ffPayload>
          }
          findFirst: {
            args: Prisma.funktion_ffFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_ffPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.funktion_ffFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_ffPayload>
          }
          findMany: {
            args: Prisma.funktion_ffFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_ffPayload>[]
          }
          create: {
            args: Prisma.funktion_ffCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_ffPayload>
          }
          createMany: {
            args: Prisma.funktion_ffCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.funktion_ffCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_ffPayload>[]
          }
          delete: {
            args: Prisma.funktion_ffDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_ffPayload>
          }
          update: {
            args: Prisma.funktion_ffUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_ffPayload>
          }
          deleteMany: {
            args: Prisma.funktion_ffDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.funktion_ffUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.funktion_ffUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_ffPayload>[]
          }
          upsert: {
            args: Prisma.funktion_ffUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_ffPayload>
          }
          aggregate: {
            args: Prisma.Funktion_ffAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFunktion_ff>
          }
          groupBy: {
            args: Prisma.funktion_ffGroupByArgs<ExtArgs>
            result: $Utils.Optional<Funktion_ffGroupByOutputType>[]
          }
          count: {
            args: Prisma.funktion_ffCountArgs<ExtArgs>
            result: $Utils.Optional<Funktion_ffCountAggregateOutputType> | number
          }
        }
      }
      funktion_jf: {
        payload: Prisma.$funktion_jfPayload<ExtArgs>
        fields: Prisma.funktion_jfFieldRefs
        operations: {
          findUnique: {
            args: Prisma.funktion_jfFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_jfPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.funktion_jfFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_jfPayload>
          }
          findFirst: {
            args: Prisma.funktion_jfFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_jfPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.funktion_jfFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_jfPayload>
          }
          findMany: {
            args: Prisma.funktion_jfFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_jfPayload>[]
          }
          create: {
            args: Prisma.funktion_jfCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_jfPayload>
          }
          createMany: {
            args: Prisma.funktion_jfCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.funktion_jfCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_jfPayload>[]
          }
          delete: {
            args: Prisma.funktion_jfDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_jfPayload>
          }
          update: {
            args: Prisma.funktion_jfUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_jfPayload>
          }
          deleteMany: {
            args: Prisma.funktion_jfDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.funktion_jfUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.funktion_jfUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_jfPayload>[]
          }
          upsert: {
            args: Prisma.funktion_jfUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$funktion_jfPayload>
          }
          aggregate: {
            args: Prisma.Funktion_jfAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFunktion_jf>
          }
          groupBy: {
            args: Prisma.funktion_jfGroupByArgs<ExtArgs>
            result: $Utils.Optional<Funktion_jfGroupByOutputType>[]
          }
          count: {
            args: Prisma.funktion_jfCountArgs<ExtArgs>
            result: $Utils.Optional<Funktion_jfCountAggregateOutputType> | number
          }
        }
      }
      jf_erziehungsberechtigter: {
        payload: Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>
        fields: Prisma.jf_erziehungsberechtigterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.jf_erziehungsberechtigterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_erziehungsberechtigterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.jf_erziehungsberechtigterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_erziehungsberechtigterPayload>
          }
          findFirst: {
            args: Prisma.jf_erziehungsberechtigterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_erziehungsberechtigterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.jf_erziehungsberechtigterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_erziehungsberechtigterPayload>
          }
          findMany: {
            args: Prisma.jf_erziehungsberechtigterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_erziehungsberechtigterPayload>[]
          }
          create: {
            args: Prisma.jf_erziehungsberechtigterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_erziehungsberechtigterPayload>
          }
          createMany: {
            args: Prisma.jf_erziehungsberechtigterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.jf_erziehungsberechtigterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_erziehungsberechtigterPayload>[]
          }
          delete: {
            args: Prisma.jf_erziehungsberechtigterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_erziehungsberechtigterPayload>
          }
          update: {
            args: Prisma.jf_erziehungsberechtigterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_erziehungsberechtigterPayload>
          }
          deleteMany: {
            args: Prisma.jf_erziehungsberechtigterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.jf_erziehungsberechtigterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.jf_erziehungsberechtigterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_erziehungsberechtigterPayload>[]
          }
          upsert: {
            args: Prisma.jf_erziehungsberechtigterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_erziehungsberechtigterPayload>
          }
          aggregate: {
            args: Prisma.Jf_erziehungsberechtigterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJf_erziehungsberechtigter>
          }
          groupBy: {
            args: Prisma.jf_erziehungsberechtigterGroupByArgs<ExtArgs>
            result: $Utils.Optional<Jf_erziehungsberechtigterGroupByOutputType>[]
          }
          count: {
            args: Prisma.jf_erziehungsberechtigterCountArgs<ExtArgs>
            result: $Utils.Optional<Jf_erziehungsberechtigterCountAggregateOutputType> | number
          }
        }
      }
      jf_mitglied: {
        payload: Prisma.$jf_mitgliedPayload<ExtArgs>
        fields: Prisma.jf_mitgliedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.jf_mitgliedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_mitgliedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.jf_mitgliedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_mitgliedPayload>
          }
          findFirst: {
            args: Prisma.jf_mitgliedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_mitgliedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.jf_mitgliedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_mitgliedPayload>
          }
          findMany: {
            args: Prisma.jf_mitgliedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_mitgliedPayload>[]
          }
          create: {
            args: Prisma.jf_mitgliedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_mitgliedPayload>
          }
          createMany: {
            args: Prisma.jf_mitgliedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.jf_mitgliedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_mitgliedPayload>[]
          }
          delete: {
            args: Prisma.jf_mitgliedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_mitgliedPayload>
          }
          update: {
            args: Prisma.jf_mitgliedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_mitgliedPayload>
          }
          deleteMany: {
            args: Prisma.jf_mitgliedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.jf_mitgliedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.jf_mitgliedUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_mitgliedPayload>[]
          }
          upsert: {
            args: Prisma.jf_mitgliedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jf_mitgliedPayload>
          }
          aggregate: {
            args: Prisma.Jf_mitgliedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJf_mitglied>
          }
          groupBy: {
            args: Prisma.jf_mitgliedGroupByArgs<ExtArgs>
            result: $Utils.Optional<Jf_mitgliedGroupByOutputType>[]
          }
          count: {
            args: Prisma.jf_mitgliedCountArgs<ExtArgs>
            result: $Utils.Optional<Jf_mitgliedCountAggregateOutputType> | number
          }
        }
      }
      lehrgang: {
        payload: Prisma.$lehrgangPayload<ExtArgs>
        fields: Prisma.lehrgangFieldRefs
        operations: {
          findUnique: {
            args: Prisma.lehrgangFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lehrgangPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.lehrgangFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lehrgangPayload>
          }
          findFirst: {
            args: Prisma.lehrgangFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lehrgangPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.lehrgangFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lehrgangPayload>
          }
          findMany: {
            args: Prisma.lehrgangFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lehrgangPayload>[]
          }
          create: {
            args: Prisma.lehrgangCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lehrgangPayload>
          }
          createMany: {
            args: Prisma.lehrgangCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.lehrgangCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lehrgangPayload>[]
          }
          delete: {
            args: Prisma.lehrgangDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lehrgangPayload>
          }
          update: {
            args: Prisma.lehrgangUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lehrgangPayload>
          }
          deleteMany: {
            args: Prisma.lehrgangDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.lehrgangUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.lehrgangUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lehrgangPayload>[]
          }
          upsert: {
            args: Prisma.lehrgangUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lehrgangPayload>
          }
          aggregate: {
            args: Prisma.LehrgangAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLehrgang>
          }
          groupBy: {
            args: Prisma.lehrgangGroupByArgs<ExtArgs>
            result: $Utils.Optional<LehrgangGroupByOutputType>[]
          }
          count: {
            args: Prisma.lehrgangCountArgs<ExtArgs>
            result: $Utils.Optional<LehrgangCountAggregateOutputType> | number
          }
        }
      }
      mitglied_funktionen: {
        payload: Prisma.$mitglied_funktionenPayload<ExtArgs>
        fields: Prisma.mitglied_funktionenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.mitglied_funktionenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_funktionenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.mitglied_funktionenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_funktionenPayload>
          }
          findFirst: {
            args: Prisma.mitglied_funktionenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_funktionenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.mitglied_funktionenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_funktionenPayload>
          }
          findMany: {
            args: Prisma.mitglied_funktionenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_funktionenPayload>[]
          }
          create: {
            args: Prisma.mitglied_funktionenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_funktionenPayload>
          }
          createMany: {
            args: Prisma.mitglied_funktionenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.mitglied_funktionenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_funktionenPayload>[]
          }
          delete: {
            args: Prisma.mitglied_funktionenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_funktionenPayload>
          }
          update: {
            args: Prisma.mitglied_funktionenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_funktionenPayload>
          }
          deleteMany: {
            args: Prisma.mitglied_funktionenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.mitglied_funktionenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.mitglied_funktionenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_funktionenPayload>[]
          }
          upsert: {
            args: Prisma.mitglied_funktionenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_funktionenPayload>
          }
          aggregate: {
            args: Prisma.Mitglied_funktionenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMitglied_funktionen>
          }
          groupBy: {
            args: Prisma.mitglied_funktionenGroupByArgs<ExtArgs>
            result: $Utils.Optional<Mitglied_funktionenGroupByOutputType>[]
          }
          count: {
            args: Prisma.mitglied_funktionenCountArgs<ExtArgs>
            result: $Utils.Optional<Mitglied_funktionenCountAggregateOutputType> | number
          }
        }
      }
      mitglied_login: {
        payload: Prisma.$mitglied_loginPayload<ExtArgs>
        fields: Prisma.mitglied_loginFieldRefs
        operations: {
          findUnique: {
            args: Prisma.mitglied_loginFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_loginPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.mitglied_loginFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_loginPayload>
          }
          findFirst: {
            args: Prisma.mitglied_loginFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_loginPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.mitglied_loginFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_loginPayload>
          }
          findMany: {
            args: Prisma.mitglied_loginFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_loginPayload>[]
          }
          create: {
            args: Prisma.mitglied_loginCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_loginPayload>
          }
          createMany: {
            args: Prisma.mitglied_loginCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.mitglied_loginCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_loginPayload>[]
          }
          delete: {
            args: Prisma.mitglied_loginDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_loginPayload>
          }
          update: {
            args: Prisma.mitglied_loginUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_loginPayload>
          }
          deleteMany: {
            args: Prisma.mitglied_loginDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.mitglied_loginUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.mitglied_loginUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_loginPayload>[]
          }
          upsert: {
            args: Prisma.mitglied_loginUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mitglied_loginPayload>
          }
          aggregate: {
            args: Prisma.Mitglied_loginAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMitglied_login>
          }
          groupBy: {
            args: Prisma.mitglied_loginGroupByArgs<ExtArgs>
            result: $Utils.Optional<Mitglied_loginGroupByOutputType>[]
          }
          count: {
            args: Prisma.mitglied_loginCountArgs<ExtArgs>
            result: $Utils.Optional<Mitglied_loginCountAggregateOutputType> | number
          }
        }
      }
      teilnahme: {
        payload: Prisma.$teilnahmePayload<ExtArgs>
        fields: Prisma.teilnahmeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.teilnahmeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teilnahmePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.teilnahmeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teilnahmePayload>
          }
          findFirst: {
            args: Prisma.teilnahmeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teilnahmePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.teilnahmeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teilnahmePayload>
          }
          findMany: {
            args: Prisma.teilnahmeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teilnahmePayload>[]
          }
          create: {
            args: Prisma.teilnahmeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teilnahmePayload>
          }
          createMany: {
            args: Prisma.teilnahmeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.teilnahmeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teilnahmePayload>[]
          }
          delete: {
            args: Prisma.teilnahmeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teilnahmePayload>
          }
          update: {
            args: Prisma.teilnahmeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teilnahmePayload>
          }
          deleteMany: {
            args: Prisma.teilnahmeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.teilnahmeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.teilnahmeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teilnahmePayload>[]
          }
          upsert: {
            args: Prisma.teilnahmeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$teilnahmePayload>
          }
          aggregate: {
            args: Prisma.TeilnahmeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeilnahme>
          }
          groupBy: {
            args: Prisma.teilnahmeGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeilnahmeGroupByOutputType>[]
          }
          count: {
            args: Prisma.teilnahmeCountArgs<ExtArgs>
            result: $Utils.Optional<TeilnahmeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    allergie?: allergieOmit
    dienstgrad?: dienstgradOmit
    dienstabend?: dienstabendOmit
    einheit?: einheitOmit
    einsatz?: einsatzOmit
    einteilung?: einteilungOmit
    fahrzeug?: fahrzeugOmit
    ff_mitglied?: ff_mitgliedOmit
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangOmit
    funktion_ff?: funktion_ffOmit
    funktion_jf?: funktion_jfOmit
    jf_erziehungsberechtigter?: jf_erziehungsberechtigterOmit
    jf_mitglied?: jf_mitgliedOmit
    lehrgang?: lehrgangOmit
    mitglied_funktionen?: mitglied_funktionenOmit
    mitglied_login?: mitglied_loginOmit
    teilnahme?: teilnahmeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DienstabendCountOutputType
   */

  export type DienstabendCountOutputType = {
    einteilung: number
  }

  export type DienstabendCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    einteilung?: boolean | DienstabendCountOutputTypeCountEinteilungArgs
  }

  // Custom InputTypes
  /**
   * DienstabendCountOutputType without action
   */
  export type DienstabendCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DienstabendCountOutputType
     */
    select?: DienstabendCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DienstabendCountOutputType without action
   */
  export type DienstabendCountOutputTypeCountEinteilungArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: einteilungWhereInput
  }


  /**
   * Count Type EinheitCountOutputType
   */

  export type EinheitCountOutputType = {
    einteilung: number
  }

  export type EinheitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    einteilung?: boolean | EinheitCountOutputTypeCountEinteilungArgs
  }

  // Custom InputTypes
  /**
   * EinheitCountOutputType without action
   */
  export type EinheitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EinheitCountOutputType
     */
    select?: EinheitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EinheitCountOutputType without action
   */
  export type EinheitCountOutputTypeCountEinteilungArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: einteilungWhereInput
  }


  /**
   * Count Type EinsatzCountOutputType
   */

  export type EinsatzCountOutputType = {
    einteilung: number
  }

  export type EinsatzCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    einteilung?: boolean | EinsatzCountOutputTypeCountEinteilungArgs
  }

  // Custom InputTypes
  /**
   * EinsatzCountOutputType without action
   */
  export type EinsatzCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EinsatzCountOutputType
     */
    select?: EinsatzCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EinsatzCountOutputType without action
   */
  export type EinsatzCountOutputTypeCountEinteilungArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: einteilungWhereInput
  }


  /**
   * Count Type FahrzeugCountOutputType
   */

  export type FahrzeugCountOutputType = {
    einteilung: number
  }

  export type FahrzeugCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    einteilung?: boolean | FahrzeugCountOutputTypeCountEinteilungArgs
  }

  // Custom InputTypes
  /**
   * FahrzeugCountOutputType without action
   */
  export type FahrzeugCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FahrzeugCountOutputType
     */
    select?: FahrzeugCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FahrzeugCountOutputType without action
   */
  export type FahrzeugCountOutputTypeCountEinteilungArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: einteilungWhereInput
  }


  /**
   * Count Type Ff_mitgliedCountOutputType
   */

  export type Ff_mitgliedCountOutputType = {
    allergie: number
    einteilung: number
    ff_mitglied_lehrgang: number
    mitglied_funktionen: number
  }

  export type Ff_mitgliedCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    allergie?: boolean | Ff_mitgliedCountOutputTypeCountAllergieArgs
    einteilung?: boolean | Ff_mitgliedCountOutputTypeCountEinteilungArgs
    ff_mitglied_lehrgang?: boolean | Ff_mitgliedCountOutputTypeCountFf_mitglied_lehrgangArgs
    mitglied_funktionen?: boolean | Ff_mitgliedCountOutputTypeCountMitglied_funktionenArgs
  }

  // Custom InputTypes
  /**
   * Ff_mitgliedCountOutputType without action
   */
  export type Ff_mitgliedCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ff_mitgliedCountOutputType
     */
    select?: Ff_mitgliedCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Ff_mitgliedCountOutputType without action
   */
  export type Ff_mitgliedCountOutputTypeCountAllergieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: allergieWhereInput
  }

  /**
   * Ff_mitgliedCountOutputType without action
   */
  export type Ff_mitgliedCountOutputTypeCountEinteilungArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: einteilungWhereInput
  }

  /**
   * Ff_mitgliedCountOutputType without action
   */
  export type Ff_mitgliedCountOutputTypeCountFf_mitglied_lehrgangArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ff_mitglied_lehrgangWhereInput
  }

  /**
   * Ff_mitgliedCountOutputType without action
   */
  export type Ff_mitgliedCountOutputTypeCountMitglied_funktionenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mitglied_funktionenWhereInput
  }


  /**
   * Count Type Jf_mitgliedCountOutputType
   */

  export type Jf_mitgliedCountOutputType = {
    allergie: number
    jf_erziehungsberechtigter: number
  }

  export type Jf_mitgliedCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    allergie?: boolean | Jf_mitgliedCountOutputTypeCountAllergieArgs
    jf_erziehungsberechtigter?: boolean | Jf_mitgliedCountOutputTypeCountJf_erziehungsberechtigterArgs
  }

  // Custom InputTypes
  /**
   * Jf_mitgliedCountOutputType without action
   */
  export type Jf_mitgliedCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jf_mitgliedCountOutputType
     */
    select?: Jf_mitgliedCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Jf_mitgliedCountOutputType without action
   */
  export type Jf_mitgliedCountOutputTypeCountAllergieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: allergieWhereInput
  }

  /**
   * Jf_mitgliedCountOutputType without action
   */
  export type Jf_mitgliedCountOutputTypeCountJf_erziehungsberechtigterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jf_erziehungsberechtigterWhereInput
  }


  /**
   * Count Type LehrgangCountOutputType
   */

  export type LehrgangCountOutputType = {
    ff_mitglied_lehrgang: number
  }

  export type LehrgangCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ff_mitglied_lehrgang?: boolean | LehrgangCountOutputTypeCountFf_mitglied_lehrgangArgs
  }

  // Custom InputTypes
  /**
   * LehrgangCountOutputType without action
   */
  export type LehrgangCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LehrgangCountOutputType
     */
    select?: LehrgangCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LehrgangCountOutputType without action
   */
  export type LehrgangCountOutputTypeCountFf_mitglied_lehrgangArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ff_mitglied_lehrgangWhereInput
  }


  /**
   * Models
   */

  /**
   * Model allergie
   */

  export type AggregateAllergie = {
    _count: AllergieCountAggregateOutputType | null
    _avg: AllergieAvgAggregateOutputType | null
    _sum: AllergieSumAggregateOutputType | null
    _min: AllergieMinAggregateOutputType | null
    _max: AllergieMaxAggregateOutputType | null
  }

  export type AllergieAvgAggregateOutputType = {
    ID: number | null
    JF_Mitglied_ID: number | null
    FF_Mitglied_ID: number | null
  }

  export type AllergieSumAggregateOutputType = {
    ID: number | null
    JF_Mitglied_ID: number | null
    FF_Mitglied_ID: number | null
  }

  export type AllergieMinAggregateOutputType = {
    ID: number | null
    JF_Mitglied_ID: number | null
    FF_Mitglied_ID: number | null
    Allergie: string | null
    Beschreibung: string | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type AllergieMaxAggregateOutputType = {
    ID: number | null
    JF_Mitglied_ID: number | null
    FF_Mitglied_ID: number | null
    Allergie: string | null
    Beschreibung: string | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type AllergieCountAggregateOutputType = {
    ID: number
    JF_Mitglied_ID: number
    FF_Mitglied_ID: number
    Allergie: number
    Beschreibung: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type AllergieAvgAggregateInputType = {
    ID?: true
    JF_Mitglied_ID?: true
    FF_Mitglied_ID?: true
  }

  export type AllergieSumAggregateInputType = {
    ID?: true
    JF_Mitglied_ID?: true
    FF_Mitglied_ID?: true
  }

  export type AllergieMinAggregateInputType = {
    ID?: true
    JF_Mitglied_ID?: true
    FF_Mitglied_ID?: true
    Allergie?: true
    Beschreibung?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type AllergieMaxAggregateInputType = {
    ID?: true
    JF_Mitglied_ID?: true
    FF_Mitglied_ID?: true
    Allergie?: true
    Beschreibung?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type AllergieCountAggregateInputType = {
    ID?: true
    JF_Mitglied_ID?: true
    FF_Mitglied_ID?: true
    Allergie?: true
    Beschreibung?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type AllergieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which allergie to aggregate.
     */
    where?: allergieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of allergies to fetch.
     */
    orderBy?: allergieOrderByWithRelationInput | allergieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: allergieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` allergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` allergies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned allergies
    **/
    _count?: true | AllergieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AllergieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AllergieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AllergieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AllergieMaxAggregateInputType
  }

  export type GetAllergieAggregateType<T extends AllergieAggregateArgs> = {
        [P in keyof T & keyof AggregateAllergie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAllergie[P]>
      : GetScalarType<T[P], AggregateAllergie[P]>
  }




  export type allergieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: allergieWhereInput
    orderBy?: allergieOrderByWithAggregationInput | allergieOrderByWithAggregationInput[]
    by: AllergieScalarFieldEnum[] | AllergieScalarFieldEnum
    having?: allergieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AllergieCountAggregateInputType | true
    _avg?: AllergieAvgAggregateInputType
    _sum?: AllergieSumAggregateInputType
    _min?: AllergieMinAggregateInputType
    _max?: AllergieMaxAggregateInputType
  }

  export type AllergieGroupByOutputType = {
    ID: number
    JF_Mitglied_ID: number
    FF_Mitglied_ID: number
    Allergie: string
    Beschreibung: string | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
    _count: AllergieCountAggregateOutputType | null
    _avg: AllergieAvgAggregateOutputType | null
    _sum: AllergieSumAggregateOutputType | null
    _min: AllergieMinAggregateOutputType | null
    _max: AllergieMaxAggregateOutputType | null
  }

  type GetAllergieGroupByPayload<T extends allergieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AllergieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AllergieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AllergieGroupByOutputType[P]>
            : GetScalarType<T[P], AllergieGroupByOutputType[P]>
        }
      >
    >


  export type allergieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    JF_Mitglied_ID?: boolean
    FF_Mitglied_ID?: boolean
    Allergie?: boolean
    Beschreibung?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
    jf_mitglied?: boolean | jf_mitgliedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["allergie"]>

  export type allergieSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    JF_Mitglied_ID?: boolean
    FF_Mitglied_ID?: boolean
    Allergie?: boolean
    Beschreibung?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
    jf_mitglied?: boolean | jf_mitgliedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["allergie"]>

  export type allergieSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    JF_Mitglied_ID?: boolean
    FF_Mitglied_ID?: boolean
    Allergie?: boolean
    Beschreibung?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
    jf_mitglied?: boolean | jf_mitgliedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["allergie"]>

  export type allergieSelectScalar = {
    ID?: boolean
    JF_Mitglied_ID?: boolean
    FF_Mitglied_ID?: boolean
    Allergie?: boolean
    Beschreibung?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type allergieOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "JF_Mitglied_ID" | "FF_Mitglied_ID" | "Allergie" | "Beschreibung" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["allergie"]>
  export type allergieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
    jf_mitglied?: boolean | jf_mitgliedDefaultArgs<ExtArgs>
  }
  export type allergieIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
    jf_mitglied?: boolean | jf_mitgliedDefaultArgs<ExtArgs>
  }
  export type allergieIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
    jf_mitglied?: boolean | jf_mitgliedDefaultArgs<ExtArgs>
  }

  export type $allergiePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "allergie"
    objects: {
      ff_mitglied: Prisma.$ff_mitgliedPayload<ExtArgs>
      jf_mitglied: Prisma.$jf_mitgliedPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      JF_Mitglied_ID: number
      FF_Mitglied_ID: number
      Allergie: string
      Beschreibung: string | null
      Erstellt_am: Date | null
      Geaendert_am: Date | null
    }, ExtArgs["result"]["allergie"]>
    composites: {}
  }

  type allergieGetPayload<S extends boolean | null | undefined | allergieDefaultArgs> = $Result.GetResult<Prisma.$allergiePayload, S>

  type allergieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<allergieFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AllergieCountAggregateInputType | true
    }

  export interface allergieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['allergie'], meta: { name: 'allergie' } }
    /**
     * Find zero or one Allergie that matches the filter.
     * @param {allergieFindUniqueArgs} args - Arguments to find a Allergie
     * @example
     * // Get one Allergie
     * const allergie = await prisma.allergie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends allergieFindUniqueArgs>(args: SelectSubset<T, allergieFindUniqueArgs<ExtArgs>>): Prisma__allergieClient<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Allergie that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {allergieFindUniqueOrThrowArgs} args - Arguments to find a Allergie
     * @example
     * // Get one Allergie
     * const allergie = await prisma.allergie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends allergieFindUniqueOrThrowArgs>(args: SelectSubset<T, allergieFindUniqueOrThrowArgs<ExtArgs>>): Prisma__allergieClient<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Allergie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergieFindFirstArgs} args - Arguments to find a Allergie
     * @example
     * // Get one Allergie
     * const allergie = await prisma.allergie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends allergieFindFirstArgs>(args?: SelectSubset<T, allergieFindFirstArgs<ExtArgs>>): Prisma__allergieClient<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Allergie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergieFindFirstOrThrowArgs} args - Arguments to find a Allergie
     * @example
     * // Get one Allergie
     * const allergie = await prisma.allergie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends allergieFindFirstOrThrowArgs>(args?: SelectSubset<T, allergieFindFirstOrThrowArgs<ExtArgs>>): Prisma__allergieClient<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Allergies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergieFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Allergies
     * const allergies = await prisma.allergie.findMany()
     * 
     * // Get first 10 Allergies
     * const allergies = await prisma.allergie.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const allergieWithIDOnly = await prisma.allergie.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends allergieFindManyArgs>(args?: SelectSubset<T, allergieFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Allergie.
     * @param {allergieCreateArgs} args - Arguments to create a Allergie.
     * @example
     * // Create one Allergie
     * const Allergie = await prisma.allergie.create({
     *   data: {
     *     // ... data to create a Allergie
     *   }
     * })
     * 
     */
    create<T extends allergieCreateArgs>(args: SelectSubset<T, allergieCreateArgs<ExtArgs>>): Prisma__allergieClient<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Allergies.
     * @param {allergieCreateManyArgs} args - Arguments to create many Allergies.
     * @example
     * // Create many Allergies
     * const allergie = await prisma.allergie.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends allergieCreateManyArgs>(args?: SelectSubset<T, allergieCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Allergies and returns the data saved in the database.
     * @param {allergieCreateManyAndReturnArgs} args - Arguments to create many Allergies.
     * @example
     * // Create many Allergies
     * const allergie = await prisma.allergie.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Allergies and only return the `ID`
     * const allergieWithIDOnly = await prisma.allergie.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends allergieCreateManyAndReturnArgs>(args?: SelectSubset<T, allergieCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Allergie.
     * @param {allergieDeleteArgs} args - Arguments to delete one Allergie.
     * @example
     * // Delete one Allergie
     * const Allergie = await prisma.allergie.delete({
     *   where: {
     *     // ... filter to delete one Allergie
     *   }
     * })
     * 
     */
    delete<T extends allergieDeleteArgs>(args: SelectSubset<T, allergieDeleteArgs<ExtArgs>>): Prisma__allergieClient<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Allergie.
     * @param {allergieUpdateArgs} args - Arguments to update one Allergie.
     * @example
     * // Update one Allergie
     * const allergie = await prisma.allergie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends allergieUpdateArgs>(args: SelectSubset<T, allergieUpdateArgs<ExtArgs>>): Prisma__allergieClient<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Allergies.
     * @param {allergieDeleteManyArgs} args - Arguments to filter Allergies to delete.
     * @example
     * // Delete a few Allergies
     * const { count } = await prisma.allergie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends allergieDeleteManyArgs>(args?: SelectSubset<T, allergieDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Allergies
     * const allergie = await prisma.allergie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends allergieUpdateManyArgs>(args: SelectSubset<T, allergieUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Allergies and returns the data updated in the database.
     * @param {allergieUpdateManyAndReturnArgs} args - Arguments to update many Allergies.
     * @example
     * // Update many Allergies
     * const allergie = await prisma.allergie.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Allergies and only return the `ID`
     * const allergieWithIDOnly = await prisma.allergie.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends allergieUpdateManyAndReturnArgs>(args: SelectSubset<T, allergieUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Allergie.
     * @param {allergieUpsertArgs} args - Arguments to update or create a Allergie.
     * @example
     * // Update or create a Allergie
     * const allergie = await prisma.allergie.upsert({
     *   create: {
     *     // ... data to create a Allergie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Allergie we want to update
     *   }
     * })
     */
    upsert<T extends allergieUpsertArgs>(args: SelectSubset<T, allergieUpsertArgs<ExtArgs>>): Prisma__allergieClient<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Allergies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergieCountArgs} args - Arguments to filter Allergies to count.
     * @example
     * // Count the number of Allergies
     * const count = await prisma.allergie.count({
     *   where: {
     *     // ... the filter for the Allergies we want to count
     *   }
     * })
    **/
    count<T extends allergieCountArgs>(
      args?: Subset<T, allergieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AllergieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Allergie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AllergieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AllergieAggregateArgs>(args: Subset<T, AllergieAggregateArgs>): Prisma.PrismaPromise<GetAllergieAggregateType<T>>

    /**
     * Group by Allergie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {allergieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends allergieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: allergieGroupByArgs['orderBy'] }
        : { orderBy?: allergieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, allergieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAllergieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the allergie model
   */
  readonly fields: allergieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for allergie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__allergieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ff_mitglied<T extends ff_mitgliedDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ff_mitgliedDefaultArgs<ExtArgs>>): Prisma__ff_mitgliedClient<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    jf_mitglied<T extends jf_mitgliedDefaultArgs<ExtArgs> = {}>(args?: Subset<T, jf_mitgliedDefaultArgs<ExtArgs>>): Prisma__jf_mitgliedClient<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the allergie model
   */
  interface allergieFieldRefs {
    readonly ID: FieldRef<"allergie", 'Int'>
    readonly JF_Mitglied_ID: FieldRef<"allergie", 'Int'>
    readonly FF_Mitglied_ID: FieldRef<"allergie", 'Int'>
    readonly Allergie: FieldRef<"allergie", 'String'>
    readonly Beschreibung: FieldRef<"allergie", 'String'>
    readonly Erstellt_am: FieldRef<"allergie", 'DateTime'>
    readonly Geaendert_am: FieldRef<"allergie", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * allergie findUnique
   */
  export type allergieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieInclude<ExtArgs> | null
    /**
     * Filter, which allergie to fetch.
     */
    where: allergieWhereUniqueInput
  }

  /**
   * allergie findUniqueOrThrow
   */
  export type allergieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieInclude<ExtArgs> | null
    /**
     * Filter, which allergie to fetch.
     */
    where: allergieWhereUniqueInput
  }

  /**
   * allergie findFirst
   */
  export type allergieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieInclude<ExtArgs> | null
    /**
     * Filter, which allergie to fetch.
     */
    where?: allergieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of allergies to fetch.
     */
    orderBy?: allergieOrderByWithRelationInput | allergieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for allergies.
     */
    cursor?: allergieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` allergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` allergies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of allergies.
     */
    distinct?: AllergieScalarFieldEnum | AllergieScalarFieldEnum[]
  }

  /**
   * allergie findFirstOrThrow
   */
  export type allergieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieInclude<ExtArgs> | null
    /**
     * Filter, which allergie to fetch.
     */
    where?: allergieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of allergies to fetch.
     */
    orderBy?: allergieOrderByWithRelationInput | allergieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for allergies.
     */
    cursor?: allergieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` allergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` allergies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of allergies.
     */
    distinct?: AllergieScalarFieldEnum | AllergieScalarFieldEnum[]
  }

  /**
   * allergie findMany
   */
  export type allergieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieInclude<ExtArgs> | null
    /**
     * Filter, which allergies to fetch.
     */
    where?: allergieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of allergies to fetch.
     */
    orderBy?: allergieOrderByWithRelationInput | allergieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing allergies.
     */
    cursor?: allergieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` allergies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` allergies.
     */
    skip?: number
    distinct?: AllergieScalarFieldEnum | AllergieScalarFieldEnum[]
  }

  /**
   * allergie create
   */
  export type allergieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieInclude<ExtArgs> | null
    /**
     * The data needed to create a allergie.
     */
    data: XOR<allergieCreateInput, allergieUncheckedCreateInput>
  }

  /**
   * allergie createMany
   */
  export type allergieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many allergies.
     */
    data: allergieCreateManyInput | allergieCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * allergie createManyAndReturn
   */
  export type allergieCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * The data used to create many allergies.
     */
    data: allergieCreateManyInput | allergieCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * allergie update
   */
  export type allergieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieInclude<ExtArgs> | null
    /**
     * The data needed to update a allergie.
     */
    data: XOR<allergieUpdateInput, allergieUncheckedUpdateInput>
    /**
     * Choose, which allergie to update.
     */
    where: allergieWhereUniqueInput
  }

  /**
   * allergie updateMany
   */
  export type allergieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update allergies.
     */
    data: XOR<allergieUpdateManyMutationInput, allergieUncheckedUpdateManyInput>
    /**
     * Filter which allergies to update
     */
    where?: allergieWhereInput
    /**
     * Limit how many allergies to update.
     */
    limit?: number
  }

  /**
   * allergie updateManyAndReturn
   */
  export type allergieUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * The data used to update allergies.
     */
    data: XOR<allergieUpdateManyMutationInput, allergieUncheckedUpdateManyInput>
    /**
     * Filter which allergies to update
     */
    where?: allergieWhereInput
    /**
     * Limit how many allergies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * allergie upsert
   */
  export type allergieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieInclude<ExtArgs> | null
    /**
     * The filter to search for the allergie to update in case it exists.
     */
    where: allergieWhereUniqueInput
    /**
     * In case the allergie found by the `where` argument doesn't exist, create a new allergie with this data.
     */
    create: XOR<allergieCreateInput, allergieUncheckedCreateInput>
    /**
     * In case the allergie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<allergieUpdateInput, allergieUncheckedUpdateInput>
  }

  /**
   * allergie delete
   */
  export type allergieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieInclude<ExtArgs> | null
    /**
     * Filter which allergie to delete.
     */
    where: allergieWhereUniqueInput
  }

  /**
   * allergie deleteMany
   */
  export type allergieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which allergies to delete
     */
    where?: allergieWhereInput
    /**
     * Limit how many allergies to delete.
     */
    limit?: number
  }

  /**
   * allergie without action
   */
  export type allergieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieInclude<ExtArgs> | null
  }


  /**
   * Model dienstgrad
   */

  export type AggregateDienstgrad = {
    _count: DienstgradCountAggregateOutputType | null
    _avg: DienstgradAvgAggregateOutputType | null
    _sum: DienstgradSumAggregateOutputType | null
    _min: DienstgradMinAggregateOutputType | null
    _max: DienstgradMaxAggregateOutputType | null
  }

  export type DienstgradAvgAggregateOutputType = {
    ID: number | null
  }

  export type DienstgradSumAggregateOutputType = {
    ID: number | null
  }

  export type DienstgradMinAggregateOutputType = {
    ID: number | null
    Abkuerzung_maennlich: string | null
    Beschreibung_maennlich: string | null
    Abkuerzung_weiblich: string | null
    Beschreibung_weiblich: string | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type DienstgradMaxAggregateOutputType = {
    ID: number | null
    Abkuerzung_maennlich: string | null
    Beschreibung_maennlich: string | null
    Abkuerzung_weiblich: string | null
    Beschreibung_weiblich: string | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type DienstgradCountAggregateOutputType = {
    ID: number
    Abkuerzung_maennlich: number
    Beschreibung_maennlich: number
    Abkuerzung_weiblich: number
    Beschreibung_weiblich: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type DienstgradAvgAggregateInputType = {
    ID?: true
  }

  export type DienstgradSumAggregateInputType = {
    ID?: true
  }

  export type DienstgradMinAggregateInputType = {
    ID?: true
    Abkuerzung_maennlich?: true
    Beschreibung_maennlich?: true
    Abkuerzung_weiblich?: true
    Beschreibung_weiblich?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type DienstgradMaxAggregateInputType = {
    ID?: true
    Abkuerzung_maennlich?: true
    Beschreibung_maennlich?: true
    Abkuerzung_weiblich?: true
    Beschreibung_weiblich?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type DienstgradCountAggregateInputType = {
    ID?: true
    Abkuerzung_maennlich?: true
    Beschreibung_maennlich?: true
    Abkuerzung_weiblich?: true
    Beschreibung_weiblich?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type DienstgradAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which dienstgrad to aggregate.
     */
    where?: dienstgradWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dienstgrads to fetch.
     */
    orderBy?: dienstgradOrderByWithRelationInput | dienstgradOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: dienstgradWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dienstgrads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dienstgrads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned dienstgrads
    **/
    _count?: true | DienstgradCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DienstgradAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DienstgradSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DienstgradMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DienstgradMaxAggregateInputType
  }

  export type GetDienstgradAggregateType<T extends DienstgradAggregateArgs> = {
        [P in keyof T & keyof AggregateDienstgrad]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDienstgrad[P]>
      : GetScalarType<T[P], AggregateDienstgrad[P]>
  }




  export type dienstgradGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: dienstgradWhereInput
    orderBy?: dienstgradOrderByWithAggregationInput | dienstgradOrderByWithAggregationInput[]
    by: DienstgradScalarFieldEnum[] | DienstgradScalarFieldEnum
    having?: dienstgradScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DienstgradCountAggregateInputType | true
    _avg?: DienstgradAvgAggregateInputType
    _sum?: DienstgradSumAggregateInputType
    _min?: DienstgradMinAggregateInputType
    _max?: DienstgradMaxAggregateInputType
  }

  export type DienstgradGroupByOutputType = {
    ID: number
    Abkuerzung_maennlich: string | null
    Beschreibung_maennlich: string | null
    Abkuerzung_weiblich: string | null
    Beschreibung_weiblich: string | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
    _count: DienstgradCountAggregateOutputType | null
    _avg: DienstgradAvgAggregateOutputType | null
    _sum: DienstgradSumAggregateOutputType | null
    _min: DienstgradMinAggregateOutputType | null
    _max: DienstgradMaxAggregateOutputType | null
  }

  type GetDienstgradGroupByPayload<T extends dienstgradGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DienstgradGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DienstgradGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DienstgradGroupByOutputType[P]>
            : GetScalarType<T[P], DienstgradGroupByOutputType[P]>
        }
      >
    >


  export type dienstgradSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Abkuerzung_maennlich?: boolean
    Beschreibung_maennlich?: boolean
    Abkuerzung_weiblich?: boolean
    Beschreibung_weiblich?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["dienstgrad"]>

  export type dienstgradSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Abkuerzung_maennlich?: boolean
    Beschreibung_maennlich?: boolean
    Abkuerzung_weiblich?: boolean
    Beschreibung_weiblich?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["dienstgrad"]>

  export type dienstgradSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Abkuerzung_maennlich?: boolean
    Beschreibung_maennlich?: boolean
    Abkuerzung_weiblich?: boolean
    Beschreibung_weiblich?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["dienstgrad"]>

  export type dienstgradSelectScalar = {
    ID?: boolean
    Abkuerzung_maennlich?: boolean
    Beschreibung_maennlich?: boolean
    Abkuerzung_weiblich?: boolean
    Beschreibung_weiblich?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type dienstgradOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Abkuerzung_maennlich" | "Beschreibung_maennlich" | "Abkuerzung_weiblich" | "Beschreibung_weiblich" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["dienstgrad"]>

  export type $dienstgradPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "dienstgrad"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Abkuerzung_maennlich: string | null
      Beschreibung_maennlich: string | null
      Abkuerzung_weiblich: string | null
      Beschreibung_weiblich: string | null
      Erstellt_am: Date | null
      Geaendert_am: Date | null
    }, ExtArgs["result"]["dienstgrad"]>
    composites: {}
  }

  type dienstgradGetPayload<S extends boolean | null | undefined | dienstgradDefaultArgs> = $Result.GetResult<Prisma.$dienstgradPayload, S>

  type dienstgradCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<dienstgradFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DienstgradCountAggregateInputType | true
    }

  export interface dienstgradDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['dienstgrad'], meta: { name: 'dienstgrad' } }
    /**
     * Find zero or one Dienstgrad that matches the filter.
     * @param {dienstgradFindUniqueArgs} args - Arguments to find a Dienstgrad
     * @example
     * // Get one Dienstgrad
     * const dienstgrad = await prisma.dienstgrad.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends dienstgradFindUniqueArgs>(args: SelectSubset<T, dienstgradFindUniqueArgs<ExtArgs>>): Prisma__dienstgradClient<$Result.GetResult<Prisma.$dienstgradPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Dienstgrad that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {dienstgradFindUniqueOrThrowArgs} args - Arguments to find a Dienstgrad
     * @example
     * // Get one Dienstgrad
     * const dienstgrad = await prisma.dienstgrad.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends dienstgradFindUniqueOrThrowArgs>(args: SelectSubset<T, dienstgradFindUniqueOrThrowArgs<ExtArgs>>): Prisma__dienstgradClient<$Result.GetResult<Prisma.$dienstgradPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Dienstgrad that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dienstgradFindFirstArgs} args - Arguments to find a Dienstgrad
     * @example
     * // Get one Dienstgrad
     * const dienstgrad = await prisma.dienstgrad.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends dienstgradFindFirstArgs>(args?: SelectSubset<T, dienstgradFindFirstArgs<ExtArgs>>): Prisma__dienstgradClient<$Result.GetResult<Prisma.$dienstgradPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Dienstgrad that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dienstgradFindFirstOrThrowArgs} args - Arguments to find a Dienstgrad
     * @example
     * // Get one Dienstgrad
     * const dienstgrad = await prisma.dienstgrad.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends dienstgradFindFirstOrThrowArgs>(args?: SelectSubset<T, dienstgradFindFirstOrThrowArgs<ExtArgs>>): Prisma__dienstgradClient<$Result.GetResult<Prisma.$dienstgradPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Dienstgrads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dienstgradFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dienstgrads
     * const dienstgrads = await prisma.dienstgrad.findMany()
     * 
     * // Get first 10 Dienstgrads
     * const dienstgrads = await prisma.dienstgrad.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const dienstgradWithIDOnly = await prisma.dienstgrad.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends dienstgradFindManyArgs>(args?: SelectSubset<T, dienstgradFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dienstgradPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Dienstgrad.
     * @param {dienstgradCreateArgs} args - Arguments to create a Dienstgrad.
     * @example
     * // Create one Dienstgrad
     * const Dienstgrad = await prisma.dienstgrad.create({
     *   data: {
     *     // ... data to create a Dienstgrad
     *   }
     * })
     * 
     */
    create<T extends dienstgradCreateArgs>(args: SelectSubset<T, dienstgradCreateArgs<ExtArgs>>): Prisma__dienstgradClient<$Result.GetResult<Prisma.$dienstgradPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Dienstgrads.
     * @param {dienstgradCreateManyArgs} args - Arguments to create many Dienstgrads.
     * @example
     * // Create many Dienstgrads
     * const dienstgrad = await prisma.dienstgrad.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends dienstgradCreateManyArgs>(args?: SelectSubset<T, dienstgradCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Dienstgrads and returns the data saved in the database.
     * @param {dienstgradCreateManyAndReturnArgs} args - Arguments to create many Dienstgrads.
     * @example
     * // Create many Dienstgrads
     * const dienstgrad = await prisma.dienstgrad.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Dienstgrads and only return the `ID`
     * const dienstgradWithIDOnly = await prisma.dienstgrad.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends dienstgradCreateManyAndReturnArgs>(args?: SelectSubset<T, dienstgradCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dienstgradPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Dienstgrad.
     * @param {dienstgradDeleteArgs} args - Arguments to delete one Dienstgrad.
     * @example
     * // Delete one Dienstgrad
     * const Dienstgrad = await prisma.dienstgrad.delete({
     *   where: {
     *     // ... filter to delete one Dienstgrad
     *   }
     * })
     * 
     */
    delete<T extends dienstgradDeleteArgs>(args: SelectSubset<T, dienstgradDeleteArgs<ExtArgs>>): Prisma__dienstgradClient<$Result.GetResult<Prisma.$dienstgradPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Dienstgrad.
     * @param {dienstgradUpdateArgs} args - Arguments to update one Dienstgrad.
     * @example
     * // Update one Dienstgrad
     * const dienstgrad = await prisma.dienstgrad.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends dienstgradUpdateArgs>(args: SelectSubset<T, dienstgradUpdateArgs<ExtArgs>>): Prisma__dienstgradClient<$Result.GetResult<Prisma.$dienstgradPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Dienstgrads.
     * @param {dienstgradDeleteManyArgs} args - Arguments to filter Dienstgrads to delete.
     * @example
     * // Delete a few Dienstgrads
     * const { count } = await prisma.dienstgrad.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends dienstgradDeleteManyArgs>(args?: SelectSubset<T, dienstgradDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dienstgrads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dienstgradUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dienstgrads
     * const dienstgrad = await prisma.dienstgrad.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends dienstgradUpdateManyArgs>(args: SelectSubset<T, dienstgradUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dienstgrads and returns the data updated in the database.
     * @param {dienstgradUpdateManyAndReturnArgs} args - Arguments to update many Dienstgrads.
     * @example
     * // Update many Dienstgrads
     * const dienstgrad = await prisma.dienstgrad.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Dienstgrads and only return the `ID`
     * const dienstgradWithIDOnly = await prisma.dienstgrad.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends dienstgradUpdateManyAndReturnArgs>(args: SelectSubset<T, dienstgradUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dienstgradPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Dienstgrad.
     * @param {dienstgradUpsertArgs} args - Arguments to update or create a Dienstgrad.
     * @example
     * // Update or create a Dienstgrad
     * const dienstgrad = await prisma.dienstgrad.upsert({
     *   create: {
     *     // ... data to create a Dienstgrad
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dienstgrad we want to update
     *   }
     * })
     */
    upsert<T extends dienstgradUpsertArgs>(args: SelectSubset<T, dienstgradUpsertArgs<ExtArgs>>): Prisma__dienstgradClient<$Result.GetResult<Prisma.$dienstgradPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Dienstgrads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dienstgradCountArgs} args - Arguments to filter Dienstgrads to count.
     * @example
     * // Count the number of Dienstgrads
     * const count = await prisma.dienstgrad.count({
     *   where: {
     *     // ... the filter for the Dienstgrads we want to count
     *   }
     * })
    **/
    count<T extends dienstgradCountArgs>(
      args?: Subset<T, dienstgradCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DienstgradCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dienstgrad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DienstgradAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DienstgradAggregateArgs>(args: Subset<T, DienstgradAggregateArgs>): Prisma.PrismaPromise<GetDienstgradAggregateType<T>>

    /**
     * Group by Dienstgrad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dienstgradGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends dienstgradGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: dienstgradGroupByArgs['orderBy'] }
        : { orderBy?: dienstgradGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, dienstgradGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDienstgradGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the dienstgrad model
   */
  readonly fields: dienstgradFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for dienstgrad.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__dienstgradClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the dienstgrad model
   */
  interface dienstgradFieldRefs {
    readonly ID: FieldRef<"dienstgrad", 'Int'>
    readonly Abkuerzung_maennlich: FieldRef<"dienstgrad", 'String'>
    readonly Beschreibung_maennlich: FieldRef<"dienstgrad", 'String'>
    readonly Abkuerzung_weiblich: FieldRef<"dienstgrad", 'String'>
    readonly Beschreibung_weiblich: FieldRef<"dienstgrad", 'String'>
    readonly Erstellt_am: FieldRef<"dienstgrad", 'DateTime'>
    readonly Geaendert_am: FieldRef<"dienstgrad", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * dienstgrad findUnique
   */
  export type dienstgradFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstgrad
     */
    select?: dienstgradSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstgrad
     */
    omit?: dienstgradOmit<ExtArgs> | null
    /**
     * Filter, which dienstgrad to fetch.
     */
    where: dienstgradWhereUniqueInput
  }

  /**
   * dienstgrad findUniqueOrThrow
   */
  export type dienstgradFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstgrad
     */
    select?: dienstgradSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstgrad
     */
    omit?: dienstgradOmit<ExtArgs> | null
    /**
     * Filter, which dienstgrad to fetch.
     */
    where: dienstgradWhereUniqueInput
  }

  /**
   * dienstgrad findFirst
   */
  export type dienstgradFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstgrad
     */
    select?: dienstgradSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstgrad
     */
    omit?: dienstgradOmit<ExtArgs> | null
    /**
     * Filter, which dienstgrad to fetch.
     */
    where?: dienstgradWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dienstgrads to fetch.
     */
    orderBy?: dienstgradOrderByWithRelationInput | dienstgradOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dienstgrads.
     */
    cursor?: dienstgradWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dienstgrads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dienstgrads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dienstgrads.
     */
    distinct?: DienstgradScalarFieldEnum | DienstgradScalarFieldEnum[]
  }

  /**
   * dienstgrad findFirstOrThrow
   */
  export type dienstgradFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstgrad
     */
    select?: dienstgradSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstgrad
     */
    omit?: dienstgradOmit<ExtArgs> | null
    /**
     * Filter, which dienstgrad to fetch.
     */
    where?: dienstgradWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dienstgrads to fetch.
     */
    orderBy?: dienstgradOrderByWithRelationInput | dienstgradOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dienstgrads.
     */
    cursor?: dienstgradWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dienstgrads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dienstgrads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dienstgrads.
     */
    distinct?: DienstgradScalarFieldEnum | DienstgradScalarFieldEnum[]
  }

  /**
   * dienstgrad findMany
   */
  export type dienstgradFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstgrad
     */
    select?: dienstgradSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstgrad
     */
    omit?: dienstgradOmit<ExtArgs> | null
    /**
     * Filter, which dienstgrads to fetch.
     */
    where?: dienstgradWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dienstgrads to fetch.
     */
    orderBy?: dienstgradOrderByWithRelationInput | dienstgradOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing dienstgrads.
     */
    cursor?: dienstgradWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dienstgrads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dienstgrads.
     */
    skip?: number
    distinct?: DienstgradScalarFieldEnum | DienstgradScalarFieldEnum[]
  }

  /**
   * dienstgrad create
   */
  export type dienstgradCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstgrad
     */
    select?: dienstgradSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstgrad
     */
    omit?: dienstgradOmit<ExtArgs> | null
    /**
     * The data needed to create a dienstgrad.
     */
    data?: XOR<dienstgradCreateInput, dienstgradUncheckedCreateInput>
  }

  /**
   * dienstgrad createMany
   */
  export type dienstgradCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many dienstgrads.
     */
    data: dienstgradCreateManyInput | dienstgradCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * dienstgrad createManyAndReturn
   */
  export type dienstgradCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstgrad
     */
    select?: dienstgradSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the dienstgrad
     */
    omit?: dienstgradOmit<ExtArgs> | null
    /**
     * The data used to create many dienstgrads.
     */
    data: dienstgradCreateManyInput | dienstgradCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * dienstgrad update
   */
  export type dienstgradUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstgrad
     */
    select?: dienstgradSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstgrad
     */
    omit?: dienstgradOmit<ExtArgs> | null
    /**
     * The data needed to update a dienstgrad.
     */
    data: XOR<dienstgradUpdateInput, dienstgradUncheckedUpdateInput>
    /**
     * Choose, which dienstgrad to update.
     */
    where: dienstgradWhereUniqueInput
  }

  /**
   * dienstgrad updateMany
   */
  export type dienstgradUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update dienstgrads.
     */
    data: XOR<dienstgradUpdateManyMutationInput, dienstgradUncheckedUpdateManyInput>
    /**
     * Filter which dienstgrads to update
     */
    where?: dienstgradWhereInput
    /**
     * Limit how many dienstgrads to update.
     */
    limit?: number
  }

  /**
   * dienstgrad updateManyAndReturn
   */
  export type dienstgradUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstgrad
     */
    select?: dienstgradSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the dienstgrad
     */
    omit?: dienstgradOmit<ExtArgs> | null
    /**
     * The data used to update dienstgrads.
     */
    data: XOR<dienstgradUpdateManyMutationInput, dienstgradUncheckedUpdateManyInput>
    /**
     * Filter which dienstgrads to update
     */
    where?: dienstgradWhereInput
    /**
     * Limit how many dienstgrads to update.
     */
    limit?: number
  }

  /**
   * dienstgrad upsert
   */
  export type dienstgradUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstgrad
     */
    select?: dienstgradSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstgrad
     */
    omit?: dienstgradOmit<ExtArgs> | null
    /**
     * The filter to search for the dienstgrad to update in case it exists.
     */
    where: dienstgradWhereUniqueInput
    /**
     * In case the dienstgrad found by the `where` argument doesn't exist, create a new dienstgrad with this data.
     */
    create: XOR<dienstgradCreateInput, dienstgradUncheckedCreateInput>
    /**
     * In case the dienstgrad was found with the provided `where` argument, update it with this data.
     */
    update: XOR<dienstgradUpdateInput, dienstgradUncheckedUpdateInput>
  }

  /**
   * dienstgrad delete
   */
  export type dienstgradDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstgrad
     */
    select?: dienstgradSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstgrad
     */
    omit?: dienstgradOmit<ExtArgs> | null
    /**
     * Filter which dienstgrad to delete.
     */
    where: dienstgradWhereUniqueInput
  }

  /**
   * dienstgrad deleteMany
   */
  export type dienstgradDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which dienstgrads to delete
     */
    where?: dienstgradWhereInput
    /**
     * Limit how many dienstgrads to delete.
     */
    limit?: number
  }

  /**
   * dienstgrad without action
   */
  export type dienstgradDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstgrad
     */
    select?: dienstgradSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstgrad
     */
    omit?: dienstgradOmit<ExtArgs> | null
  }


  /**
   * Model dienstabend
   */

  export type AggregateDienstabend = {
    _count: DienstabendCountAggregateOutputType | null
    _avg: DienstabendAvgAggregateOutputType | null
    _sum: DienstabendSumAggregateOutputType | null
    _min: DienstabendMinAggregateOutputType | null
    _max: DienstabendMaxAggregateOutputType | null
  }

  export type DienstabendAvgAggregateOutputType = {
    ID: number | null
  }

  export type DienstabendSumAggregateOutputType = {
    ID: number | null
  }

  export type DienstabendMinAggregateOutputType = {
    ID: number | null
    Datum: Date | null
    Thema: string | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type DienstabendMaxAggregateOutputType = {
    ID: number | null
    Datum: Date | null
    Thema: string | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type DienstabendCountAggregateOutputType = {
    ID: number
    Datum: number
    Thema: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type DienstabendAvgAggregateInputType = {
    ID?: true
  }

  export type DienstabendSumAggregateInputType = {
    ID?: true
  }

  export type DienstabendMinAggregateInputType = {
    ID?: true
    Datum?: true
    Thema?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type DienstabendMaxAggregateInputType = {
    ID?: true
    Datum?: true
    Thema?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type DienstabendCountAggregateInputType = {
    ID?: true
    Datum?: true
    Thema?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type DienstabendAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which dienstabend to aggregate.
     */
    where?: dienstabendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dienstabends to fetch.
     */
    orderBy?: dienstabendOrderByWithRelationInput | dienstabendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: dienstabendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dienstabends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dienstabends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned dienstabends
    **/
    _count?: true | DienstabendCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DienstabendAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DienstabendSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DienstabendMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DienstabendMaxAggregateInputType
  }

  export type GetDienstabendAggregateType<T extends DienstabendAggregateArgs> = {
        [P in keyof T & keyof AggregateDienstabend]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDienstabend[P]>
      : GetScalarType<T[P], AggregateDienstabend[P]>
  }




  export type dienstabendGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: dienstabendWhereInput
    orderBy?: dienstabendOrderByWithAggregationInput | dienstabendOrderByWithAggregationInput[]
    by: DienstabendScalarFieldEnum[] | DienstabendScalarFieldEnum
    having?: dienstabendScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DienstabendCountAggregateInputType | true
    _avg?: DienstabendAvgAggregateInputType
    _sum?: DienstabendSumAggregateInputType
    _min?: DienstabendMinAggregateInputType
    _max?: DienstabendMaxAggregateInputType
  }

  export type DienstabendGroupByOutputType = {
    ID: number
    Datum: Date | null
    Thema: string | null
    Erstellt_am: Date
    Geaendert_am: Date | null
    _count: DienstabendCountAggregateOutputType | null
    _avg: DienstabendAvgAggregateOutputType | null
    _sum: DienstabendSumAggregateOutputType | null
    _min: DienstabendMinAggregateOutputType | null
    _max: DienstabendMaxAggregateOutputType | null
  }

  type GetDienstabendGroupByPayload<T extends dienstabendGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DienstabendGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DienstabendGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DienstabendGroupByOutputType[P]>
            : GetScalarType<T[P], DienstabendGroupByOutputType[P]>
        }
      >
    >


  export type dienstabendSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Datum?: boolean
    Thema?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    einteilung?: boolean | dienstabend$einteilungArgs<ExtArgs>
    _count?: boolean | DienstabendCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dienstabend"]>

  export type dienstabendSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Datum?: boolean
    Thema?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["dienstabend"]>

  export type dienstabendSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Datum?: boolean
    Thema?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["dienstabend"]>

  export type dienstabendSelectScalar = {
    ID?: boolean
    Datum?: boolean
    Thema?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type dienstabendOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Datum" | "Thema" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["dienstabend"]>
  export type dienstabendInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    einteilung?: boolean | dienstabend$einteilungArgs<ExtArgs>
    _count?: boolean | DienstabendCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type dienstabendIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type dienstabendIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $dienstabendPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "dienstabend"
    objects: {
      einteilung: Prisma.$einteilungPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Datum: Date | null
      Thema: string | null
      Erstellt_am: Date
      Geaendert_am: Date | null
    }, ExtArgs["result"]["dienstabend"]>
    composites: {}
  }

  type dienstabendGetPayload<S extends boolean | null | undefined | dienstabendDefaultArgs> = $Result.GetResult<Prisma.$dienstabendPayload, S>

  type dienstabendCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<dienstabendFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DienstabendCountAggregateInputType | true
    }

  export interface dienstabendDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['dienstabend'], meta: { name: 'dienstabend' } }
    /**
     * Find zero or one Dienstabend that matches the filter.
     * @param {dienstabendFindUniqueArgs} args - Arguments to find a Dienstabend
     * @example
     * // Get one Dienstabend
     * const dienstabend = await prisma.dienstabend.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends dienstabendFindUniqueArgs>(args: SelectSubset<T, dienstabendFindUniqueArgs<ExtArgs>>): Prisma__dienstabendClient<$Result.GetResult<Prisma.$dienstabendPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Dienstabend that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {dienstabendFindUniqueOrThrowArgs} args - Arguments to find a Dienstabend
     * @example
     * // Get one Dienstabend
     * const dienstabend = await prisma.dienstabend.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends dienstabendFindUniqueOrThrowArgs>(args: SelectSubset<T, dienstabendFindUniqueOrThrowArgs<ExtArgs>>): Prisma__dienstabendClient<$Result.GetResult<Prisma.$dienstabendPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Dienstabend that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dienstabendFindFirstArgs} args - Arguments to find a Dienstabend
     * @example
     * // Get one Dienstabend
     * const dienstabend = await prisma.dienstabend.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends dienstabendFindFirstArgs>(args?: SelectSubset<T, dienstabendFindFirstArgs<ExtArgs>>): Prisma__dienstabendClient<$Result.GetResult<Prisma.$dienstabendPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Dienstabend that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dienstabendFindFirstOrThrowArgs} args - Arguments to find a Dienstabend
     * @example
     * // Get one Dienstabend
     * const dienstabend = await prisma.dienstabend.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends dienstabendFindFirstOrThrowArgs>(args?: SelectSubset<T, dienstabendFindFirstOrThrowArgs<ExtArgs>>): Prisma__dienstabendClient<$Result.GetResult<Prisma.$dienstabendPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Dienstabends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dienstabendFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dienstabends
     * const dienstabends = await prisma.dienstabend.findMany()
     * 
     * // Get first 10 Dienstabends
     * const dienstabends = await prisma.dienstabend.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const dienstabendWithIDOnly = await prisma.dienstabend.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends dienstabendFindManyArgs>(args?: SelectSubset<T, dienstabendFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dienstabendPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Dienstabend.
     * @param {dienstabendCreateArgs} args - Arguments to create a Dienstabend.
     * @example
     * // Create one Dienstabend
     * const Dienstabend = await prisma.dienstabend.create({
     *   data: {
     *     // ... data to create a Dienstabend
     *   }
     * })
     * 
     */
    create<T extends dienstabendCreateArgs>(args: SelectSubset<T, dienstabendCreateArgs<ExtArgs>>): Prisma__dienstabendClient<$Result.GetResult<Prisma.$dienstabendPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Dienstabends.
     * @param {dienstabendCreateManyArgs} args - Arguments to create many Dienstabends.
     * @example
     * // Create many Dienstabends
     * const dienstabend = await prisma.dienstabend.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends dienstabendCreateManyArgs>(args?: SelectSubset<T, dienstabendCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Dienstabends and returns the data saved in the database.
     * @param {dienstabendCreateManyAndReturnArgs} args - Arguments to create many Dienstabends.
     * @example
     * // Create many Dienstabends
     * const dienstabend = await prisma.dienstabend.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Dienstabends and only return the `ID`
     * const dienstabendWithIDOnly = await prisma.dienstabend.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends dienstabendCreateManyAndReturnArgs>(args?: SelectSubset<T, dienstabendCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dienstabendPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Dienstabend.
     * @param {dienstabendDeleteArgs} args - Arguments to delete one Dienstabend.
     * @example
     * // Delete one Dienstabend
     * const Dienstabend = await prisma.dienstabend.delete({
     *   where: {
     *     // ... filter to delete one Dienstabend
     *   }
     * })
     * 
     */
    delete<T extends dienstabendDeleteArgs>(args: SelectSubset<T, dienstabendDeleteArgs<ExtArgs>>): Prisma__dienstabendClient<$Result.GetResult<Prisma.$dienstabendPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Dienstabend.
     * @param {dienstabendUpdateArgs} args - Arguments to update one Dienstabend.
     * @example
     * // Update one Dienstabend
     * const dienstabend = await prisma.dienstabend.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends dienstabendUpdateArgs>(args: SelectSubset<T, dienstabendUpdateArgs<ExtArgs>>): Prisma__dienstabendClient<$Result.GetResult<Prisma.$dienstabendPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Dienstabends.
     * @param {dienstabendDeleteManyArgs} args - Arguments to filter Dienstabends to delete.
     * @example
     * // Delete a few Dienstabends
     * const { count } = await prisma.dienstabend.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends dienstabendDeleteManyArgs>(args?: SelectSubset<T, dienstabendDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dienstabends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dienstabendUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dienstabends
     * const dienstabend = await prisma.dienstabend.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends dienstabendUpdateManyArgs>(args: SelectSubset<T, dienstabendUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dienstabends and returns the data updated in the database.
     * @param {dienstabendUpdateManyAndReturnArgs} args - Arguments to update many Dienstabends.
     * @example
     * // Update many Dienstabends
     * const dienstabend = await prisma.dienstabend.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Dienstabends and only return the `ID`
     * const dienstabendWithIDOnly = await prisma.dienstabend.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends dienstabendUpdateManyAndReturnArgs>(args: SelectSubset<T, dienstabendUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dienstabendPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Dienstabend.
     * @param {dienstabendUpsertArgs} args - Arguments to update or create a Dienstabend.
     * @example
     * // Update or create a Dienstabend
     * const dienstabend = await prisma.dienstabend.upsert({
     *   create: {
     *     // ... data to create a Dienstabend
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dienstabend we want to update
     *   }
     * })
     */
    upsert<T extends dienstabendUpsertArgs>(args: SelectSubset<T, dienstabendUpsertArgs<ExtArgs>>): Prisma__dienstabendClient<$Result.GetResult<Prisma.$dienstabendPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Dienstabends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dienstabendCountArgs} args - Arguments to filter Dienstabends to count.
     * @example
     * // Count the number of Dienstabends
     * const count = await prisma.dienstabend.count({
     *   where: {
     *     // ... the filter for the Dienstabends we want to count
     *   }
     * })
    **/
    count<T extends dienstabendCountArgs>(
      args?: Subset<T, dienstabendCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DienstabendCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dienstabend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DienstabendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DienstabendAggregateArgs>(args: Subset<T, DienstabendAggregateArgs>): Prisma.PrismaPromise<GetDienstabendAggregateType<T>>

    /**
     * Group by Dienstabend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dienstabendGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends dienstabendGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: dienstabendGroupByArgs['orderBy'] }
        : { orderBy?: dienstabendGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, dienstabendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDienstabendGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the dienstabend model
   */
  readonly fields: dienstabendFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for dienstabend.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__dienstabendClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    einteilung<T extends dienstabend$einteilungArgs<ExtArgs> = {}>(args?: Subset<T, dienstabend$einteilungArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the dienstabend model
   */
  interface dienstabendFieldRefs {
    readonly ID: FieldRef<"dienstabend", 'Int'>
    readonly Datum: FieldRef<"dienstabend", 'DateTime'>
    readonly Thema: FieldRef<"dienstabend", 'String'>
    readonly Erstellt_am: FieldRef<"dienstabend", 'DateTime'>
    readonly Geaendert_am: FieldRef<"dienstabend", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * dienstabend findUnique
   */
  export type dienstabendFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstabend
     */
    select?: dienstabendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstabend
     */
    omit?: dienstabendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dienstabendInclude<ExtArgs> | null
    /**
     * Filter, which dienstabend to fetch.
     */
    where: dienstabendWhereUniqueInput
  }

  /**
   * dienstabend findUniqueOrThrow
   */
  export type dienstabendFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstabend
     */
    select?: dienstabendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstabend
     */
    omit?: dienstabendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dienstabendInclude<ExtArgs> | null
    /**
     * Filter, which dienstabend to fetch.
     */
    where: dienstabendWhereUniqueInput
  }

  /**
   * dienstabend findFirst
   */
  export type dienstabendFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstabend
     */
    select?: dienstabendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstabend
     */
    omit?: dienstabendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dienstabendInclude<ExtArgs> | null
    /**
     * Filter, which dienstabend to fetch.
     */
    where?: dienstabendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dienstabends to fetch.
     */
    orderBy?: dienstabendOrderByWithRelationInput | dienstabendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dienstabends.
     */
    cursor?: dienstabendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dienstabends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dienstabends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dienstabends.
     */
    distinct?: DienstabendScalarFieldEnum | DienstabendScalarFieldEnum[]
  }

  /**
   * dienstabend findFirstOrThrow
   */
  export type dienstabendFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstabend
     */
    select?: dienstabendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstabend
     */
    omit?: dienstabendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dienstabendInclude<ExtArgs> | null
    /**
     * Filter, which dienstabend to fetch.
     */
    where?: dienstabendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dienstabends to fetch.
     */
    orderBy?: dienstabendOrderByWithRelationInput | dienstabendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for dienstabends.
     */
    cursor?: dienstabendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dienstabends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dienstabends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of dienstabends.
     */
    distinct?: DienstabendScalarFieldEnum | DienstabendScalarFieldEnum[]
  }

  /**
   * dienstabend findMany
   */
  export type dienstabendFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstabend
     */
    select?: dienstabendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstabend
     */
    omit?: dienstabendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dienstabendInclude<ExtArgs> | null
    /**
     * Filter, which dienstabends to fetch.
     */
    where?: dienstabendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of dienstabends to fetch.
     */
    orderBy?: dienstabendOrderByWithRelationInput | dienstabendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing dienstabends.
     */
    cursor?: dienstabendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` dienstabends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` dienstabends.
     */
    skip?: number
    distinct?: DienstabendScalarFieldEnum | DienstabendScalarFieldEnum[]
  }

  /**
   * dienstabend create
   */
  export type dienstabendCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstabend
     */
    select?: dienstabendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstabend
     */
    omit?: dienstabendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dienstabendInclude<ExtArgs> | null
    /**
     * The data needed to create a dienstabend.
     */
    data: XOR<dienstabendCreateInput, dienstabendUncheckedCreateInput>
  }

  /**
   * dienstabend createMany
   */
  export type dienstabendCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many dienstabends.
     */
    data: dienstabendCreateManyInput | dienstabendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * dienstabend createManyAndReturn
   */
  export type dienstabendCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstabend
     */
    select?: dienstabendSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the dienstabend
     */
    omit?: dienstabendOmit<ExtArgs> | null
    /**
     * The data used to create many dienstabends.
     */
    data: dienstabendCreateManyInput | dienstabendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * dienstabend update
   */
  export type dienstabendUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstabend
     */
    select?: dienstabendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstabend
     */
    omit?: dienstabendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dienstabendInclude<ExtArgs> | null
    /**
     * The data needed to update a dienstabend.
     */
    data: XOR<dienstabendUpdateInput, dienstabendUncheckedUpdateInput>
    /**
     * Choose, which dienstabend to update.
     */
    where: dienstabendWhereUniqueInput
  }

  /**
   * dienstabend updateMany
   */
  export type dienstabendUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update dienstabends.
     */
    data: XOR<dienstabendUpdateManyMutationInput, dienstabendUncheckedUpdateManyInput>
    /**
     * Filter which dienstabends to update
     */
    where?: dienstabendWhereInput
    /**
     * Limit how many dienstabends to update.
     */
    limit?: number
  }

  /**
   * dienstabend updateManyAndReturn
   */
  export type dienstabendUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstabend
     */
    select?: dienstabendSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the dienstabend
     */
    omit?: dienstabendOmit<ExtArgs> | null
    /**
     * The data used to update dienstabends.
     */
    data: XOR<dienstabendUpdateManyMutationInput, dienstabendUncheckedUpdateManyInput>
    /**
     * Filter which dienstabends to update
     */
    where?: dienstabendWhereInput
    /**
     * Limit how many dienstabends to update.
     */
    limit?: number
  }

  /**
   * dienstabend upsert
   */
  export type dienstabendUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstabend
     */
    select?: dienstabendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstabend
     */
    omit?: dienstabendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dienstabendInclude<ExtArgs> | null
    /**
     * The filter to search for the dienstabend to update in case it exists.
     */
    where: dienstabendWhereUniqueInput
    /**
     * In case the dienstabend found by the `where` argument doesn't exist, create a new dienstabend with this data.
     */
    create: XOR<dienstabendCreateInput, dienstabendUncheckedCreateInput>
    /**
     * In case the dienstabend was found with the provided `where` argument, update it with this data.
     */
    update: XOR<dienstabendUpdateInput, dienstabendUncheckedUpdateInput>
  }

  /**
   * dienstabend delete
   */
  export type dienstabendDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstabend
     */
    select?: dienstabendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstabend
     */
    omit?: dienstabendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dienstabendInclude<ExtArgs> | null
    /**
     * Filter which dienstabend to delete.
     */
    where: dienstabendWhereUniqueInput
  }

  /**
   * dienstabend deleteMany
   */
  export type dienstabendDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which dienstabends to delete
     */
    where?: dienstabendWhereInput
    /**
     * Limit how many dienstabends to delete.
     */
    limit?: number
  }

  /**
   * dienstabend.einteilung
   */
  export type dienstabend$einteilungArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    where?: einteilungWhereInput
    orderBy?: einteilungOrderByWithRelationInput | einteilungOrderByWithRelationInput[]
    cursor?: einteilungWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EinteilungScalarFieldEnum | EinteilungScalarFieldEnum[]
  }

  /**
   * dienstabend without action
   */
  export type dienstabendDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the dienstabend
     */
    select?: dienstabendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the dienstabend
     */
    omit?: dienstabendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dienstabendInclude<ExtArgs> | null
  }


  /**
   * Model einheit
   */

  export type AggregateEinheit = {
    _count: EinheitCountAggregateOutputType | null
    _avg: EinheitAvgAggregateOutputType | null
    _sum: EinheitSumAggregateOutputType | null
    _min: EinheitMinAggregateOutputType | null
    _max: EinheitMaxAggregateOutputType | null
  }

  export type EinheitAvgAggregateOutputType = {
    ID: number | null
  }

  export type EinheitSumAggregateOutputType = {
    ID: number | null
  }

  export type EinheitMinAggregateOutputType = {
    ID: number | null
    Abkuerzung: string | null
    Beschreibung: string | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type EinheitMaxAggregateOutputType = {
    ID: number | null
    Abkuerzung: string | null
    Beschreibung: string | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type EinheitCountAggregateOutputType = {
    ID: number
    Abkuerzung: number
    Beschreibung: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type EinheitAvgAggregateInputType = {
    ID?: true
  }

  export type EinheitSumAggregateInputType = {
    ID?: true
  }

  export type EinheitMinAggregateInputType = {
    ID?: true
    Abkuerzung?: true
    Beschreibung?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type EinheitMaxAggregateInputType = {
    ID?: true
    Abkuerzung?: true
    Beschreibung?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type EinheitCountAggregateInputType = {
    ID?: true
    Abkuerzung?: true
    Beschreibung?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type EinheitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which einheit to aggregate.
     */
    where?: einheitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of einheits to fetch.
     */
    orderBy?: einheitOrderByWithRelationInput | einheitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: einheitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` einheits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` einheits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned einheits
    **/
    _count?: true | EinheitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EinheitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EinheitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EinheitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EinheitMaxAggregateInputType
  }

  export type GetEinheitAggregateType<T extends EinheitAggregateArgs> = {
        [P in keyof T & keyof AggregateEinheit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEinheit[P]>
      : GetScalarType<T[P], AggregateEinheit[P]>
  }




  export type einheitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: einheitWhereInput
    orderBy?: einheitOrderByWithAggregationInput | einheitOrderByWithAggregationInput[]
    by: EinheitScalarFieldEnum[] | EinheitScalarFieldEnum
    having?: einheitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EinheitCountAggregateInputType | true
    _avg?: EinheitAvgAggregateInputType
    _sum?: EinheitSumAggregateInputType
    _min?: EinheitMinAggregateInputType
    _max?: EinheitMaxAggregateInputType
  }

  export type EinheitGroupByOutputType = {
    ID: number
    Abkuerzung: string | null
    Beschreibung: string | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
    _count: EinheitCountAggregateOutputType | null
    _avg: EinheitAvgAggregateOutputType | null
    _sum: EinheitSumAggregateOutputType | null
    _min: EinheitMinAggregateOutputType | null
    _max: EinheitMaxAggregateOutputType | null
  }

  type GetEinheitGroupByPayload<T extends einheitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EinheitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EinheitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EinheitGroupByOutputType[P]>
            : GetScalarType<T[P], EinheitGroupByOutputType[P]>
        }
      >
    >


  export type einheitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Abkuerzung?: boolean
    Beschreibung?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    einteilung?: boolean | einheit$einteilungArgs<ExtArgs>
    _count?: boolean | EinheitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["einheit"]>

  export type einheitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Abkuerzung?: boolean
    Beschreibung?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["einheit"]>

  export type einheitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Abkuerzung?: boolean
    Beschreibung?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["einheit"]>

  export type einheitSelectScalar = {
    ID?: boolean
    Abkuerzung?: boolean
    Beschreibung?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type einheitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Abkuerzung" | "Beschreibung" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["einheit"]>
  export type einheitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    einteilung?: boolean | einheit$einteilungArgs<ExtArgs>
    _count?: boolean | EinheitCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type einheitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type einheitIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $einheitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "einheit"
    objects: {
      einteilung: Prisma.$einteilungPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Abkuerzung: string | null
      Beschreibung: string | null
      Erstellt_am: Date | null
      Geaendert_am: Date | null
    }, ExtArgs["result"]["einheit"]>
    composites: {}
  }

  type einheitGetPayload<S extends boolean | null | undefined | einheitDefaultArgs> = $Result.GetResult<Prisma.$einheitPayload, S>

  type einheitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<einheitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EinheitCountAggregateInputType | true
    }

  export interface einheitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['einheit'], meta: { name: 'einheit' } }
    /**
     * Find zero or one Einheit that matches the filter.
     * @param {einheitFindUniqueArgs} args - Arguments to find a Einheit
     * @example
     * // Get one Einheit
     * const einheit = await prisma.einheit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends einheitFindUniqueArgs>(args: SelectSubset<T, einheitFindUniqueArgs<ExtArgs>>): Prisma__einheitClient<$Result.GetResult<Prisma.$einheitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Einheit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {einheitFindUniqueOrThrowArgs} args - Arguments to find a Einheit
     * @example
     * // Get one Einheit
     * const einheit = await prisma.einheit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends einheitFindUniqueOrThrowArgs>(args: SelectSubset<T, einheitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__einheitClient<$Result.GetResult<Prisma.$einheitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Einheit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einheitFindFirstArgs} args - Arguments to find a Einheit
     * @example
     * // Get one Einheit
     * const einheit = await prisma.einheit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends einheitFindFirstArgs>(args?: SelectSubset<T, einheitFindFirstArgs<ExtArgs>>): Prisma__einheitClient<$Result.GetResult<Prisma.$einheitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Einheit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einheitFindFirstOrThrowArgs} args - Arguments to find a Einheit
     * @example
     * // Get one Einheit
     * const einheit = await prisma.einheit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends einheitFindFirstOrThrowArgs>(args?: SelectSubset<T, einheitFindFirstOrThrowArgs<ExtArgs>>): Prisma__einheitClient<$Result.GetResult<Prisma.$einheitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Einheits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einheitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Einheits
     * const einheits = await prisma.einheit.findMany()
     * 
     * // Get first 10 Einheits
     * const einheits = await prisma.einheit.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const einheitWithIDOnly = await prisma.einheit.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends einheitFindManyArgs>(args?: SelectSubset<T, einheitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einheitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Einheit.
     * @param {einheitCreateArgs} args - Arguments to create a Einheit.
     * @example
     * // Create one Einheit
     * const Einheit = await prisma.einheit.create({
     *   data: {
     *     // ... data to create a Einheit
     *   }
     * })
     * 
     */
    create<T extends einheitCreateArgs>(args: SelectSubset<T, einheitCreateArgs<ExtArgs>>): Prisma__einheitClient<$Result.GetResult<Prisma.$einheitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Einheits.
     * @param {einheitCreateManyArgs} args - Arguments to create many Einheits.
     * @example
     * // Create many Einheits
     * const einheit = await prisma.einheit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends einheitCreateManyArgs>(args?: SelectSubset<T, einheitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Einheits and returns the data saved in the database.
     * @param {einheitCreateManyAndReturnArgs} args - Arguments to create many Einheits.
     * @example
     * // Create many Einheits
     * const einheit = await prisma.einheit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Einheits and only return the `ID`
     * const einheitWithIDOnly = await prisma.einheit.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends einheitCreateManyAndReturnArgs>(args?: SelectSubset<T, einheitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einheitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Einheit.
     * @param {einheitDeleteArgs} args - Arguments to delete one Einheit.
     * @example
     * // Delete one Einheit
     * const Einheit = await prisma.einheit.delete({
     *   where: {
     *     // ... filter to delete one Einheit
     *   }
     * })
     * 
     */
    delete<T extends einheitDeleteArgs>(args: SelectSubset<T, einheitDeleteArgs<ExtArgs>>): Prisma__einheitClient<$Result.GetResult<Prisma.$einheitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Einheit.
     * @param {einheitUpdateArgs} args - Arguments to update one Einheit.
     * @example
     * // Update one Einheit
     * const einheit = await prisma.einheit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends einheitUpdateArgs>(args: SelectSubset<T, einheitUpdateArgs<ExtArgs>>): Prisma__einheitClient<$Result.GetResult<Prisma.$einheitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Einheits.
     * @param {einheitDeleteManyArgs} args - Arguments to filter Einheits to delete.
     * @example
     * // Delete a few Einheits
     * const { count } = await prisma.einheit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends einheitDeleteManyArgs>(args?: SelectSubset<T, einheitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Einheits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einheitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Einheits
     * const einheit = await prisma.einheit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends einheitUpdateManyArgs>(args: SelectSubset<T, einheitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Einheits and returns the data updated in the database.
     * @param {einheitUpdateManyAndReturnArgs} args - Arguments to update many Einheits.
     * @example
     * // Update many Einheits
     * const einheit = await prisma.einheit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Einheits and only return the `ID`
     * const einheitWithIDOnly = await prisma.einheit.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends einheitUpdateManyAndReturnArgs>(args: SelectSubset<T, einheitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einheitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Einheit.
     * @param {einheitUpsertArgs} args - Arguments to update or create a Einheit.
     * @example
     * // Update or create a Einheit
     * const einheit = await prisma.einheit.upsert({
     *   create: {
     *     // ... data to create a Einheit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Einheit we want to update
     *   }
     * })
     */
    upsert<T extends einheitUpsertArgs>(args: SelectSubset<T, einheitUpsertArgs<ExtArgs>>): Prisma__einheitClient<$Result.GetResult<Prisma.$einheitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Einheits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einheitCountArgs} args - Arguments to filter Einheits to count.
     * @example
     * // Count the number of Einheits
     * const count = await prisma.einheit.count({
     *   where: {
     *     // ... the filter for the Einheits we want to count
     *   }
     * })
    **/
    count<T extends einheitCountArgs>(
      args?: Subset<T, einheitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EinheitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Einheit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EinheitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EinheitAggregateArgs>(args: Subset<T, EinheitAggregateArgs>): Prisma.PrismaPromise<GetEinheitAggregateType<T>>

    /**
     * Group by Einheit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einheitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends einheitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: einheitGroupByArgs['orderBy'] }
        : { orderBy?: einheitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, einheitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEinheitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the einheit model
   */
  readonly fields: einheitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for einheit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__einheitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    einteilung<T extends einheit$einteilungArgs<ExtArgs> = {}>(args?: Subset<T, einheit$einteilungArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the einheit model
   */
  interface einheitFieldRefs {
    readonly ID: FieldRef<"einheit", 'Int'>
    readonly Abkuerzung: FieldRef<"einheit", 'String'>
    readonly Beschreibung: FieldRef<"einheit", 'String'>
    readonly Erstellt_am: FieldRef<"einheit", 'DateTime'>
    readonly Geaendert_am: FieldRef<"einheit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * einheit findUnique
   */
  export type einheitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einheit
     */
    select?: einheitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einheit
     */
    omit?: einheitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einheitInclude<ExtArgs> | null
    /**
     * Filter, which einheit to fetch.
     */
    where: einheitWhereUniqueInput
  }

  /**
   * einheit findUniqueOrThrow
   */
  export type einheitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einheit
     */
    select?: einheitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einheit
     */
    omit?: einheitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einheitInclude<ExtArgs> | null
    /**
     * Filter, which einheit to fetch.
     */
    where: einheitWhereUniqueInput
  }

  /**
   * einheit findFirst
   */
  export type einheitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einheit
     */
    select?: einheitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einheit
     */
    omit?: einheitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einheitInclude<ExtArgs> | null
    /**
     * Filter, which einheit to fetch.
     */
    where?: einheitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of einheits to fetch.
     */
    orderBy?: einheitOrderByWithRelationInput | einheitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for einheits.
     */
    cursor?: einheitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` einheits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` einheits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of einheits.
     */
    distinct?: EinheitScalarFieldEnum | EinheitScalarFieldEnum[]
  }

  /**
   * einheit findFirstOrThrow
   */
  export type einheitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einheit
     */
    select?: einheitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einheit
     */
    omit?: einheitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einheitInclude<ExtArgs> | null
    /**
     * Filter, which einheit to fetch.
     */
    where?: einheitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of einheits to fetch.
     */
    orderBy?: einheitOrderByWithRelationInput | einheitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for einheits.
     */
    cursor?: einheitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` einheits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` einheits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of einheits.
     */
    distinct?: EinheitScalarFieldEnum | EinheitScalarFieldEnum[]
  }

  /**
   * einheit findMany
   */
  export type einheitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einheit
     */
    select?: einheitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einheit
     */
    omit?: einheitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einheitInclude<ExtArgs> | null
    /**
     * Filter, which einheits to fetch.
     */
    where?: einheitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of einheits to fetch.
     */
    orderBy?: einheitOrderByWithRelationInput | einheitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing einheits.
     */
    cursor?: einheitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` einheits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` einheits.
     */
    skip?: number
    distinct?: EinheitScalarFieldEnum | EinheitScalarFieldEnum[]
  }

  /**
   * einheit create
   */
  export type einheitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einheit
     */
    select?: einheitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einheit
     */
    omit?: einheitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einheitInclude<ExtArgs> | null
    /**
     * The data needed to create a einheit.
     */
    data?: XOR<einheitCreateInput, einheitUncheckedCreateInput>
  }

  /**
   * einheit createMany
   */
  export type einheitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many einheits.
     */
    data: einheitCreateManyInput | einheitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * einheit createManyAndReturn
   */
  export type einheitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einheit
     */
    select?: einheitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the einheit
     */
    omit?: einheitOmit<ExtArgs> | null
    /**
     * The data used to create many einheits.
     */
    data: einheitCreateManyInput | einheitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * einheit update
   */
  export type einheitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einheit
     */
    select?: einheitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einheit
     */
    omit?: einheitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einheitInclude<ExtArgs> | null
    /**
     * The data needed to update a einheit.
     */
    data: XOR<einheitUpdateInput, einheitUncheckedUpdateInput>
    /**
     * Choose, which einheit to update.
     */
    where: einheitWhereUniqueInput
  }

  /**
   * einheit updateMany
   */
  export type einheitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update einheits.
     */
    data: XOR<einheitUpdateManyMutationInput, einheitUncheckedUpdateManyInput>
    /**
     * Filter which einheits to update
     */
    where?: einheitWhereInput
    /**
     * Limit how many einheits to update.
     */
    limit?: number
  }

  /**
   * einheit updateManyAndReturn
   */
  export type einheitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einheit
     */
    select?: einheitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the einheit
     */
    omit?: einheitOmit<ExtArgs> | null
    /**
     * The data used to update einheits.
     */
    data: XOR<einheitUpdateManyMutationInput, einheitUncheckedUpdateManyInput>
    /**
     * Filter which einheits to update
     */
    where?: einheitWhereInput
    /**
     * Limit how many einheits to update.
     */
    limit?: number
  }

  /**
   * einheit upsert
   */
  export type einheitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einheit
     */
    select?: einheitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einheit
     */
    omit?: einheitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einheitInclude<ExtArgs> | null
    /**
     * The filter to search for the einheit to update in case it exists.
     */
    where: einheitWhereUniqueInput
    /**
     * In case the einheit found by the `where` argument doesn't exist, create a new einheit with this data.
     */
    create: XOR<einheitCreateInput, einheitUncheckedCreateInput>
    /**
     * In case the einheit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<einheitUpdateInput, einheitUncheckedUpdateInput>
  }

  /**
   * einheit delete
   */
  export type einheitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einheit
     */
    select?: einheitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einheit
     */
    omit?: einheitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einheitInclude<ExtArgs> | null
    /**
     * Filter which einheit to delete.
     */
    where: einheitWhereUniqueInput
  }

  /**
   * einheit deleteMany
   */
  export type einheitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which einheits to delete
     */
    where?: einheitWhereInput
    /**
     * Limit how many einheits to delete.
     */
    limit?: number
  }

  /**
   * einheit.einteilung
   */
  export type einheit$einteilungArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    where?: einteilungWhereInput
    orderBy?: einteilungOrderByWithRelationInput | einteilungOrderByWithRelationInput[]
    cursor?: einteilungWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EinteilungScalarFieldEnum | EinteilungScalarFieldEnum[]
  }

  /**
   * einheit without action
   */
  export type einheitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einheit
     */
    select?: einheitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einheit
     */
    omit?: einheitOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einheitInclude<ExtArgs> | null
  }


  /**
   * Model einsatz
   */

  export type AggregateEinsatz = {
    _count: EinsatzCountAggregateOutputType | null
    _avg: EinsatzAvgAggregateOutputType | null
    _sum: EinsatzSumAggregateOutputType | null
    _min: EinsatzMinAggregateOutputType | null
    _max: EinsatzMaxAggregateOutputType | null
  }

  export type EinsatzAvgAggregateOutputType = {
    ID: number | null
    Einsatznummer: number | null
  }

  export type EinsatzSumAggregateOutputType = {
    ID: number | null
    Einsatznummer: number | null
  }

  export type EinsatzMinAggregateOutputType = {
    ID: number | null
    Einsatznummer: number | null
    Datum_Anfang: Date | null
    Uhrzeit_Anfang: Date | null
    Datum_Ende: Date | null
    Uhrzeit_Ende: Date | null
    Beschreibung: string | null
    Strasse: string | null
    Hausnummer: string | null
    Postleitzahl: string | null
    Ort: string | null
    Art: $Enums.einsatz_art | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type EinsatzMaxAggregateOutputType = {
    ID: number | null
    Einsatznummer: number | null
    Datum_Anfang: Date | null
    Uhrzeit_Anfang: Date | null
    Datum_Ende: Date | null
    Uhrzeit_Ende: Date | null
    Beschreibung: string | null
    Strasse: string | null
    Hausnummer: string | null
    Postleitzahl: string | null
    Ort: string | null
    Art: $Enums.einsatz_art | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type EinsatzCountAggregateOutputType = {
    ID: number
    Einsatznummer: number
    Datum_Anfang: number
    Uhrzeit_Anfang: number
    Datum_Ende: number
    Uhrzeit_Ende: number
    Beschreibung: number
    Strasse: number
    Hausnummer: number
    Postleitzahl: number
    Ort: number
    Art: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type EinsatzAvgAggregateInputType = {
    ID?: true
    Einsatznummer?: true
  }

  export type EinsatzSumAggregateInputType = {
    ID?: true
    Einsatznummer?: true
  }

  export type EinsatzMinAggregateInputType = {
    ID?: true
    Einsatznummer?: true
    Datum_Anfang?: true
    Uhrzeit_Anfang?: true
    Datum_Ende?: true
    Uhrzeit_Ende?: true
    Beschreibung?: true
    Strasse?: true
    Hausnummer?: true
    Postleitzahl?: true
    Ort?: true
    Art?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type EinsatzMaxAggregateInputType = {
    ID?: true
    Einsatznummer?: true
    Datum_Anfang?: true
    Uhrzeit_Anfang?: true
    Datum_Ende?: true
    Uhrzeit_Ende?: true
    Beschreibung?: true
    Strasse?: true
    Hausnummer?: true
    Postleitzahl?: true
    Ort?: true
    Art?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type EinsatzCountAggregateInputType = {
    ID?: true
    Einsatznummer?: true
    Datum_Anfang?: true
    Uhrzeit_Anfang?: true
    Datum_Ende?: true
    Uhrzeit_Ende?: true
    Beschreibung?: true
    Strasse?: true
    Hausnummer?: true
    Postleitzahl?: true
    Ort?: true
    Art?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type EinsatzAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which einsatz to aggregate.
     */
    where?: einsatzWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of einsatzs to fetch.
     */
    orderBy?: einsatzOrderByWithRelationInput | einsatzOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: einsatzWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` einsatzs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` einsatzs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned einsatzs
    **/
    _count?: true | EinsatzCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EinsatzAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EinsatzSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EinsatzMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EinsatzMaxAggregateInputType
  }

  export type GetEinsatzAggregateType<T extends EinsatzAggregateArgs> = {
        [P in keyof T & keyof AggregateEinsatz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEinsatz[P]>
      : GetScalarType<T[P], AggregateEinsatz[P]>
  }




  export type einsatzGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: einsatzWhereInput
    orderBy?: einsatzOrderByWithAggregationInput | einsatzOrderByWithAggregationInput[]
    by: EinsatzScalarFieldEnum[] | EinsatzScalarFieldEnum
    having?: einsatzScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EinsatzCountAggregateInputType | true
    _avg?: EinsatzAvgAggregateInputType
    _sum?: EinsatzSumAggregateInputType
    _min?: EinsatzMinAggregateInputType
    _max?: EinsatzMaxAggregateInputType
  }

  export type EinsatzGroupByOutputType = {
    ID: number
    Einsatznummer: number
    Datum_Anfang: Date
    Uhrzeit_Anfang: Date
    Datum_Ende: Date | null
    Uhrzeit_Ende: Date | null
    Beschreibung: string | null
    Strasse: string | null
    Hausnummer: string | null
    Postleitzahl: string | null
    Ort: string | null
    Art: $Enums.einsatz_art
    Erstellt_am: Date | null
    Geaendert_am: Date | null
    _count: EinsatzCountAggregateOutputType | null
    _avg: EinsatzAvgAggregateOutputType | null
    _sum: EinsatzSumAggregateOutputType | null
    _min: EinsatzMinAggregateOutputType | null
    _max: EinsatzMaxAggregateOutputType | null
  }

  type GetEinsatzGroupByPayload<T extends einsatzGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EinsatzGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EinsatzGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EinsatzGroupByOutputType[P]>
            : GetScalarType<T[P], EinsatzGroupByOutputType[P]>
        }
      >
    >


  export type einsatzSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Einsatznummer?: boolean
    Datum_Anfang?: boolean
    Uhrzeit_Anfang?: boolean
    Datum_Ende?: boolean
    Uhrzeit_Ende?: boolean
    Beschreibung?: boolean
    Strasse?: boolean
    Hausnummer?: boolean
    Postleitzahl?: boolean
    Ort?: boolean
    Art?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    einteilung?: boolean | einsatz$einteilungArgs<ExtArgs>
    _count?: boolean | EinsatzCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["einsatz"]>

  export type einsatzSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Einsatznummer?: boolean
    Datum_Anfang?: boolean
    Uhrzeit_Anfang?: boolean
    Datum_Ende?: boolean
    Uhrzeit_Ende?: boolean
    Beschreibung?: boolean
    Strasse?: boolean
    Hausnummer?: boolean
    Postleitzahl?: boolean
    Ort?: boolean
    Art?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["einsatz"]>

  export type einsatzSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Einsatznummer?: boolean
    Datum_Anfang?: boolean
    Uhrzeit_Anfang?: boolean
    Datum_Ende?: boolean
    Uhrzeit_Ende?: boolean
    Beschreibung?: boolean
    Strasse?: boolean
    Hausnummer?: boolean
    Postleitzahl?: boolean
    Ort?: boolean
    Art?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["einsatz"]>

  export type einsatzSelectScalar = {
    ID?: boolean
    Einsatznummer?: boolean
    Datum_Anfang?: boolean
    Uhrzeit_Anfang?: boolean
    Datum_Ende?: boolean
    Uhrzeit_Ende?: boolean
    Beschreibung?: boolean
    Strasse?: boolean
    Hausnummer?: boolean
    Postleitzahl?: boolean
    Ort?: boolean
    Art?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type einsatzOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Einsatznummer" | "Datum_Anfang" | "Uhrzeit_Anfang" | "Datum_Ende" | "Uhrzeit_Ende" | "Beschreibung" | "Strasse" | "Hausnummer" | "Postleitzahl" | "Ort" | "Art" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["einsatz"]>
  export type einsatzInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    einteilung?: boolean | einsatz$einteilungArgs<ExtArgs>
    _count?: boolean | EinsatzCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type einsatzIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type einsatzIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $einsatzPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "einsatz"
    objects: {
      einteilung: Prisma.$einteilungPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Einsatznummer: number
      Datum_Anfang: Date
      Uhrzeit_Anfang: Date
      Datum_Ende: Date | null
      Uhrzeit_Ende: Date | null
      Beschreibung: string | null
      Strasse: string | null
      Hausnummer: string | null
      Postleitzahl: string | null
      Ort: string | null
      Art: $Enums.einsatz_art
      Erstellt_am: Date | null
      Geaendert_am: Date | null
    }, ExtArgs["result"]["einsatz"]>
    composites: {}
  }

  type einsatzGetPayload<S extends boolean | null | undefined | einsatzDefaultArgs> = $Result.GetResult<Prisma.$einsatzPayload, S>

  type einsatzCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<einsatzFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EinsatzCountAggregateInputType | true
    }

  export interface einsatzDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['einsatz'], meta: { name: 'einsatz' } }
    /**
     * Find zero or one Einsatz that matches the filter.
     * @param {einsatzFindUniqueArgs} args - Arguments to find a Einsatz
     * @example
     * // Get one Einsatz
     * const einsatz = await prisma.einsatz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends einsatzFindUniqueArgs>(args: SelectSubset<T, einsatzFindUniqueArgs<ExtArgs>>): Prisma__einsatzClient<$Result.GetResult<Prisma.$einsatzPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Einsatz that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {einsatzFindUniqueOrThrowArgs} args - Arguments to find a Einsatz
     * @example
     * // Get one Einsatz
     * const einsatz = await prisma.einsatz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends einsatzFindUniqueOrThrowArgs>(args: SelectSubset<T, einsatzFindUniqueOrThrowArgs<ExtArgs>>): Prisma__einsatzClient<$Result.GetResult<Prisma.$einsatzPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Einsatz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einsatzFindFirstArgs} args - Arguments to find a Einsatz
     * @example
     * // Get one Einsatz
     * const einsatz = await prisma.einsatz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends einsatzFindFirstArgs>(args?: SelectSubset<T, einsatzFindFirstArgs<ExtArgs>>): Prisma__einsatzClient<$Result.GetResult<Prisma.$einsatzPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Einsatz that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einsatzFindFirstOrThrowArgs} args - Arguments to find a Einsatz
     * @example
     * // Get one Einsatz
     * const einsatz = await prisma.einsatz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends einsatzFindFirstOrThrowArgs>(args?: SelectSubset<T, einsatzFindFirstOrThrowArgs<ExtArgs>>): Prisma__einsatzClient<$Result.GetResult<Prisma.$einsatzPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Einsatzs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einsatzFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Einsatzs
     * const einsatzs = await prisma.einsatz.findMany()
     * 
     * // Get first 10 Einsatzs
     * const einsatzs = await prisma.einsatz.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const einsatzWithIDOnly = await prisma.einsatz.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends einsatzFindManyArgs>(args?: SelectSubset<T, einsatzFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einsatzPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Einsatz.
     * @param {einsatzCreateArgs} args - Arguments to create a Einsatz.
     * @example
     * // Create one Einsatz
     * const Einsatz = await prisma.einsatz.create({
     *   data: {
     *     // ... data to create a Einsatz
     *   }
     * })
     * 
     */
    create<T extends einsatzCreateArgs>(args: SelectSubset<T, einsatzCreateArgs<ExtArgs>>): Prisma__einsatzClient<$Result.GetResult<Prisma.$einsatzPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Einsatzs.
     * @param {einsatzCreateManyArgs} args - Arguments to create many Einsatzs.
     * @example
     * // Create many Einsatzs
     * const einsatz = await prisma.einsatz.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends einsatzCreateManyArgs>(args?: SelectSubset<T, einsatzCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Einsatzs and returns the data saved in the database.
     * @param {einsatzCreateManyAndReturnArgs} args - Arguments to create many Einsatzs.
     * @example
     * // Create many Einsatzs
     * const einsatz = await prisma.einsatz.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Einsatzs and only return the `ID`
     * const einsatzWithIDOnly = await prisma.einsatz.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends einsatzCreateManyAndReturnArgs>(args?: SelectSubset<T, einsatzCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einsatzPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Einsatz.
     * @param {einsatzDeleteArgs} args - Arguments to delete one Einsatz.
     * @example
     * // Delete one Einsatz
     * const Einsatz = await prisma.einsatz.delete({
     *   where: {
     *     // ... filter to delete one Einsatz
     *   }
     * })
     * 
     */
    delete<T extends einsatzDeleteArgs>(args: SelectSubset<T, einsatzDeleteArgs<ExtArgs>>): Prisma__einsatzClient<$Result.GetResult<Prisma.$einsatzPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Einsatz.
     * @param {einsatzUpdateArgs} args - Arguments to update one Einsatz.
     * @example
     * // Update one Einsatz
     * const einsatz = await prisma.einsatz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends einsatzUpdateArgs>(args: SelectSubset<T, einsatzUpdateArgs<ExtArgs>>): Prisma__einsatzClient<$Result.GetResult<Prisma.$einsatzPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Einsatzs.
     * @param {einsatzDeleteManyArgs} args - Arguments to filter Einsatzs to delete.
     * @example
     * // Delete a few Einsatzs
     * const { count } = await prisma.einsatz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends einsatzDeleteManyArgs>(args?: SelectSubset<T, einsatzDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Einsatzs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einsatzUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Einsatzs
     * const einsatz = await prisma.einsatz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends einsatzUpdateManyArgs>(args: SelectSubset<T, einsatzUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Einsatzs and returns the data updated in the database.
     * @param {einsatzUpdateManyAndReturnArgs} args - Arguments to update many Einsatzs.
     * @example
     * // Update many Einsatzs
     * const einsatz = await prisma.einsatz.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Einsatzs and only return the `ID`
     * const einsatzWithIDOnly = await prisma.einsatz.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends einsatzUpdateManyAndReturnArgs>(args: SelectSubset<T, einsatzUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einsatzPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Einsatz.
     * @param {einsatzUpsertArgs} args - Arguments to update or create a Einsatz.
     * @example
     * // Update or create a Einsatz
     * const einsatz = await prisma.einsatz.upsert({
     *   create: {
     *     // ... data to create a Einsatz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Einsatz we want to update
     *   }
     * })
     */
    upsert<T extends einsatzUpsertArgs>(args: SelectSubset<T, einsatzUpsertArgs<ExtArgs>>): Prisma__einsatzClient<$Result.GetResult<Prisma.$einsatzPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Einsatzs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einsatzCountArgs} args - Arguments to filter Einsatzs to count.
     * @example
     * // Count the number of Einsatzs
     * const count = await prisma.einsatz.count({
     *   where: {
     *     // ... the filter for the Einsatzs we want to count
     *   }
     * })
    **/
    count<T extends einsatzCountArgs>(
      args?: Subset<T, einsatzCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EinsatzCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Einsatz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EinsatzAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EinsatzAggregateArgs>(args: Subset<T, EinsatzAggregateArgs>): Prisma.PrismaPromise<GetEinsatzAggregateType<T>>

    /**
     * Group by Einsatz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einsatzGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends einsatzGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: einsatzGroupByArgs['orderBy'] }
        : { orderBy?: einsatzGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, einsatzGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEinsatzGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the einsatz model
   */
  readonly fields: einsatzFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for einsatz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__einsatzClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    einteilung<T extends einsatz$einteilungArgs<ExtArgs> = {}>(args?: Subset<T, einsatz$einteilungArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the einsatz model
   */
  interface einsatzFieldRefs {
    readonly ID: FieldRef<"einsatz", 'Int'>
    readonly Einsatznummer: FieldRef<"einsatz", 'Int'>
    readonly Datum_Anfang: FieldRef<"einsatz", 'DateTime'>
    readonly Uhrzeit_Anfang: FieldRef<"einsatz", 'DateTime'>
    readonly Datum_Ende: FieldRef<"einsatz", 'DateTime'>
    readonly Uhrzeit_Ende: FieldRef<"einsatz", 'DateTime'>
    readonly Beschreibung: FieldRef<"einsatz", 'String'>
    readonly Strasse: FieldRef<"einsatz", 'String'>
    readonly Hausnummer: FieldRef<"einsatz", 'String'>
    readonly Postleitzahl: FieldRef<"einsatz", 'String'>
    readonly Ort: FieldRef<"einsatz", 'String'>
    readonly Art: FieldRef<"einsatz", 'einsatz_art'>
    readonly Erstellt_am: FieldRef<"einsatz", 'DateTime'>
    readonly Geaendert_am: FieldRef<"einsatz", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * einsatz findUnique
   */
  export type einsatzFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einsatz
     */
    select?: einsatzSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einsatz
     */
    omit?: einsatzOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einsatzInclude<ExtArgs> | null
    /**
     * Filter, which einsatz to fetch.
     */
    where: einsatzWhereUniqueInput
  }

  /**
   * einsatz findUniqueOrThrow
   */
  export type einsatzFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einsatz
     */
    select?: einsatzSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einsatz
     */
    omit?: einsatzOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einsatzInclude<ExtArgs> | null
    /**
     * Filter, which einsatz to fetch.
     */
    where: einsatzWhereUniqueInput
  }

  /**
   * einsatz findFirst
   */
  export type einsatzFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einsatz
     */
    select?: einsatzSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einsatz
     */
    omit?: einsatzOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einsatzInclude<ExtArgs> | null
    /**
     * Filter, which einsatz to fetch.
     */
    where?: einsatzWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of einsatzs to fetch.
     */
    orderBy?: einsatzOrderByWithRelationInput | einsatzOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for einsatzs.
     */
    cursor?: einsatzWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` einsatzs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` einsatzs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of einsatzs.
     */
    distinct?: EinsatzScalarFieldEnum | EinsatzScalarFieldEnum[]
  }

  /**
   * einsatz findFirstOrThrow
   */
  export type einsatzFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einsatz
     */
    select?: einsatzSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einsatz
     */
    omit?: einsatzOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einsatzInclude<ExtArgs> | null
    /**
     * Filter, which einsatz to fetch.
     */
    where?: einsatzWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of einsatzs to fetch.
     */
    orderBy?: einsatzOrderByWithRelationInput | einsatzOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for einsatzs.
     */
    cursor?: einsatzWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` einsatzs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` einsatzs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of einsatzs.
     */
    distinct?: EinsatzScalarFieldEnum | EinsatzScalarFieldEnum[]
  }

  /**
   * einsatz findMany
   */
  export type einsatzFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einsatz
     */
    select?: einsatzSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einsatz
     */
    omit?: einsatzOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einsatzInclude<ExtArgs> | null
    /**
     * Filter, which einsatzs to fetch.
     */
    where?: einsatzWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of einsatzs to fetch.
     */
    orderBy?: einsatzOrderByWithRelationInput | einsatzOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing einsatzs.
     */
    cursor?: einsatzWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` einsatzs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` einsatzs.
     */
    skip?: number
    distinct?: EinsatzScalarFieldEnum | EinsatzScalarFieldEnum[]
  }

  /**
   * einsatz create
   */
  export type einsatzCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einsatz
     */
    select?: einsatzSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einsatz
     */
    omit?: einsatzOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einsatzInclude<ExtArgs> | null
    /**
     * The data needed to create a einsatz.
     */
    data: XOR<einsatzCreateInput, einsatzUncheckedCreateInput>
  }

  /**
   * einsatz createMany
   */
  export type einsatzCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many einsatzs.
     */
    data: einsatzCreateManyInput | einsatzCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * einsatz createManyAndReturn
   */
  export type einsatzCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einsatz
     */
    select?: einsatzSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the einsatz
     */
    omit?: einsatzOmit<ExtArgs> | null
    /**
     * The data used to create many einsatzs.
     */
    data: einsatzCreateManyInput | einsatzCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * einsatz update
   */
  export type einsatzUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einsatz
     */
    select?: einsatzSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einsatz
     */
    omit?: einsatzOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einsatzInclude<ExtArgs> | null
    /**
     * The data needed to update a einsatz.
     */
    data: XOR<einsatzUpdateInput, einsatzUncheckedUpdateInput>
    /**
     * Choose, which einsatz to update.
     */
    where: einsatzWhereUniqueInput
  }

  /**
   * einsatz updateMany
   */
  export type einsatzUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update einsatzs.
     */
    data: XOR<einsatzUpdateManyMutationInput, einsatzUncheckedUpdateManyInput>
    /**
     * Filter which einsatzs to update
     */
    where?: einsatzWhereInput
    /**
     * Limit how many einsatzs to update.
     */
    limit?: number
  }

  /**
   * einsatz updateManyAndReturn
   */
  export type einsatzUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einsatz
     */
    select?: einsatzSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the einsatz
     */
    omit?: einsatzOmit<ExtArgs> | null
    /**
     * The data used to update einsatzs.
     */
    data: XOR<einsatzUpdateManyMutationInput, einsatzUncheckedUpdateManyInput>
    /**
     * Filter which einsatzs to update
     */
    where?: einsatzWhereInput
    /**
     * Limit how many einsatzs to update.
     */
    limit?: number
  }

  /**
   * einsatz upsert
   */
  export type einsatzUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einsatz
     */
    select?: einsatzSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einsatz
     */
    omit?: einsatzOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einsatzInclude<ExtArgs> | null
    /**
     * The filter to search for the einsatz to update in case it exists.
     */
    where: einsatzWhereUniqueInput
    /**
     * In case the einsatz found by the `where` argument doesn't exist, create a new einsatz with this data.
     */
    create: XOR<einsatzCreateInput, einsatzUncheckedCreateInput>
    /**
     * In case the einsatz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<einsatzUpdateInput, einsatzUncheckedUpdateInput>
  }

  /**
   * einsatz delete
   */
  export type einsatzDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einsatz
     */
    select?: einsatzSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einsatz
     */
    omit?: einsatzOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einsatzInclude<ExtArgs> | null
    /**
     * Filter which einsatz to delete.
     */
    where: einsatzWhereUniqueInput
  }

  /**
   * einsatz deleteMany
   */
  export type einsatzDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which einsatzs to delete
     */
    where?: einsatzWhereInput
    /**
     * Limit how many einsatzs to delete.
     */
    limit?: number
  }

  /**
   * einsatz.einteilung
   */
  export type einsatz$einteilungArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    where?: einteilungWhereInput
    orderBy?: einteilungOrderByWithRelationInput | einteilungOrderByWithRelationInput[]
    cursor?: einteilungWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EinteilungScalarFieldEnum | EinteilungScalarFieldEnum[]
  }

  /**
   * einsatz without action
   */
  export type einsatzDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einsatz
     */
    select?: einsatzSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einsatz
     */
    omit?: einsatzOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einsatzInclude<ExtArgs> | null
  }


  /**
   * Model einteilung
   */

  export type AggregateEinteilung = {
    _count: EinteilungCountAggregateOutputType | null
    _avg: EinteilungAvgAggregateOutputType | null
    _sum: EinteilungSumAggregateOutputType | null
    _min: EinteilungMinAggregateOutputType | null
    _max: EinteilungMaxAggregateOutputType | null
  }

  export type EinteilungAvgAggregateOutputType = {
    ID: number | null
    Einsatz_ID: number | null
    Dienstabend_ID: number | null
    Fahrzeug_ID: number | null
    FF_Mitglied_ID: number | null
    Einheit_ID: number | null
  }

  export type EinteilungSumAggregateOutputType = {
    ID: number | null
    Einsatz_ID: number | null
    Dienstabend_ID: number | null
    Fahrzeug_ID: number | null
    FF_Mitglied_ID: number | null
    Einheit_ID: number | null
  }

  export type EinteilungMinAggregateOutputType = {
    ID: number | null
    Einsatz_ID: number | null
    Dienstabend_ID: number | null
    Fahrzeug_ID: number | null
    FF_Mitglied_ID: number | null
    Einheit_ID: number | null
  }

  export type EinteilungMaxAggregateOutputType = {
    ID: number | null
    Einsatz_ID: number | null
    Dienstabend_ID: number | null
    Fahrzeug_ID: number | null
    FF_Mitglied_ID: number | null
    Einheit_ID: number | null
  }

  export type EinteilungCountAggregateOutputType = {
    ID: number
    Einsatz_ID: number
    Dienstabend_ID: number
    Fahrzeug_ID: number
    FF_Mitglied_ID: number
    Einheit_ID: number
    _all: number
  }


  export type EinteilungAvgAggregateInputType = {
    ID?: true
    Einsatz_ID?: true
    Dienstabend_ID?: true
    Fahrzeug_ID?: true
    FF_Mitglied_ID?: true
    Einheit_ID?: true
  }

  export type EinteilungSumAggregateInputType = {
    ID?: true
    Einsatz_ID?: true
    Dienstabend_ID?: true
    Fahrzeug_ID?: true
    FF_Mitglied_ID?: true
    Einheit_ID?: true
  }

  export type EinteilungMinAggregateInputType = {
    ID?: true
    Einsatz_ID?: true
    Dienstabend_ID?: true
    Fahrzeug_ID?: true
    FF_Mitglied_ID?: true
    Einheit_ID?: true
  }

  export type EinteilungMaxAggregateInputType = {
    ID?: true
    Einsatz_ID?: true
    Dienstabend_ID?: true
    Fahrzeug_ID?: true
    FF_Mitglied_ID?: true
    Einheit_ID?: true
  }

  export type EinteilungCountAggregateInputType = {
    ID?: true
    Einsatz_ID?: true
    Dienstabend_ID?: true
    Fahrzeug_ID?: true
    FF_Mitglied_ID?: true
    Einheit_ID?: true
    _all?: true
  }

  export type EinteilungAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which einteilung to aggregate.
     */
    where?: einteilungWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of einteilungs to fetch.
     */
    orderBy?: einteilungOrderByWithRelationInput | einteilungOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: einteilungWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` einteilungs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` einteilungs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned einteilungs
    **/
    _count?: true | EinteilungCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EinteilungAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EinteilungSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EinteilungMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EinteilungMaxAggregateInputType
  }

  export type GetEinteilungAggregateType<T extends EinteilungAggregateArgs> = {
        [P in keyof T & keyof AggregateEinteilung]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEinteilung[P]>
      : GetScalarType<T[P], AggregateEinteilung[P]>
  }




  export type einteilungGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: einteilungWhereInput
    orderBy?: einteilungOrderByWithAggregationInput | einteilungOrderByWithAggregationInput[]
    by: EinteilungScalarFieldEnum[] | EinteilungScalarFieldEnum
    having?: einteilungScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EinteilungCountAggregateInputType | true
    _avg?: EinteilungAvgAggregateInputType
    _sum?: EinteilungSumAggregateInputType
    _min?: EinteilungMinAggregateInputType
    _max?: EinteilungMaxAggregateInputType
  }

  export type EinteilungGroupByOutputType = {
    ID: number
    Einsatz_ID: number
    Dienstabend_ID: number
    Fahrzeug_ID: number
    FF_Mitglied_ID: number
    Einheit_ID: number
    _count: EinteilungCountAggregateOutputType | null
    _avg: EinteilungAvgAggregateOutputType | null
    _sum: EinteilungSumAggregateOutputType | null
    _min: EinteilungMinAggregateOutputType | null
    _max: EinteilungMaxAggregateOutputType | null
  }

  type GetEinteilungGroupByPayload<T extends einteilungGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EinteilungGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EinteilungGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EinteilungGroupByOutputType[P]>
            : GetScalarType<T[P], EinteilungGroupByOutputType[P]>
        }
      >
    >


  export type einteilungSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Einsatz_ID?: boolean
    Dienstabend_ID?: boolean
    Fahrzeug_ID?: boolean
    FF_Mitglied_ID?: boolean
    Einheit_ID?: boolean
    dienstabend?: boolean | dienstabendDefaultArgs<ExtArgs>
    einheit?: boolean | einheitDefaultArgs<ExtArgs>
    einsatz?: boolean | einsatzDefaultArgs<ExtArgs>
    fahrzeug?: boolean | fahrzeugDefaultArgs<ExtArgs>
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["einteilung"]>

  export type einteilungSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Einsatz_ID?: boolean
    Dienstabend_ID?: boolean
    Fahrzeug_ID?: boolean
    FF_Mitglied_ID?: boolean
    Einheit_ID?: boolean
    dienstabend?: boolean | dienstabendDefaultArgs<ExtArgs>
    einheit?: boolean | einheitDefaultArgs<ExtArgs>
    einsatz?: boolean | einsatzDefaultArgs<ExtArgs>
    fahrzeug?: boolean | fahrzeugDefaultArgs<ExtArgs>
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["einteilung"]>

  export type einteilungSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Einsatz_ID?: boolean
    Dienstabend_ID?: boolean
    Fahrzeug_ID?: boolean
    FF_Mitglied_ID?: boolean
    Einheit_ID?: boolean
    dienstabend?: boolean | dienstabendDefaultArgs<ExtArgs>
    einheit?: boolean | einheitDefaultArgs<ExtArgs>
    einsatz?: boolean | einsatzDefaultArgs<ExtArgs>
    fahrzeug?: boolean | fahrzeugDefaultArgs<ExtArgs>
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["einteilung"]>

  export type einteilungSelectScalar = {
    ID?: boolean
    Einsatz_ID?: boolean
    Dienstabend_ID?: boolean
    Fahrzeug_ID?: boolean
    FF_Mitglied_ID?: boolean
    Einheit_ID?: boolean
  }

  export type einteilungOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Einsatz_ID" | "Dienstabend_ID" | "Fahrzeug_ID" | "FF_Mitglied_ID" | "Einheit_ID", ExtArgs["result"]["einteilung"]>
  export type einteilungInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dienstabend?: boolean | dienstabendDefaultArgs<ExtArgs>
    einheit?: boolean | einheitDefaultArgs<ExtArgs>
    einsatz?: boolean | einsatzDefaultArgs<ExtArgs>
    fahrzeug?: boolean | fahrzeugDefaultArgs<ExtArgs>
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
  }
  export type einteilungIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dienstabend?: boolean | dienstabendDefaultArgs<ExtArgs>
    einheit?: boolean | einheitDefaultArgs<ExtArgs>
    einsatz?: boolean | einsatzDefaultArgs<ExtArgs>
    fahrzeug?: boolean | fahrzeugDefaultArgs<ExtArgs>
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
  }
  export type einteilungIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dienstabend?: boolean | dienstabendDefaultArgs<ExtArgs>
    einheit?: boolean | einheitDefaultArgs<ExtArgs>
    einsatz?: boolean | einsatzDefaultArgs<ExtArgs>
    fahrzeug?: boolean | fahrzeugDefaultArgs<ExtArgs>
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
  }

  export type $einteilungPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "einteilung"
    objects: {
      dienstabend: Prisma.$dienstabendPayload<ExtArgs>
      einheit: Prisma.$einheitPayload<ExtArgs>
      einsatz: Prisma.$einsatzPayload<ExtArgs>
      fahrzeug: Prisma.$fahrzeugPayload<ExtArgs>
      ff_mitglied: Prisma.$ff_mitgliedPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Einsatz_ID: number
      Dienstabend_ID: number
      Fahrzeug_ID: number
      FF_Mitglied_ID: number
      Einheit_ID: number
    }, ExtArgs["result"]["einteilung"]>
    composites: {}
  }

  type einteilungGetPayload<S extends boolean | null | undefined | einteilungDefaultArgs> = $Result.GetResult<Prisma.$einteilungPayload, S>

  type einteilungCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<einteilungFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EinteilungCountAggregateInputType | true
    }

  export interface einteilungDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['einteilung'], meta: { name: 'einteilung' } }
    /**
     * Find zero or one Einteilung that matches the filter.
     * @param {einteilungFindUniqueArgs} args - Arguments to find a Einteilung
     * @example
     * // Get one Einteilung
     * const einteilung = await prisma.einteilung.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends einteilungFindUniqueArgs>(args: SelectSubset<T, einteilungFindUniqueArgs<ExtArgs>>): Prisma__einteilungClient<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Einteilung that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {einteilungFindUniqueOrThrowArgs} args - Arguments to find a Einteilung
     * @example
     * // Get one Einteilung
     * const einteilung = await prisma.einteilung.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends einteilungFindUniqueOrThrowArgs>(args: SelectSubset<T, einteilungFindUniqueOrThrowArgs<ExtArgs>>): Prisma__einteilungClient<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Einteilung that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einteilungFindFirstArgs} args - Arguments to find a Einteilung
     * @example
     * // Get one Einteilung
     * const einteilung = await prisma.einteilung.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends einteilungFindFirstArgs>(args?: SelectSubset<T, einteilungFindFirstArgs<ExtArgs>>): Prisma__einteilungClient<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Einteilung that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einteilungFindFirstOrThrowArgs} args - Arguments to find a Einteilung
     * @example
     * // Get one Einteilung
     * const einteilung = await prisma.einteilung.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends einteilungFindFirstOrThrowArgs>(args?: SelectSubset<T, einteilungFindFirstOrThrowArgs<ExtArgs>>): Prisma__einteilungClient<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Einteilungs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einteilungFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Einteilungs
     * const einteilungs = await prisma.einteilung.findMany()
     * 
     * // Get first 10 Einteilungs
     * const einteilungs = await prisma.einteilung.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const einteilungWithIDOnly = await prisma.einteilung.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends einteilungFindManyArgs>(args?: SelectSubset<T, einteilungFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Einteilung.
     * @param {einteilungCreateArgs} args - Arguments to create a Einteilung.
     * @example
     * // Create one Einteilung
     * const Einteilung = await prisma.einteilung.create({
     *   data: {
     *     // ... data to create a Einteilung
     *   }
     * })
     * 
     */
    create<T extends einteilungCreateArgs>(args: SelectSubset<T, einteilungCreateArgs<ExtArgs>>): Prisma__einteilungClient<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Einteilungs.
     * @param {einteilungCreateManyArgs} args - Arguments to create many Einteilungs.
     * @example
     * // Create many Einteilungs
     * const einteilung = await prisma.einteilung.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends einteilungCreateManyArgs>(args?: SelectSubset<T, einteilungCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Einteilungs and returns the data saved in the database.
     * @param {einteilungCreateManyAndReturnArgs} args - Arguments to create many Einteilungs.
     * @example
     * // Create many Einteilungs
     * const einteilung = await prisma.einteilung.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Einteilungs and only return the `ID`
     * const einteilungWithIDOnly = await prisma.einteilung.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends einteilungCreateManyAndReturnArgs>(args?: SelectSubset<T, einteilungCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Einteilung.
     * @param {einteilungDeleteArgs} args - Arguments to delete one Einteilung.
     * @example
     * // Delete one Einteilung
     * const Einteilung = await prisma.einteilung.delete({
     *   where: {
     *     // ... filter to delete one Einteilung
     *   }
     * })
     * 
     */
    delete<T extends einteilungDeleteArgs>(args: SelectSubset<T, einteilungDeleteArgs<ExtArgs>>): Prisma__einteilungClient<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Einteilung.
     * @param {einteilungUpdateArgs} args - Arguments to update one Einteilung.
     * @example
     * // Update one Einteilung
     * const einteilung = await prisma.einteilung.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends einteilungUpdateArgs>(args: SelectSubset<T, einteilungUpdateArgs<ExtArgs>>): Prisma__einteilungClient<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Einteilungs.
     * @param {einteilungDeleteManyArgs} args - Arguments to filter Einteilungs to delete.
     * @example
     * // Delete a few Einteilungs
     * const { count } = await prisma.einteilung.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends einteilungDeleteManyArgs>(args?: SelectSubset<T, einteilungDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Einteilungs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einteilungUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Einteilungs
     * const einteilung = await prisma.einteilung.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends einteilungUpdateManyArgs>(args: SelectSubset<T, einteilungUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Einteilungs and returns the data updated in the database.
     * @param {einteilungUpdateManyAndReturnArgs} args - Arguments to update many Einteilungs.
     * @example
     * // Update many Einteilungs
     * const einteilung = await prisma.einteilung.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Einteilungs and only return the `ID`
     * const einteilungWithIDOnly = await prisma.einteilung.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends einteilungUpdateManyAndReturnArgs>(args: SelectSubset<T, einteilungUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Einteilung.
     * @param {einteilungUpsertArgs} args - Arguments to update or create a Einteilung.
     * @example
     * // Update or create a Einteilung
     * const einteilung = await prisma.einteilung.upsert({
     *   create: {
     *     // ... data to create a Einteilung
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Einteilung we want to update
     *   }
     * })
     */
    upsert<T extends einteilungUpsertArgs>(args: SelectSubset<T, einteilungUpsertArgs<ExtArgs>>): Prisma__einteilungClient<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Einteilungs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einteilungCountArgs} args - Arguments to filter Einteilungs to count.
     * @example
     * // Count the number of Einteilungs
     * const count = await prisma.einteilung.count({
     *   where: {
     *     // ... the filter for the Einteilungs we want to count
     *   }
     * })
    **/
    count<T extends einteilungCountArgs>(
      args?: Subset<T, einteilungCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EinteilungCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Einteilung.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EinteilungAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EinteilungAggregateArgs>(args: Subset<T, EinteilungAggregateArgs>): Prisma.PrismaPromise<GetEinteilungAggregateType<T>>

    /**
     * Group by Einteilung.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {einteilungGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends einteilungGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: einteilungGroupByArgs['orderBy'] }
        : { orderBy?: einteilungGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, einteilungGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEinteilungGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the einteilung model
   */
  readonly fields: einteilungFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for einteilung.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__einteilungClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dienstabend<T extends dienstabendDefaultArgs<ExtArgs> = {}>(args?: Subset<T, dienstabendDefaultArgs<ExtArgs>>): Prisma__dienstabendClient<$Result.GetResult<Prisma.$dienstabendPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    einheit<T extends einheitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, einheitDefaultArgs<ExtArgs>>): Prisma__einheitClient<$Result.GetResult<Prisma.$einheitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    einsatz<T extends einsatzDefaultArgs<ExtArgs> = {}>(args?: Subset<T, einsatzDefaultArgs<ExtArgs>>): Prisma__einsatzClient<$Result.GetResult<Prisma.$einsatzPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    fahrzeug<T extends fahrzeugDefaultArgs<ExtArgs> = {}>(args?: Subset<T, fahrzeugDefaultArgs<ExtArgs>>): Prisma__fahrzeugClient<$Result.GetResult<Prisma.$fahrzeugPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ff_mitglied<T extends ff_mitgliedDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ff_mitgliedDefaultArgs<ExtArgs>>): Prisma__ff_mitgliedClient<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the einteilung model
   */
  interface einteilungFieldRefs {
    readonly ID: FieldRef<"einteilung", 'Int'>
    readonly Einsatz_ID: FieldRef<"einteilung", 'Int'>
    readonly Dienstabend_ID: FieldRef<"einteilung", 'Int'>
    readonly Fahrzeug_ID: FieldRef<"einteilung", 'Int'>
    readonly FF_Mitglied_ID: FieldRef<"einteilung", 'Int'>
    readonly Einheit_ID: FieldRef<"einteilung", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * einteilung findUnique
   */
  export type einteilungFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    /**
     * Filter, which einteilung to fetch.
     */
    where: einteilungWhereUniqueInput
  }

  /**
   * einteilung findUniqueOrThrow
   */
  export type einteilungFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    /**
     * Filter, which einteilung to fetch.
     */
    where: einteilungWhereUniqueInput
  }

  /**
   * einteilung findFirst
   */
  export type einteilungFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    /**
     * Filter, which einteilung to fetch.
     */
    where?: einteilungWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of einteilungs to fetch.
     */
    orderBy?: einteilungOrderByWithRelationInput | einteilungOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for einteilungs.
     */
    cursor?: einteilungWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` einteilungs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` einteilungs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of einteilungs.
     */
    distinct?: EinteilungScalarFieldEnum | EinteilungScalarFieldEnum[]
  }

  /**
   * einteilung findFirstOrThrow
   */
  export type einteilungFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    /**
     * Filter, which einteilung to fetch.
     */
    where?: einteilungWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of einteilungs to fetch.
     */
    orderBy?: einteilungOrderByWithRelationInput | einteilungOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for einteilungs.
     */
    cursor?: einteilungWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` einteilungs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` einteilungs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of einteilungs.
     */
    distinct?: EinteilungScalarFieldEnum | EinteilungScalarFieldEnum[]
  }

  /**
   * einteilung findMany
   */
  export type einteilungFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    /**
     * Filter, which einteilungs to fetch.
     */
    where?: einteilungWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of einteilungs to fetch.
     */
    orderBy?: einteilungOrderByWithRelationInput | einteilungOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing einteilungs.
     */
    cursor?: einteilungWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` einteilungs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` einteilungs.
     */
    skip?: number
    distinct?: EinteilungScalarFieldEnum | EinteilungScalarFieldEnum[]
  }

  /**
   * einteilung create
   */
  export type einteilungCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    /**
     * The data needed to create a einteilung.
     */
    data: XOR<einteilungCreateInput, einteilungUncheckedCreateInput>
  }

  /**
   * einteilung createMany
   */
  export type einteilungCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many einteilungs.
     */
    data: einteilungCreateManyInput | einteilungCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * einteilung createManyAndReturn
   */
  export type einteilungCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * The data used to create many einteilungs.
     */
    data: einteilungCreateManyInput | einteilungCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * einteilung update
   */
  export type einteilungUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    /**
     * The data needed to update a einteilung.
     */
    data: XOR<einteilungUpdateInput, einteilungUncheckedUpdateInput>
    /**
     * Choose, which einteilung to update.
     */
    where: einteilungWhereUniqueInput
  }

  /**
   * einteilung updateMany
   */
  export type einteilungUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update einteilungs.
     */
    data: XOR<einteilungUpdateManyMutationInput, einteilungUncheckedUpdateManyInput>
    /**
     * Filter which einteilungs to update
     */
    where?: einteilungWhereInput
    /**
     * Limit how many einteilungs to update.
     */
    limit?: number
  }

  /**
   * einteilung updateManyAndReturn
   */
  export type einteilungUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * The data used to update einteilungs.
     */
    data: XOR<einteilungUpdateManyMutationInput, einteilungUncheckedUpdateManyInput>
    /**
     * Filter which einteilungs to update
     */
    where?: einteilungWhereInput
    /**
     * Limit how many einteilungs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * einteilung upsert
   */
  export type einteilungUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    /**
     * The filter to search for the einteilung to update in case it exists.
     */
    where: einteilungWhereUniqueInput
    /**
     * In case the einteilung found by the `where` argument doesn't exist, create a new einteilung with this data.
     */
    create: XOR<einteilungCreateInput, einteilungUncheckedCreateInput>
    /**
     * In case the einteilung was found with the provided `where` argument, update it with this data.
     */
    update: XOR<einteilungUpdateInput, einteilungUncheckedUpdateInput>
  }

  /**
   * einteilung delete
   */
  export type einteilungDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    /**
     * Filter which einteilung to delete.
     */
    where: einteilungWhereUniqueInput
  }

  /**
   * einteilung deleteMany
   */
  export type einteilungDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which einteilungs to delete
     */
    where?: einteilungWhereInput
    /**
     * Limit how many einteilungs to delete.
     */
    limit?: number
  }

  /**
   * einteilung without action
   */
  export type einteilungDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
  }


  /**
   * Model fahrzeug
   */

  export type AggregateFahrzeug = {
    _count: FahrzeugCountAggregateOutputType | null
    _avg: FahrzeugAvgAggregateOutputType | null
    _sum: FahrzeugSumAggregateOutputType | null
    _min: FahrzeugMinAggregateOutputType | null
    _max: FahrzeugMaxAggregateOutputType | null
  }

  export type FahrzeugAvgAggregateOutputType = {
    ID: number | null
  }

  export type FahrzeugSumAggregateOutputType = {
    ID: number | null
  }

  export type FahrzeugMinAggregateOutputType = {
    ID: number | null
    Kennzeichen: string | null
    Fahrzeugtyp: string | null
    Besatzungsstaerke: string | null
    Status: $Enums.fahrzeug_status | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type FahrzeugMaxAggregateOutputType = {
    ID: number | null
    Kennzeichen: string | null
    Fahrzeugtyp: string | null
    Besatzungsstaerke: string | null
    Status: $Enums.fahrzeug_status | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type FahrzeugCountAggregateOutputType = {
    ID: number
    Kennzeichen: number
    Fahrzeugtyp: number
    Besatzungsstaerke: number
    Status: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type FahrzeugAvgAggregateInputType = {
    ID?: true
  }

  export type FahrzeugSumAggregateInputType = {
    ID?: true
  }

  export type FahrzeugMinAggregateInputType = {
    ID?: true
    Kennzeichen?: true
    Fahrzeugtyp?: true
    Besatzungsstaerke?: true
    Status?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type FahrzeugMaxAggregateInputType = {
    ID?: true
    Kennzeichen?: true
    Fahrzeugtyp?: true
    Besatzungsstaerke?: true
    Status?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type FahrzeugCountAggregateInputType = {
    ID?: true
    Kennzeichen?: true
    Fahrzeugtyp?: true
    Besatzungsstaerke?: true
    Status?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type FahrzeugAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which fahrzeug to aggregate.
     */
    where?: fahrzeugWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fahrzeugs to fetch.
     */
    orderBy?: fahrzeugOrderByWithRelationInput | fahrzeugOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: fahrzeugWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fahrzeugs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fahrzeugs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned fahrzeugs
    **/
    _count?: true | FahrzeugCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FahrzeugAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FahrzeugSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FahrzeugMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FahrzeugMaxAggregateInputType
  }

  export type GetFahrzeugAggregateType<T extends FahrzeugAggregateArgs> = {
        [P in keyof T & keyof AggregateFahrzeug]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFahrzeug[P]>
      : GetScalarType<T[P], AggregateFahrzeug[P]>
  }




  export type fahrzeugGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: fahrzeugWhereInput
    orderBy?: fahrzeugOrderByWithAggregationInput | fahrzeugOrderByWithAggregationInput[]
    by: FahrzeugScalarFieldEnum[] | FahrzeugScalarFieldEnum
    having?: fahrzeugScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FahrzeugCountAggregateInputType | true
    _avg?: FahrzeugAvgAggregateInputType
    _sum?: FahrzeugSumAggregateInputType
    _min?: FahrzeugMinAggregateInputType
    _max?: FahrzeugMaxAggregateInputType
  }

  export type FahrzeugGroupByOutputType = {
    ID: number
    Kennzeichen: string | null
    Fahrzeugtyp: string | null
    Besatzungsstaerke: string | null
    Status: $Enums.fahrzeug_status | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
    _count: FahrzeugCountAggregateOutputType | null
    _avg: FahrzeugAvgAggregateOutputType | null
    _sum: FahrzeugSumAggregateOutputType | null
    _min: FahrzeugMinAggregateOutputType | null
    _max: FahrzeugMaxAggregateOutputType | null
  }

  type GetFahrzeugGroupByPayload<T extends fahrzeugGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FahrzeugGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FahrzeugGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FahrzeugGroupByOutputType[P]>
            : GetScalarType<T[P], FahrzeugGroupByOutputType[P]>
        }
      >
    >


  export type fahrzeugSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Kennzeichen?: boolean
    Fahrzeugtyp?: boolean
    Besatzungsstaerke?: boolean
    Status?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    einteilung?: boolean | fahrzeug$einteilungArgs<ExtArgs>
    _count?: boolean | FahrzeugCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fahrzeug"]>

  export type fahrzeugSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Kennzeichen?: boolean
    Fahrzeugtyp?: boolean
    Besatzungsstaerke?: boolean
    Status?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["fahrzeug"]>

  export type fahrzeugSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Kennzeichen?: boolean
    Fahrzeugtyp?: boolean
    Besatzungsstaerke?: boolean
    Status?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["fahrzeug"]>

  export type fahrzeugSelectScalar = {
    ID?: boolean
    Kennzeichen?: boolean
    Fahrzeugtyp?: boolean
    Besatzungsstaerke?: boolean
    Status?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type fahrzeugOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Kennzeichen" | "Fahrzeugtyp" | "Besatzungsstaerke" | "Status" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["fahrzeug"]>
  export type fahrzeugInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    einteilung?: boolean | fahrzeug$einteilungArgs<ExtArgs>
    _count?: boolean | FahrzeugCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type fahrzeugIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type fahrzeugIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $fahrzeugPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "fahrzeug"
    objects: {
      einteilung: Prisma.$einteilungPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Kennzeichen: string | null
      Fahrzeugtyp: string | null
      Besatzungsstaerke: string | null
      Status: $Enums.fahrzeug_status | null
      Erstellt_am: Date | null
      Geaendert_am: Date | null
    }, ExtArgs["result"]["fahrzeug"]>
    composites: {}
  }

  type fahrzeugGetPayload<S extends boolean | null | undefined | fahrzeugDefaultArgs> = $Result.GetResult<Prisma.$fahrzeugPayload, S>

  type fahrzeugCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<fahrzeugFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FahrzeugCountAggregateInputType | true
    }

  export interface fahrzeugDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['fahrzeug'], meta: { name: 'fahrzeug' } }
    /**
     * Find zero or one Fahrzeug that matches the filter.
     * @param {fahrzeugFindUniqueArgs} args - Arguments to find a Fahrzeug
     * @example
     * // Get one Fahrzeug
     * const fahrzeug = await prisma.fahrzeug.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends fahrzeugFindUniqueArgs>(args: SelectSubset<T, fahrzeugFindUniqueArgs<ExtArgs>>): Prisma__fahrzeugClient<$Result.GetResult<Prisma.$fahrzeugPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Fahrzeug that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {fahrzeugFindUniqueOrThrowArgs} args - Arguments to find a Fahrzeug
     * @example
     * // Get one Fahrzeug
     * const fahrzeug = await prisma.fahrzeug.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends fahrzeugFindUniqueOrThrowArgs>(args: SelectSubset<T, fahrzeugFindUniqueOrThrowArgs<ExtArgs>>): Prisma__fahrzeugClient<$Result.GetResult<Prisma.$fahrzeugPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Fahrzeug that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fahrzeugFindFirstArgs} args - Arguments to find a Fahrzeug
     * @example
     * // Get one Fahrzeug
     * const fahrzeug = await prisma.fahrzeug.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends fahrzeugFindFirstArgs>(args?: SelectSubset<T, fahrzeugFindFirstArgs<ExtArgs>>): Prisma__fahrzeugClient<$Result.GetResult<Prisma.$fahrzeugPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Fahrzeug that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fahrzeugFindFirstOrThrowArgs} args - Arguments to find a Fahrzeug
     * @example
     * // Get one Fahrzeug
     * const fahrzeug = await prisma.fahrzeug.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends fahrzeugFindFirstOrThrowArgs>(args?: SelectSubset<T, fahrzeugFindFirstOrThrowArgs<ExtArgs>>): Prisma__fahrzeugClient<$Result.GetResult<Prisma.$fahrzeugPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Fahrzeugs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fahrzeugFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fahrzeugs
     * const fahrzeugs = await prisma.fahrzeug.findMany()
     * 
     * // Get first 10 Fahrzeugs
     * const fahrzeugs = await prisma.fahrzeug.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const fahrzeugWithIDOnly = await prisma.fahrzeug.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends fahrzeugFindManyArgs>(args?: SelectSubset<T, fahrzeugFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fahrzeugPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Fahrzeug.
     * @param {fahrzeugCreateArgs} args - Arguments to create a Fahrzeug.
     * @example
     * // Create one Fahrzeug
     * const Fahrzeug = await prisma.fahrzeug.create({
     *   data: {
     *     // ... data to create a Fahrzeug
     *   }
     * })
     * 
     */
    create<T extends fahrzeugCreateArgs>(args: SelectSubset<T, fahrzeugCreateArgs<ExtArgs>>): Prisma__fahrzeugClient<$Result.GetResult<Prisma.$fahrzeugPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Fahrzeugs.
     * @param {fahrzeugCreateManyArgs} args - Arguments to create many Fahrzeugs.
     * @example
     * // Create many Fahrzeugs
     * const fahrzeug = await prisma.fahrzeug.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends fahrzeugCreateManyArgs>(args?: SelectSubset<T, fahrzeugCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fahrzeugs and returns the data saved in the database.
     * @param {fahrzeugCreateManyAndReturnArgs} args - Arguments to create many Fahrzeugs.
     * @example
     * // Create many Fahrzeugs
     * const fahrzeug = await prisma.fahrzeug.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fahrzeugs and only return the `ID`
     * const fahrzeugWithIDOnly = await prisma.fahrzeug.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends fahrzeugCreateManyAndReturnArgs>(args?: SelectSubset<T, fahrzeugCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fahrzeugPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Fahrzeug.
     * @param {fahrzeugDeleteArgs} args - Arguments to delete one Fahrzeug.
     * @example
     * // Delete one Fahrzeug
     * const Fahrzeug = await prisma.fahrzeug.delete({
     *   where: {
     *     // ... filter to delete one Fahrzeug
     *   }
     * })
     * 
     */
    delete<T extends fahrzeugDeleteArgs>(args: SelectSubset<T, fahrzeugDeleteArgs<ExtArgs>>): Prisma__fahrzeugClient<$Result.GetResult<Prisma.$fahrzeugPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Fahrzeug.
     * @param {fahrzeugUpdateArgs} args - Arguments to update one Fahrzeug.
     * @example
     * // Update one Fahrzeug
     * const fahrzeug = await prisma.fahrzeug.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends fahrzeugUpdateArgs>(args: SelectSubset<T, fahrzeugUpdateArgs<ExtArgs>>): Prisma__fahrzeugClient<$Result.GetResult<Prisma.$fahrzeugPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Fahrzeugs.
     * @param {fahrzeugDeleteManyArgs} args - Arguments to filter Fahrzeugs to delete.
     * @example
     * // Delete a few Fahrzeugs
     * const { count } = await prisma.fahrzeug.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends fahrzeugDeleteManyArgs>(args?: SelectSubset<T, fahrzeugDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fahrzeugs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fahrzeugUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fahrzeugs
     * const fahrzeug = await prisma.fahrzeug.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends fahrzeugUpdateManyArgs>(args: SelectSubset<T, fahrzeugUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fahrzeugs and returns the data updated in the database.
     * @param {fahrzeugUpdateManyAndReturnArgs} args - Arguments to update many Fahrzeugs.
     * @example
     * // Update many Fahrzeugs
     * const fahrzeug = await prisma.fahrzeug.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Fahrzeugs and only return the `ID`
     * const fahrzeugWithIDOnly = await prisma.fahrzeug.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends fahrzeugUpdateManyAndReturnArgs>(args: SelectSubset<T, fahrzeugUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fahrzeugPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Fahrzeug.
     * @param {fahrzeugUpsertArgs} args - Arguments to update or create a Fahrzeug.
     * @example
     * // Update or create a Fahrzeug
     * const fahrzeug = await prisma.fahrzeug.upsert({
     *   create: {
     *     // ... data to create a Fahrzeug
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fahrzeug we want to update
     *   }
     * })
     */
    upsert<T extends fahrzeugUpsertArgs>(args: SelectSubset<T, fahrzeugUpsertArgs<ExtArgs>>): Prisma__fahrzeugClient<$Result.GetResult<Prisma.$fahrzeugPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Fahrzeugs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fahrzeugCountArgs} args - Arguments to filter Fahrzeugs to count.
     * @example
     * // Count the number of Fahrzeugs
     * const count = await prisma.fahrzeug.count({
     *   where: {
     *     // ... the filter for the Fahrzeugs we want to count
     *   }
     * })
    **/
    count<T extends fahrzeugCountArgs>(
      args?: Subset<T, fahrzeugCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FahrzeugCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fahrzeug.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FahrzeugAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FahrzeugAggregateArgs>(args: Subset<T, FahrzeugAggregateArgs>): Prisma.PrismaPromise<GetFahrzeugAggregateType<T>>

    /**
     * Group by Fahrzeug.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fahrzeugGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends fahrzeugGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: fahrzeugGroupByArgs['orderBy'] }
        : { orderBy?: fahrzeugGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, fahrzeugGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFahrzeugGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the fahrzeug model
   */
  readonly fields: fahrzeugFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for fahrzeug.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__fahrzeugClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    einteilung<T extends fahrzeug$einteilungArgs<ExtArgs> = {}>(args?: Subset<T, fahrzeug$einteilungArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the fahrzeug model
   */
  interface fahrzeugFieldRefs {
    readonly ID: FieldRef<"fahrzeug", 'Int'>
    readonly Kennzeichen: FieldRef<"fahrzeug", 'String'>
    readonly Fahrzeugtyp: FieldRef<"fahrzeug", 'String'>
    readonly Besatzungsstaerke: FieldRef<"fahrzeug", 'String'>
    readonly Status: FieldRef<"fahrzeug", 'fahrzeug_status'>
    readonly Erstellt_am: FieldRef<"fahrzeug", 'DateTime'>
    readonly Geaendert_am: FieldRef<"fahrzeug", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * fahrzeug findUnique
   */
  export type fahrzeugFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fahrzeug
     */
    select?: fahrzeugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fahrzeug
     */
    omit?: fahrzeugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fahrzeugInclude<ExtArgs> | null
    /**
     * Filter, which fahrzeug to fetch.
     */
    where: fahrzeugWhereUniqueInput
  }

  /**
   * fahrzeug findUniqueOrThrow
   */
  export type fahrzeugFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fahrzeug
     */
    select?: fahrzeugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fahrzeug
     */
    omit?: fahrzeugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fahrzeugInclude<ExtArgs> | null
    /**
     * Filter, which fahrzeug to fetch.
     */
    where: fahrzeugWhereUniqueInput
  }

  /**
   * fahrzeug findFirst
   */
  export type fahrzeugFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fahrzeug
     */
    select?: fahrzeugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fahrzeug
     */
    omit?: fahrzeugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fahrzeugInclude<ExtArgs> | null
    /**
     * Filter, which fahrzeug to fetch.
     */
    where?: fahrzeugWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fahrzeugs to fetch.
     */
    orderBy?: fahrzeugOrderByWithRelationInput | fahrzeugOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fahrzeugs.
     */
    cursor?: fahrzeugWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fahrzeugs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fahrzeugs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fahrzeugs.
     */
    distinct?: FahrzeugScalarFieldEnum | FahrzeugScalarFieldEnum[]
  }

  /**
   * fahrzeug findFirstOrThrow
   */
  export type fahrzeugFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fahrzeug
     */
    select?: fahrzeugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fahrzeug
     */
    omit?: fahrzeugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fahrzeugInclude<ExtArgs> | null
    /**
     * Filter, which fahrzeug to fetch.
     */
    where?: fahrzeugWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fahrzeugs to fetch.
     */
    orderBy?: fahrzeugOrderByWithRelationInput | fahrzeugOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fahrzeugs.
     */
    cursor?: fahrzeugWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fahrzeugs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fahrzeugs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fahrzeugs.
     */
    distinct?: FahrzeugScalarFieldEnum | FahrzeugScalarFieldEnum[]
  }

  /**
   * fahrzeug findMany
   */
  export type fahrzeugFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fahrzeug
     */
    select?: fahrzeugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fahrzeug
     */
    omit?: fahrzeugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fahrzeugInclude<ExtArgs> | null
    /**
     * Filter, which fahrzeugs to fetch.
     */
    where?: fahrzeugWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fahrzeugs to fetch.
     */
    orderBy?: fahrzeugOrderByWithRelationInput | fahrzeugOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing fahrzeugs.
     */
    cursor?: fahrzeugWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fahrzeugs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fahrzeugs.
     */
    skip?: number
    distinct?: FahrzeugScalarFieldEnum | FahrzeugScalarFieldEnum[]
  }

  /**
   * fahrzeug create
   */
  export type fahrzeugCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fahrzeug
     */
    select?: fahrzeugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fahrzeug
     */
    omit?: fahrzeugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fahrzeugInclude<ExtArgs> | null
    /**
     * The data needed to create a fahrzeug.
     */
    data?: XOR<fahrzeugCreateInput, fahrzeugUncheckedCreateInput>
  }

  /**
   * fahrzeug createMany
   */
  export type fahrzeugCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many fahrzeugs.
     */
    data: fahrzeugCreateManyInput | fahrzeugCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * fahrzeug createManyAndReturn
   */
  export type fahrzeugCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fahrzeug
     */
    select?: fahrzeugSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the fahrzeug
     */
    omit?: fahrzeugOmit<ExtArgs> | null
    /**
     * The data used to create many fahrzeugs.
     */
    data: fahrzeugCreateManyInput | fahrzeugCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * fahrzeug update
   */
  export type fahrzeugUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fahrzeug
     */
    select?: fahrzeugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fahrzeug
     */
    omit?: fahrzeugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fahrzeugInclude<ExtArgs> | null
    /**
     * The data needed to update a fahrzeug.
     */
    data: XOR<fahrzeugUpdateInput, fahrzeugUncheckedUpdateInput>
    /**
     * Choose, which fahrzeug to update.
     */
    where: fahrzeugWhereUniqueInput
  }

  /**
   * fahrzeug updateMany
   */
  export type fahrzeugUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update fahrzeugs.
     */
    data: XOR<fahrzeugUpdateManyMutationInput, fahrzeugUncheckedUpdateManyInput>
    /**
     * Filter which fahrzeugs to update
     */
    where?: fahrzeugWhereInput
    /**
     * Limit how many fahrzeugs to update.
     */
    limit?: number
  }

  /**
   * fahrzeug updateManyAndReturn
   */
  export type fahrzeugUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fahrzeug
     */
    select?: fahrzeugSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the fahrzeug
     */
    omit?: fahrzeugOmit<ExtArgs> | null
    /**
     * The data used to update fahrzeugs.
     */
    data: XOR<fahrzeugUpdateManyMutationInput, fahrzeugUncheckedUpdateManyInput>
    /**
     * Filter which fahrzeugs to update
     */
    where?: fahrzeugWhereInput
    /**
     * Limit how many fahrzeugs to update.
     */
    limit?: number
  }

  /**
   * fahrzeug upsert
   */
  export type fahrzeugUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fahrzeug
     */
    select?: fahrzeugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fahrzeug
     */
    omit?: fahrzeugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fahrzeugInclude<ExtArgs> | null
    /**
     * The filter to search for the fahrzeug to update in case it exists.
     */
    where: fahrzeugWhereUniqueInput
    /**
     * In case the fahrzeug found by the `where` argument doesn't exist, create a new fahrzeug with this data.
     */
    create: XOR<fahrzeugCreateInput, fahrzeugUncheckedCreateInput>
    /**
     * In case the fahrzeug was found with the provided `where` argument, update it with this data.
     */
    update: XOR<fahrzeugUpdateInput, fahrzeugUncheckedUpdateInput>
  }

  /**
   * fahrzeug delete
   */
  export type fahrzeugDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fahrzeug
     */
    select?: fahrzeugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fahrzeug
     */
    omit?: fahrzeugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fahrzeugInclude<ExtArgs> | null
    /**
     * Filter which fahrzeug to delete.
     */
    where: fahrzeugWhereUniqueInput
  }

  /**
   * fahrzeug deleteMany
   */
  export type fahrzeugDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which fahrzeugs to delete
     */
    where?: fahrzeugWhereInput
    /**
     * Limit how many fahrzeugs to delete.
     */
    limit?: number
  }

  /**
   * fahrzeug.einteilung
   */
  export type fahrzeug$einteilungArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    where?: einteilungWhereInput
    orderBy?: einteilungOrderByWithRelationInput | einteilungOrderByWithRelationInput[]
    cursor?: einteilungWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EinteilungScalarFieldEnum | EinteilungScalarFieldEnum[]
  }

  /**
   * fahrzeug without action
   */
  export type fahrzeugDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fahrzeug
     */
    select?: fahrzeugSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fahrzeug
     */
    omit?: fahrzeugOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: fahrzeugInclude<ExtArgs> | null
  }


  /**
   * Model ff_mitglied
   */

  export type AggregateFf_mitglied = {
    _count: Ff_mitgliedCountAggregateOutputType | null
    _avg: Ff_mitgliedAvgAggregateOutputType | null
    _sum: Ff_mitgliedSumAggregateOutputType | null
    _min: Ff_mitgliedMinAggregateOutputType | null
    _max: Ff_mitgliedMaxAggregateOutputType | null
  }

  export type Ff_mitgliedAvgAggregateOutputType = {
    ID: number | null
    Person_ID: number | null
  }

  export type Ff_mitgliedSumAggregateOutputType = {
    ID: number | null
    Person_ID: number | null
  }

  export type Ff_mitgliedMinAggregateOutputType = {
    ID: number | null
    Person_ID: number | null
    Eintrittsdatum: Date | null
    Austrittsdatum: Date | null
    Aufnahmedatum: Date | null
    Status: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Ff_mitgliedMaxAggregateOutputType = {
    ID: number | null
    Person_ID: number | null
    Eintrittsdatum: Date | null
    Austrittsdatum: Date | null
    Aufnahmedatum: Date | null
    Status: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Ff_mitgliedCountAggregateOutputType = {
    ID: number
    Person_ID: number
    Eintrittsdatum: number
    Austrittsdatum: number
    Aufnahmedatum: number
    Status: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type Ff_mitgliedAvgAggregateInputType = {
    ID?: true
    Person_ID?: true
  }

  export type Ff_mitgliedSumAggregateInputType = {
    ID?: true
    Person_ID?: true
  }

  export type Ff_mitgliedMinAggregateInputType = {
    ID?: true
    Person_ID?: true
    Eintrittsdatum?: true
    Austrittsdatum?: true
    Aufnahmedatum?: true
    Status?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Ff_mitgliedMaxAggregateInputType = {
    ID?: true
    Person_ID?: true
    Eintrittsdatum?: true
    Austrittsdatum?: true
    Aufnahmedatum?: true
    Status?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Ff_mitgliedCountAggregateInputType = {
    ID?: true
    Person_ID?: true
    Eintrittsdatum?: true
    Austrittsdatum?: true
    Aufnahmedatum?: true
    Status?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type Ff_mitgliedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ff_mitglied to aggregate.
     */
    where?: ff_mitgliedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ff_mitglieds to fetch.
     */
    orderBy?: ff_mitgliedOrderByWithRelationInput | ff_mitgliedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ff_mitgliedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ff_mitglieds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ff_mitglieds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ff_mitglieds
    **/
    _count?: true | Ff_mitgliedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ff_mitgliedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ff_mitgliedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ff_mitgliedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ff_mitgliedMaxAggregateInputType
  }

  export type GetFf_mitgliedAggregateType<T extends Ff_mitgliedAggregateArgs> = {
        [P in keyof T & keyof AggregateFf_mitglied]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFf_mitglied[P]>
      : GetScalarType<T[P], AggregateFf_mitglied[P]>
  }




  export type ff_mitgliedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ff_mitgliedWhereInput
    orderBy?: ff_mitgliedOrderByWithAggregationInput | ff_mitgliedOrderByWithAggregationInput[]
    by: Ff_mitgliedScalarFieldEnum[] | Ff_mitgliedScalarFieldEnum
    having?: ff_mitgliedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ff_mitgliedCountAggregateInputType | true
    _avg?: Ff_mitgliedAvgAggregateInputType
    _sum?: Ff_mitgliedSumAggregateInputType
    _min?: Ff_mitgliedMinAggregateInputType
    _max?: Ff_mitgliedMaxAggregateInputType
  }

  export type Ff_mitgliedGroupByOutputType = {
    ID: number
    Person_ID: number
    Eintrittsdatum: Date
    Austrittsdatum: Date | null
    Aufnahmedatum: Date | null
    Status: $Enums.ff_mitglied_status | null
    Erstellt_am: Date
    Geaendert_am: Date | null
    _count: Ff_mitgliedCountAggregateOutputType | null
    _avg: Ff_mitgliedAvgAggregateOutputType | null
    _sum: Ff_mitgliedSumAggregateOutputType | null
    _min: Ff_mitgliedMinAggregateOutputType | null
    _max: Ff_mitgliedMaxAggregateOutputType | null
  }

  type GetFf_mitgliedGroupByPayload<T extends ff_mitgliedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ff_mitgliedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ff_mitgliedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ff_mitgliedGroupByOutputType[P]>
            : GetScalarType<T[P], Ff_mitgliedGroupByOutputType[P]>
        }
      >
    >


  export type ff_mitgliedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Person_ID?: boolean
    Eintrittsdatum?: boolean
    Austrittsdatum?: boolean
    Aufnahmedatum?: boolean
    Status?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    allergie?: boolean | ff_mitglied$allergieArgs<ExtArgs>
    einteilung?: boolean | ff_mitglied$einteilungArgs<ExtArgs>
    ff_mitglied_lehrgang?: boolean | ff_mitglied$ff_mitglied_lehrgangArgs<ExtArgs>
    mitglied_funktionen?: boolean | ff_mitglied$mitglied_funktionenArgs<ExtArgs>
    _count?: boolean | Ff_mitgliedCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ff_mitglied"]>

  export type ff_mitgliedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Person_ID?: boolean
    Eintrittsdatum?: boolean
    Austrittsdatum?: boolean
    Aufnahmedatum?: boolean
    Status?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["ff_mitglied"]>

  export type ff_mitgliedSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Person_ID?: boolean
    Eintrittsdatum?: boolean
    Austrittsdatum?: boolean
    Aufnahmedatum?: boolean
    Status?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["ff_mitglied"]>

  export type ff_mitgliedSelectScalar = {
    ID?: boolean
    Person_ID?: boolean
    Eintrittsdatum?: boolean
    Austrittsdatum?: boolean
    Aufnahmedatum?: boolean
    Status?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type ff_mitgliedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Person_ID" | "Eintrittsdatum" | "Austrittsdatum" | "Aufnahmedatum" | "Status" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["ff_mitglied"]>
  export type ff_mitgliedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    allergie?: boolean | ff_mitglied$allergieArgs<ExtArgs>
    einteilung?: boolean | ff_mitglied$einteilungArgs<ExtArgs>
    ff_mitglied_lehrgang?: boolean | ff_mitglied$ff_mitglied_lehrgangArgs<ExtArgs>
    mitglied_funktionen?: boolean | ff_mitglied$mitglied_funktionenArgs<ExtArgs>
    _count?: boolean | Ff_mitgliedCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ff_mitgliedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ff_mitgliedIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ff_mitgliedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ff_mitglied"
    objects: {
      allergie: Prisma.$allergiePayload<ExtArgs>[]
      einteilung: Prisma.$einteilungPayload<ExtArgs>[]
      ff_mitglied_lehrgang: Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>[]
      mitglied_funktionen: Prisma.$mitglied_funktionenPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Person_ID: number
      Eintrittsdatum: Date
      Austrittsdatum: Date | null
      Aufnahmedatum: Date | null
      Status: $Enums.ff_mitglied_status | null
      Erstellt_am: Date
      Geaendert_am: Date | null
    }, ExtArgs["result"]["ff_mitglied"]>
    composites: {}
  }

  type ff_mitgliedGetPayload<S extends boolean | null | undefined | ff_mitgliedDefaultArgs> = $Result.GetResult<Prisma.$ff_mitgliedPayload, S>

  type ff_mitgliedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ff_mitgliedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Ff_mitgliedCountAggregateInputType | true
    }

  export interface ff_mitgliedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ff_mitglied'], meta: { name: 'ff_mitglied' } }
    /**
     * Find zero or one Ff_mitglied that matches the filter.
     * @param {ff_mitgliedFindUniqueArgs} args - Arguments to find a Ff_mitglied
     * @example
     * // Get one Ff_mitglied
     * const ff_mitglied = await prisma.ff_mitglied.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ff_mitgliedFindUniqueArgs>(args: SelectSubset<T, ff_mitgliedFindUniqueArgs<ExtArgs>>): Prisma__ff_mitgliedClient<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ff_mitglied that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ff_mitgliedFindUniqueOrThrowArgs} args - Arguments to find a Ff_mitglied
     * @example
     * // Get one Ff_mitglied
     * const ff_mitglied = await prisma.ff_mitglied.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ff_mitgliedFindUniqueOrThrowArgs>(args: SelectSubset<T, ff_mitgliedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ff_mitgliedClient<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ff_mitglied that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ff_mitgliedFindFirstArgs} args - Arguments to find a Ff_mitglied
     * @example
     * // Get one Ff_mitglied
     * const ff_mitglied = await prisma.ff_mitglied.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ff_mitgliedFindFirstArgs>(args?: SelectSubset<T, ff_mitgliedFindFirstArgs<ExtArgs>>): Prisma__ff_mitgliedClient<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ff_mitglied that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ff_mitgliedFindFirstOrThrowArgs} args - Arguments to find a Ff_mitglied
     * @example
     * // Get one Ff_mitglied
     * const ff_mitglied = await prisma.ff_mitglied.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ff_mitgliedFindFirstOrThrowArgs>(args?: SelectSubset<T, ff_mitgliedFindFirstOrThrowArgs<ExtArgs>>): Prisma__ff_mitgliedClient<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ff_mitglieds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ff_mitgliedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ff_mitglieds
     * const ff_mitglieds = await prisma.ff_mitglied.findMany()
     * 
     * // Get first 10 Ff_mitglieds
     * const ff_mitglieds = await prisma.ff_mitglied.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const ff_mitgliedWithIDOnly = await prisma.ff_mitglied.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends ff_mitgliedFindManyArgs>(args?: SelectSubset<T, ff_mitgliedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ff_mitglied.
     * @param {ff_mitgliedCreateArgs} args - Arguments to create a Ff_mitglied.
     * @example
     * // Create one Ff_mitglied
     * const Ff_mitglied = await prisma.ff_mitglied.create({
     *   data: {
     *     // ... data to create a Ff_mitglied
     *   }
     * })
     * 
     */
    create<T extends ff_mitgliedCreateArgs>(args: SelectSubset<T, ff_mitgliedCreateArgs<ExtArgs>>): Prisma__ff_mitgliedClient<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ff_mitglieds.
     * @param {ff_mitgliedCreateManyArgs} args - Arguments to create many Ff_mitglieds.
     * @example
     * // Create many Ff_mitglieds
     * const ff_mitglied = await prisma.ff_mitglied.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ff_mitgliedCreateManyArgs>(args?: SelectSubset<T, ff_mitgliedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ff_mitglieds and returns the data saved in the database.
     * @param {ff_mitgliedCreateManyAndReturnArgs} args - Arguments to create many Ff_mitglieds.
     * @example
     * // Create many Ff_mitglieds
     * const ff_mitglied = await prisma.ff_mitglied.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ff_mitglieds and only return the `ID`
     * const ff_mitgliedWithIDOnly = await prisma.ff_mitglied.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ff_mitgliedCreateManyAndReturnArgs>(args?: SelectSubset<T, ff_mitgliedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ff_mitglied.
     * @param {ff_mitgliedDeleteArgs} args - Arguments to delete one Ff_mitglied.
     * @example
     * // Delete one Ff_mitglied
     * const Ff_mitglied = await prisma.ff_mitglied.delete({
     *   where: {
     *     // ... filter to delete one Ff_mitglied
     *   }
     * })
     * 
     */
    delete<T extends ff_mitgliedDeleteArgs>(args: SelectSubset<T, ff_mitgliedDeleteArgs<ExtArgs>>): Prisma__ff_mitgliedClient<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ff_mitglied.
     * @param {ff_mitgliedUpdateArgs} args - Arguments to update one Ff_mitglied.
     * @example
     * // Update one Ff_mitglied
     * const ff_mitglied = await prisma.ff_mitglied.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ff_mitgliedUpdateArgs>(args: SelectSubset<T, ff_mitgliedUpdateArgs<ExtArgs>>): Prisma__ff_mitgliedClient<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ff_mitglieds.
     * @param {ff_mitgliedDeleteManyArgs} args - Arguments to filter Ff_mitglieds to delete.
     * @example
     * // Delete a few Ff_mitglieds
     * const { count } = await prisma.ff_mitglied.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ff_mitgliedDeleteManyArgs>(args?: SelectSubset<T, ff_mitgliedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ff_mitglieds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ff_mitgliedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ff_mitglieds
     * const ff_mitglied = await prisma.ff_mitglied.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ff_mitgliedUpdateManyArgs>(args: SelectSubset<T, ff_mitgliedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ff_mitglieds and returns the data updated in the database.
     * @param {ff_mitgliedUpdateManyAndReturnArgs} args - Arguments to update many Ff_mitglieds.
     * @example
     * // Update many Ff_mitglieds
     * const ff_mitglied = await prisma.ff_mitglied.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ff_mitglieds and only return the `ID`
     * const ff_mitgliedWithIDOnly = await prisma.ff_mitglied.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ff_mitgliedUpdateManyAndReturnArgs>(args: SelectSubset<T, ff_mitgliedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ff_mitglied.
     * @param {ff_mitgliedUpsertArgs} args - Arguments to update or create a Ff_mitglied.
     * @example
     * // Update or create a Ff_mitglied
     * const ff_mitglied = await prisma.ff_mitglied.upsert({
     *   create: {
     *     // ... data to create a Ff_mitglied
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ff_mitglied we want to update
     *   }
     * })
     */
    upsert<T extends ff_mitgliedUpsertArgs>(args: SelectSubset<T, ff_mitgliedUpsertArgs<ExtArgs>>): Prisma__ff_mitgliedClient<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ff_mitglieds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ff_mitgliedCountArgs} args - Arguments to filter Ff_mitglieds to count.
     * @example
     * // Count the number of Ff_mitglieds
     * const count = await prisma.ff_mitglied.count({
     *   where: {
     *     // ... the filter for the Ff_mitglieds we want to count
     *   }
     * })
    **/
    count<T extends ff_mitgliedCountArgs>(
      args?: Subset<T, ff_mitgliedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ff_mitgliedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ff_mitglied.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ff_mitgliedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ff_mitgliedAggregateArgs>(args: Subset<T, Ff_mitgliedAggregateArgs>): Prisma.PrismaPromise<GetFf_mitgliedAggregateType<T>>

    /**
     * Group by Ff_mitglied.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ff_mitgliedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ff_mitgliedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ff_mitgliedGroupByArgs['orderBy'] }
        : { orderBy?: ff_mitgliedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ff_mitgliedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFf_mitgliedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ff_mitglied model
   */
  readonly fields: ff_mitgliedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ff_mitglied.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ff_mitgliedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    allergie<T extends ff_mitglied$allergieArgs<ExtArgs> = {}>(args?: Subset<T, ff_mitglied$allergieArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    einteilung<T extends ff_mitglied$einteilungArgs<ExtArgs> = {}>(args?: Subset<T, ff_mitglied$einteilungArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$einteilungPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ff_mitglied_lehrgang<T extends ff_mitglied$ff_mitglied_lehrgangArgs<ExtArgs> = {}>(args?: Subset<T, ff_mitglied$ff_mitglied_lehrgangArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mitglied_funktionen<T extends ff_mitglied$mitglied_funktionenArgs<ExtArgs> = {}>(args?: Subset<T, ff_mitglied$mitglied_funktionenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mitglied_funktionenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ff_mitglied model
   */
  interface ff_mitgliedFieldRefs {
    readonly ID: FieldRef<"ff_mitglied", 'Int'>
    readonly Person_ID: FieldRef<"ff_mitglied", 'Int'>
    readonly Eintrittsdatum: FieldRef<"ff_mitglied", 'DateTime'>
    readonly Austrittsdatum: FieldRef<"ff_mitglied", 'DateTime'>
    readonly Aufnahmedatum: FieldRef<"ff_mitglied", 'DateTime'>
    readonly Status: FieldRef<"ff_mitglied", 'ff_mitglied_status'>
    readonly Erstellt_am: FieldRef<"ff_mitglied", 'DateTime'>
    readonly Geaendert_am: FieldRef<"ff_mitglied", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ff_mitglied findUnique
   */
  export type ff_mitgliedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied
     */
    select?: ff_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied
     */
    omit?: ff_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitgliedInclude<ExtArgs> | null
    /**
     * Filter, which ff_mitglied to fetch.
     */
    where: ff_mitgliedWhereUniqueInput
  }

  /**
   * ff_mitglied findUniqueOrThrow
   */
  export type ff_mitgliedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied
     */
    select?: ff_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied
     */
    omit?: ff_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitgliedInclude<ExtArgs> | null
    /**
     * Filter, which ff_mitglied to fetch.
     */
    where: ff_mitgliedWhereUniqueInput
  }

  /**
   * ff_mitglied findFirst
   */
  export type ff_mitgliedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied
     */
    select?: ff_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied
     */
    omit?: ff_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitgliedInclude<ExtArgs> | null
    /**
     * Filter, which ff_mitglied to fetch.
     */
    where?: ff_mitgliedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ff_mitglieds to fetch.
     */
    orderBy?: ff_mitgliedOrderByWithRelationInput | ff_mitgliedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ff_mitglieds.
     */
    cursor?: ff_mitgliedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ff_mitglieds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ff_mitglieds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ff_mitglieds.
     */
    distinct?: Ff_mitgliedScalarFieldEnum | Ff_mitgliedScalarFieldEnum[]
  }

  /**
   * ff_mitglied findFirstOrThrow
   */
  export type ff_mitgliedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied
     */
    select?: ff_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied
     */
    omit?: ff_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitgliedInclude<ExtArgs> | null
    /**
     * Filter, which ff_mitglied to fetch.
     */
    where?: ff_mitgliedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ff_mitglieds to fetch.
     */
    orderBy?: ff_mitgliedOrderByWithRelationInput | ff_mitgliedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ff_mitglieds.
     */
    cursor?: ff_mitgliedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ff_mitglieds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ff_mitglieds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ff_mitglieds.
     */
    distinct?: Ff_mitgliedScalarFieldEnum | Ff_mitgliedScalarFieldEnum[]
  }

  /**
   * ff_mitglied findMany
   */
  export type ff_mitgliedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied
     */
    select?: ff_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied
     */
    omit?: ff_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitgliedInclude<ExtArgs> | null
    /**
     * Filter, which ff_mitglieds to fetch.
     */
    where?: ff_mitgliedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ff_mitglieds to fetch.
     */
    orderBy?: ff_mitgliedOrderByWithRelationInput | ff_mitgliedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ff_mitglieds.
     */
    cursor?: ff_mitgliedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ff_mitglieds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ff_mitglieds.
     */
    skip?: number
    distinct?: Ff_mitgliedScalarFieldEnum | Ff_mitgliedScalarFieldEnum[]
  }

  /**
   * ff_mitglied create
   */
  export type ff_mitgliedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied
     */
    select?: ff_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied
     */
    omit?: ff_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitgliedInclude<ExtArgs> | null
    /**
     * The data needed to create a ff_mitglied.
     */
    data: XOR<ff_mitgliedCreateInput, ff_mitgliedUncheckedCreateInput>
  }

  /**
   * ff_mitglied createMany
   */
  export type ff_mitgliedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ff_mitglieds.
     */
    data: ff_mitgliedCreateManyInput | ff_mitgliedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ff_mitglied createManyAndReturn
   */
  export type ff_mitgliedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied
     */
    select?: ff_mitgliedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied
     */
    omit?: ff_mitgliedOmit<ExtArgs> | null
    /**
     * The data used to create many ff_mitglieds.
     */
    data: ff_mitgliedCreateManyInput | ff_mitgliedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ff_mitglied update
   */
  export type ff_mitgliedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied
     */
    select?: ff_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied
     */
    omit?: ff_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitgliedInclude<ExtArgs> | null
    /**
     * The data needed to update a ff_mitglied.
     */
    data: XOR<ff_mitgliedUpdateInput, ff_mitgliedUncheckedUpdateInput>
    /**
     * Choose, which ff_mitglied to update.
     */
    where: ff_mitgliedWhereUniqueInput
  }

  /**
   * ff_mitglied updateMany
   */
  export type ff_mitgliedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ff_mitglieds.
     */
    data: XOR<ff_mitgliedUpdateManyMutationInput, ff_mitgliedUncheckedUpdateManyInput>
    /**
     * Filter which ff_mitglieds to update
     */
    where?: ff_mitgliedWhereInput
    /**
     * Limit how many ff_mitglieds to update.
     */
    limit?: number
  }

  /**
   * ff_mitglied updateManyAndReturn
   */
  export type ff_mitgliedUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied
     */
    select?: ff_mitgliedSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied
     */
    omit?: ff_mitgliedOmit<ExtArgs> | null
    /**
     * The data used to update ff_mitglieds.
     */
    data: XOR<ff_mitgliedUpdateManyMutationInput, ff_mitgliedUncheckedUpdateManyInput>
    /**
     * Filter which ff_mitglieds to update
     */
    where?: ff_mitgliedWhereInput
    /**
     * Limit how many ff_mitglieds to update.
     */
    limit?: number
  }

  /**
   * ff_mitglied upsert
   */
  export type ff_mitgliedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied
     */
    select?: ff_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied
     */
    omit?: ff_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitgliedInclude<ExtArgs> | null
    /**
     * The filter to search for the ff_mitglied to update in case it exists.
     */
    where: ff_mitgliedWhereUniqueInput
    /**
     * In case the ff_mitglied found by the `where` argument doesn't exist, create a new ff_mitglied with this data.
     */
    create: XOR<ff_mitgliedCreateInput, ff_mitgliedUncheckedCreateInput>
    /**
     * In case the ff_mitglied was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ff_mitgliedUpdateInput, ff_mitgliedUncheckedUpdateInput>
  }

  /**
   * ff_mitglied delete
   */
  export type ff_mitgliedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied
     */
    select?: ff_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied
     */
    omit?: ff_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitgliedInclude<ExtArgs> | null
    /**
     * Filter which ff_mitglied to delete.
     */
    where: ff_mitgliedWhereUniqueInput
  }

  /**
   * ff_mitglied deleteMany
   */
  export type ff_mitgliedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ff_mitglieds to delete
     */
    where?: ff_mitgliedWhereInput
    /**
     * Limit how many ff_mitglieds to delete.
     */
    limit?: number
  }

  /**
   * ff_mitglied.allergie
   */
  export type ff_mitglied$allergieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieInclude<ExtArgs> | null
    where?: allergieWhereInput
    orderBy?: allergieOrderByWithRelationInput | allergieOrderByWithRelationInput[]
    cursor?: allergieWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllergieScalarFieldEnum | AllergieScalarFieldEnum[]
  }

  /**
   * ff_mitglied.einteilung
   */
  export type ff_mitglied$einteilungArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the einteilung
     */
    select?: einteilungSelect<ExtArgs> | null
    /**
     * Omit specific fields from the einteilung
     */
    omit?: einteilungOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: einteilungInclude<ExtArgs> | null
    where?: einteilungWhereInput
    orderBy?: einteilungOrderByWithRelationInput | einteilungOrderByWithRelationInput[]
    cursor?: einteilungWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EinteilungScalarFieldEnum | EinteilungScalarFieldEnum[]
  }

  /**
   * ff_mitglied.ff_mitglied_lehrgang
   */
  export type ff_mitglied$ff_mitglied_lehrgangArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangInclude<ExtArgs> | null
    where?: ff_mitglied_lehrgangWhereInput
    orderBy?: ff_mitglied_lehrgangOrderByWithRelationInput | ff_mitglied_lehrgangOrderByWithRelationInput[]
    cursor?: ff_mitglied_lehrgangWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ff_mitglied_lehrgangScalarFieldEnum | Ff_mitglied_lehrgangScalarFieldEnum[]
  }

  /**
   * ff_mitglied.mitglied_funktionen
   */
  export type ff_mitglied$mitglied_funktionenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenInclude<ExtArgs> | null
    where?: mitglied_funktionenWhereInput
    orderBy?: mitglied_funktionenOrderByWithRelationInput | mitglied_funktionenOrderByWithRelationInput[]
    cursor?: mitglied_funktionenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Mitglied_funktionenScalarFieldEnum | Mitglied_funktionenScalarFieldEnum[]
  }

  /**
   * ff_mitglied without action
   */
  export type ff_mitgliedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied
     */
    select?: ff_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied
     */
    omit?: ff_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitgliedInclude<ExtArgs> | null
  }


  /**
   * Model ff_mitglied_lehrgang
   */

  export type AggregateFf_mitglied_lehrgang = {
    _count: Ff_mitglied_lehrgangCountAggregateOutputType | null
    _avg: Ff_mitglied_lehrgangAvgAggregateOutputType | null
    _sum: Ff_mitglied_lehrgangSumAggregateOutputType | null
    _min: Ff_mitglied_lehrgangMinAggregateOutputType | null
    _max: Ff_mitglied_lehrgangMaxAggregateOutputType | null
  }

  export type Ff_mitglied_lehrgangAvgAggregateOutputType = {
    ID: number | null
    FF_Mitglied_ID: number | null
    Lehrgang_ID: number | null
  }

  export type Ff_mitglied_lehrgangSumAggregateOutputType = {
    ID: number | null
    FF_Mitglied_ID: number | null
    Lehrgang_ID: number | null
  }

  export type Ff_mitglied_lehrgangMinAggregateOutputType = {
    ID: number | null
    FF_Mitglied_ID: number | null
    Lehrgang_ID: number | null
    Datum_bestanden: Date | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Ff_mitglied_lehrgangMaxAggregateOutputType = {
    ID: number | null
    FF_Mitglied_ID: number | null
    Lehrgang_ID: number | null
    Datum_bestanden: Date | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Ff_mitglied_lehrgangCountAggregateOutputType = {
    ID: number
    FF_Mitglied_ID: number
    Lehrgang_ID: number
    Datum_bestanden: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type Ff_mitglied_lehrgangAvgAggregateInputType = {
    ID?: true
    FF_Mitglied_ID?: true
    Lehrgang_ID?: true
  }

  export type Ff_mitglied_lehrgangSumAggregateInputType = {
    ID?: true
    FF_Mitglied_ID?: true
    Lehrgang_ID?: true
  }

  export type Ff_mitglied_lehrgangMinAggregateInputType = {
    ID?: true
    FF_Mitglied_ID?: true
    Lehrgang_ID?: true
    Datum_bestanden?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Ff_mitglied_lehrgangMaxAggregateInputType = {
    ID?: true
    FF_Mitglied_ID?: true
    Lehrgang_ID?: true
    Datum_bestanden?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Ff_mitglied_lehrgangCountAggregateInputType = {
    ID?: true
    FF_Mitglied_ID?: true
    Lehrgang_ID?: true
    Datum_bestanden?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type Ff_mitglied_lehrgangAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ff_mitglied_lehrgang to aggregate.
     */
    where?: ff_mitglied_lehrgangWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ff_mitglied_lehrgangs to fetch.
     */
    orderBy?: ff_mitglied_lehrgangOrderByWithRelationInput | ff_mitglied_lehrgangOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ff_mitglied_lehrgangWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ff_mitglied_lehrgangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ff_mitglied_lehrgangs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ff_mitglied_lehrgangs
    **/
    _count?: true | Ff_mitglied_lehrgangCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Ff_mitglied_lehrgangAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Ff_mitglied_lehrgangSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Ff_mitglied_lehrgangMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Ff_mitglied_lehrgangMaxAggregateInputType
  }

  export type GetFf_mitglied_lehrgangAggregateType<T extends Ff_mitglied_lehrgangAggregateArgs> = {
        [P in keyof T & keyof AggregateFf_mitglied_lehrgang]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFf_mitglied_lehrgang[P]>
      : GetScalarType<T[P], AggregateFf_mitglied_lehrgang[P]>
  }




  export type ff_mitglied_lehrgangGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ff_mitglied_lehrgangWhereInput
    orderBy?: ff_mitglied_lehrgangOrderByWithAggregationInput | ff_mitglied_lehrgangOrderByWithAggregationInput[]
    by: Ff_mitglied_lehrgangScalarFieldEnum[] | Ff_mitglied_lehrgangScalarFieldEnum
    having?: ff_mitglied_lehrgangScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Ff_mitglied_lehrgangCountAggregateInputType | true
    _avg?: Ff_mitglied_lehrgangAvgAggregateInputType
    _sum?: Ff_mitglied_lehrgangSumAggregateInputType
    _min?: Ff_mitglied_lehrgangMinAggregateInputType
    _max?: Ff_mitglied_lehrgangMaxAggregateInputType
  }

  export type Ff_mitglied_lehrgangGroupByOutputType = {
    ID: number
    FF_Mitglied_ID: number
    Lehrgang_ID: number
    Datum_bestanden: Date | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
    _count: Ff_mitglied_lehrgangCountAggregateOutputType | null
    _avg: Ff_mitglied_lehrgangAvgAggregateOutputType | null
    _sum: Ff_mitglied_lehrgangSumAggregateOutputType | null
    _min: Ff_mitglied_lehrgangMinAggregateOutputType | null
    _max: Ff_mitglied_lehrgangMaxAggregateOutputType | null
  }

  type GetFf_mitglied_lehrgangGroupByPayload<T extends ff_mitglied_lehrgangGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Ff_mitglied_lehrgangGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Ff_mitglied_lehrgangGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Ff_mitglied_lehrgangGroupByOutputType[P]>
            : GetScalarType<T[P], Ff_mitglied_lehrgangGroupByOutputType[P]>
        }
      >
    >


  export type ff_mitglied_lehrgangSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    FF_Mitglied_ID?: boolean
    Lehrgang_ID?: boolean
    Datum_bestanden?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
    lehrgang?: boolean | lehrgangDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ff_mitglied_lehrgang"]>

  export type ff_mitglied_lehrgangSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    FF_Mitglied_ID?: boolean
    Lehrgang_ID?: boolean
    Datum_bestanden?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
    lehrgang?: boolean | lehrgangDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ff_mitglied_lehrgang"]>

  export type ff_mitglied_lehrgangSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    FF_Mitglied_ID?: boolean
    Lehrgang_ID?: boolean
    Datum_bestanden?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
    lehrgang?: boolean | lehrgangDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ff_mitglied_lehrgang"]>

  export type ff_mitglied_lehrgangSelectScalar = {
    ID?: boolean
    FF_Mitglied_ID?: boolean
    Lehrgang_ID?: boolean
    Datum_bestanden?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type ff_mitglied_lehrgangOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "FF_Mitglied_ID" | "Lehrgang_ID" | "Datum_bestanden" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["ff_mitglied_lehrgang"]>
  export type ff_mitglied_lehrgangInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
    lehrgang?: boolean | lehrgangDefaultArgs<ExtArgs>
  }
  export type ff_mitglied_lehrgangIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
    lehrgang?: boolean | lehrgangDefaultArgs<ExtArgs>
  }
  export type ff_mitglied_lehrgangIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
    lehrgang?: boolean | lehrgangDefaultArgs<ExtArgs>
  }

  export type $ff_mitglied_lehrgangPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ff_mitglied_lehrgang"
    objects: {
      ff_mitglied: Prisma.$ff_mitgliedPayload<ExtArgs>
      lehrgang: Prisma.$lehrgangPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      FF_Mitglied_ID: number
      Lehrgang_ID: number
      Datum_bestanden: Date | null
      Erstellt_am: Date | null
      Geaendert_am: Date | null
    }, ExtArgs["result"]["ff_mitglied_lehrgang"]>
    composites: {}
  }

  type ff_mitglied_lehrgangGetPayload<S extends boolean | null | undefined | ff_mitglied_lehrgangDefaultArgs> = $Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload, S>

  type ff_mitglied_lehrgangCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ff_mitglied_lehrgangFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Ff_mitglied_lehrgangCountAggregateInputType | true
    }

  export interface ff_mitglied_lehrgangDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ff_mitglied_lehrgang'], meta: { name: 'ff_mitglied_lehrgang' } }
    /**
     * Find zero or one Ff_mitglied_lehrgang that matches the filter.
     * @param {ff_mitglied_lehrgangFindUniqueArgs} args - Arguments to find a Ff_mitglied_lehrgang
     * @example
     * // Get one Ff_mitglied_lehrgang
     * const ff_mitglied_lehrgang = await prisma.ff_mitglied_lehrgang.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ff_mitglied_lehrgangFindUniqueArgs>(args: SelectSubset<T, ff_mitglied_lehrgangFindUniqueArgs<ExtArgs>>): Prisma__ff_mitglied_lehrgangClient<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ff_mitglied_lehrgang that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ff_mitglied_lehrgangFindUniqueOrThrowArgs} args - Arguments to find a Ff_mitglied_lehrgang
     * @example
     * // Get one Ff_mitglied_lehrgang
     * const ff_mitglied_lehrgang = await prisma.ff_mitglied_lehrgang.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ff_mitglied_lehrgangFindUniqueOrThrowArgs>(args: SelectSubset<T, ff_mitglied_lehrgangFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ff_mitglied_lehrgangClient<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ff_mitglied_lehrgang that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ff_mitglied_lehrgangFindFirstArgs} args - Arguments to find a Ff_mitglied_lehrgang
     * @example
     * // Get one Ff_mitglied_lehrgang
     * const ff_mitglied_lehrgang = await prisma.ff_mitglied_lehrgang.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ff_mitglied_lehrgangFindFirstArgs>(args?: SelectSubset<T, ff_mitglied_lehrgangFindFirstArgs<ExtArgs>>): Prisma__ff_mitglied_lehrgangClient<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ff_mitglied_lehrgang that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ff_mitglied_lehrgangFindFirstOrThrowArgs} args - Arguments to find a Ff_mitglied_lehrgang
     * @example
     * // Get one Ff_mitglied_lehrgang
     * const ff_mitglied_lehrgang = await prisma.ff_mitglied_lehrgang.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ff_mitglied_lehrgangFindFirstOrThrowArgs>(args?: SelectSubset<T, ff_mitglied_lehrgangFindFirstOrThrowArgs<ExtArgs>>): Prisma__ff_mitglied_lehrgangClient<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ff_mitglied_lehrgangs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ff_mitglied_lehrgangFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ff_mitglied_lehrgangs
     * const ff_mitglied_lehrgangs = await prisma.ff_mitglied_lehrgang.findMany()
     * 
     * // Get first 10 Ff_mitglied_lehrgangs
     * const ff_mitglied_lehrgangs = await prisma.ff_mitglied_lehrgang.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const ff_mitglied_lehrgangWithIDOnly = await prisma.ff_mitglied_lehrgang.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends ff_mitglied_lehrgangFindManyArgs>(args?: SelectSubset<T, ff_mitglied_lehrgangFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ff_mitglied_lehrgang.
     * @param {ff_mitglied_lehrgangCreateArgs} args - Arguments to create a Ff_mitglied_lehrgang.
     * @example
     * // Create one Ff_mitglied_lehrgang
     * const Ff_mitglied_lehrgang = await prisma.ff_mitglied_lehrgang.create({
     *   data: {
     *     // ... data to create a Ff_mitglied_lehrgang
     *   }
     * })
     * 
     */
    create<T extends ff_mitglied_lehrgangCreateArgs>(args: SelectSubset<T, ff_mitglied_lehrgangCreateArgs<ExtArgs>>): Prisma__ff_mitglied_lehrgangClient<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ff_mitglied_lehrgangs.
     * @param {ff_mitglied_lehrgangCreateManyArgs} args - Arguments to create many Ff_mitglied_lehrgangs.
     * @example
     * // Create many Ff_mitglied_lehrgangs
     * const ff_mitglied_lehrgang = await prisma.ff_mitglied_lehrgang.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ff_mitglied_lehrgangCreateManyArgs>(args?: SelectSubset<T, ff_mitglied_lehrgangCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ff_mitglied_lehrgangs and returns the data saved in the database.
     * @param {ff_mitglied_lehrgangCreateManyAndReturnArgs} args - Arguments to create many Ff_mitglied_lehrgangs.
     * @example
     * // Create many Ff_mitglied_lehrgangs
     * const ff_mitglied_lehrgang = await prisma.ff_mitglied_lehrgang.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ff_mitglied_lehrgangs and only return the `ID`
     * const ff_mitglied_lehrgangWithIDOnly = await prisma.ff_mitglied_lehrgang.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ff_mitglied_lehrgangCreateManyAndReturnArgs>(args?: SelectSubset<T, ff_mitglied_lehrgangCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ff_mitglied_lehrgang.
     * @param {ff_mitglied_lehrgangDeleteArgs} args - Arguments to delete one Ff_mitglied_lehrgang.
     * @example
     * // Delete one Ff_mitglied_lehrgang
     * const Ff_mitglied_lehrgang = await prisma.ff_mitglied_lehrgang.delete({
     *   where: {
     *     // ... filter to delete one Ff_mitglied_lehrgang
     *   }
     * })
     * 
     */
    delete<T extends ff_mitglied_lehrgangDeleteArgs>(args: SelectSubset<T, ff_mitglied_lehrgangDeleteArgs<ExtArgs>>): Prisma__ff_mitglied_lehrgangClient<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ff_mitglied_lehrgang.
     * @param {ff_mitglied_lehrgangUpdateArgs} args - Arguments to update one Ff_mitglied_lehrgang.
     * @example
     * // Update one Ff_mitglied_lehrgang
     * const ff_mitglied_lehrgang = await prisma.ff_mitglied_lehrgang.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ff_mitglied_lehrgangUpdateArgs>(args: SelectSubset<T, ff_mitglied_lehrgangUpdateArgs<ExtArgs>>): Prisma__ff_mitglied_lehrgangClient<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ff_mitglied_lehrgangs.
     * @param {ff_mitglied_lehrgangDeleteManyArgs} args - Arguments to filter Ff_mitglied_lehrgangs to delete.
     * @example
     * // Delete a few Ff_mitglied_lehrgangs
     * const { count } = await prisma.ff_mitglied_lehrgang.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ff_mitglied_lehrgangDeleteManyArgs>(args?: SelectSubset<T, ff_mitglied_lehrgangDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ff_mitglied_lehrgangs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ff_mitglied_lehrgangUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ff_mitglied_lehrgangs
     * const ff_mitglied_lehrgang = await prisma.ff_mitglied_lehrgang.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ff_mitglied_lehrgangUpdateManyArgs>(args: SelectSubset<T, ff_mitglied_lehrgangUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ff_mitglied_lehrgangs and returns the data updated in the database.
     * @param {ff_mitglied_lehrgangUpdateManyAndReturnArgs} args - Arguments to update many Ff_mitglied_lehrgangs.
     * @example
     * // Update many Ff_mitglied_lehrgangs
     * const ff_mitglied_lehrgang = await prisma.ff_mitglied_lehrgang.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ff_mitglied_lehrgangs and only return the `ID`
     * const ff_mitglied_lehrgangWithIDOnly = await prisma.ff_mitglied_lehrgang.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ff_mitglied_lehrgangUpdateManyAndReturnArgs>(args: SelectSubset<T, ff_mitglied_lehrgangUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ff_mitglied_lehrgang.
     * @param {ff_mitglied_lehrgangUpsertArgs} args - Arguments to update or create a Ff_mitglied_lehrgang.
     * @example
     * // Update or create a Ff_mitglied_lehrgang
     * const ff_mitglied_lehrgang = await prisma.ff_mitglied_lehrgang.upsert({
     *   create: {
     *     // ... data to create a Ff_mitglied_lehrgang
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ff_mitglied_lehrgang we want to update
     *   }
     * })
     */
    upsert<T extends ff_mitglied_lehrgangUpsertArgs>(args: SelectSubset<T, ff_mitglied_lehrgangUpsertArgs<ExtArgs>>): Prisma__ff_mitglied_lehrgangClient<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ff_mitglied_lehrgangs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ff_mitglied_lehrgangCountArgs} args - Arguments to filter Ff_mitglied_lehrgangs to count.
     * @example
     * // Count the number of Ff_mitglied_lehrgangs
     * const count = await prisma.ff_mitglied_lehrgang.count({
     *   where: {
     *     // ... the filter for the Ff_mitglied_lehrgangs we want to count
     *   }
     * })
    **/
    count<T extends ff_mitglied_lehrgangCountArgs>(
      args?: Subset<T, ff_mitglied_lehrgangCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Ff_mitglied_lehrgangCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ff_mitglied_lehrgang.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Ff_mitglied_lehrgangAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Ff_mitglied_lehrgangAggregateArgs>(args: Subset<T, Ff_mitglied_lehrgangAggregateArgs>): Prisma.PrismaPromise<GetFf_mitglied_lehrgangAggregateType<T>>

    /**
     * Group by Ff_mitglied_lehrgang.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ff_mitglied_lehrgangGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ff_mitglied_lehrgangGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ff_mitglied_lehrgangGroupByArgs['orderBy'] }
        : { orderBy?: ff_mitglied_lehrgangGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ff_mitglied_lehrgangGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFf_mitglied_lehrgangGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ff_mitglied_lehrgang model
   */
  readonly fields: ff_mitglied_lehrgangFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ff_mitglied_lehrgang.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ff_mitglied_lehrgangClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ff_mitglied<T extends ff_mitgliedDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ff_mitgliedDefaultArgs<ExtArgs>>): Prisma__ff_mitgliedClient<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lehrgang<T extends lehrgangDefaultArgs<ExtArgs> = {}>(args?: Subset<T, lehrgangDefaultArgs<ExtArgs>>): Prisma__lehrgangClient<$Result.GetResult<Prisma.$lehrgangPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ff_mitglied_lehrgang model
   */
  interface ff_mitglied_lehrgangFieldRefs {
    readonly ID: FieldRef<"ff_mitglied_lehrgang", 'Int'>
    readonly FF_Mitglied_ID: FieldRef<"ff_mitglied_lehrgang", 'Int'>
    readonly Lehrgang_ID: FieldRef<"ff_mitglied_lehrgang", 'Int'>
    readonly Datum_bestanden: FieldRef<"ff_mitglied_lehrgang", 'DateTime'>
    readonly Erstellt_am: FieldRef<"ff_mitglied_lehrgang", 'DateTime'>
    readonly Geaendert_am: FieldRef<"ff_mitglied_lehrgang", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ff_mitglied_lehrgang findUnique
   */
  export type ff_mitglied_lehrgangFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangInclude<ExtArgs> | null
    /**
     * Filter, which ff_mitglied_lehrgang to fetch.
     */
    where: ff_mitglied_lehrgangWhereUniqueInput
  }

  /**
   * ff_mitglied_lehrgang findUniqueOrThrow
   */
  export type ff_mitglied_lehrgangFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangInclude<ExtArgs> | null
    /**
     * Filter, which ff_mitglied_lehrgang to fetch.
     */
    where: ff_mitglied_lehrgangWhereUniqueInput
  }

  /**
   * ff_mitglied_lehrgang findFirst
   */
  export type ff_mitglied_lehrgangFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangInclude<ExtArgs> | null
    /**
     * Filter, which ff_mitglied_lehrgang to fetch.
     */
    where?: ff_mitglied_lehrgangWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ff_mitglied_lehrgangs to fetch.
     */
    orderBy?: ff_mitglied_lehrgangOrderByWithRelationInput | ff_mitglied_lehrgangOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ff_mitglied_lehrgangs.
     */
    cursor?: ff_mitglied_lehrgangWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ff_mitglied_lehrgangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ff_mitglied_lehrgangs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ff_mitglied_lehrgangs.
     */
    distinct?: Ff_mitglied_lehrgangScalarFieldEnum | Ff_mitglied_lehrgangScalarFieldEnum[]
  }

  /**
   * ff_mitglied_lehrgang findFirstOrThrow
   */
  export type ff_mitglied_lehrgangFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangInclude<ExtArgs> | null
    /**
     * Filter, which ff_mitglied_lehrgang to fetch.
     */
    where?: ff_mitglied_lehrgangWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ff_mitglied_lehrgangs to fetch.
     */
    orderBy?: ff_mitglied_lehrgangOrderByWithRelationInput | ff_mitglied_lehrgangOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ff_mitglied_lehrgangs.
     */
    cursor?: ff_mitglied_lehrgangWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ff_mitglied_lehrgangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ff_mitglied_lehrgangs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ff_mitglied_lehrgangs.
     */
    distinct?: Ff_mitglied_lehrgangScalarFieldEnum | Ff_mitglied_lehrgangScalarFieldEnum[]
  }

  /**
   * ff_mitglied_lehrgang findMany
   */
  export type ff_mitglied_lehrgangFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangInclude<ExtArgs> | null
    /**
     * Filter, which ff_mitglied_lehrgangs to fetch.
     */
    where?: ff_mitglied_lehrgangWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ff_mitglied_lehrgangs to fetch.
     */
    orderBy?: ff_mitglied_lehrgangOrderByWithRelationInput | ff_mitglied_lehrgangOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ff_mitglied_lehrgangs.
     */
    cursor?: ff_mitglied_lehrgangWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ff_mitglied_lehrgangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ff_mitglied_lehrgangs.
     */
    skip?: number
    distinct?: Ff_mitglied_lehrgangScalarFieldEnum | Ff_mitglied_lehrgangScalarFieldEnum[]
  }

  /**
   * ff_mitglied_lehrgang create
   */
  export type ff_mitglied_lehrgangCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangInclude<ExtArgs> | null
    /**
     * The data needed to create a ff_mitglied_lehrgang.
     */
    data: XOR<ff_mitglied_lehrgangCreateInput, ff_mitglied_lehrgangUncheckedCreateInput>
  }

  /**
   * ff_mitglied_lehrgang createMany
   */
  export type ff_mitglied_lehrgangCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ff_mitglied_lehrgangs.
     */
    data: ff_mitglied_lehrgangCreateManyInput | ff_mitglied_lehrgangCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ff_mitglied_lehrgang createManyAndReturn
   */
  export type ff_mitglied_lehrgangCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * The data used to create many ff_mitglied_lehrgangs.
     */
    data: ff_mitglied_lehrgangCreateManyInput | ff_mitglied_lehrgangCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ff_mitglied_lehrgang update
   */
  export type ff_mitglied_lehrgangUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangInclude<ExtArgs> | null
    /**
     * The data needed to update a ff_mitglied_lehrgang.
     */
    data: XOR<ff_mitglied_lehrgangUpdateInput, ff_mitglied_lehrgangUncheckedUpdateInput>
    /**
     * Choose, which ff_mitglied_lehrgang to update.
     */
    where: ff_mitglied_lehrgangWhereUniqueInput
  }

  /**
   * ff_mitglied_lehrgang updateMany
   */
  export type ff_mitglied_lehrgangUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ff_mitglied_lehrgangs.
     */
    data: XOR<ff_mitglied_lehrgangUpdateManyMutationInput, ff_mitglied_lehrgangUncheckedUpdateManyInput>
    /**
     * Filter which ff_mitglied_lehrgangs to update
     */
    where?: ff_mitglied_lehrgangWhereInput
    /**
     * Limit how many ff_mitglied_lehrgangs to update.
     */
    limit?: number
  }

  /**
   * ff_mitglied_lehrgang updateManyAndReturn
   */
  export type ff_mitglied_lehrgangUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * The data used to update ff_mitglied_lehrgangs.
     */
    data: XOR<ff_mitglied_lehrgangUpdateManyMutationInput, ff_mitglied_lehrgangUncheckedUpdateManyInput>
    /**
     * Filter which ff_mitglied_lehrgangs to update
     */
    where?: ff_mitglied_lehrgangWhereInput
    /**
     * Limit how many ff_mitglied_lehrgangs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ff_mitglied_lehrgang upsert
   */
  export type ff_mitglied_lehrgangUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangInclude<ExtArgs> | null
    /**
     * The filter to search for the ff_mitglied_lehrgang to update in case it exists.
     */
    where: ff_mitglied_lehrgangWhereUniqueInput
    /**
     * In case the ff_mitglied_lehrgang found by the `where` argument doesn't exist, create a new ff_mitglied_lehrgang with this data.
     */
    create: XOR<ff_mitglied_lehrgangCreateInput, ff_mitglied_lehrgangUncheckedCreateInput>
    /**
     * In case the ff_mitglied_lehrgang was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ff_mitglied_lehrgangUpdateInput, ff_mitglied_lehrgangUncheckedUpdateInput>
  }

  /**
   * ff_mitglied_lehrgang delete
   */
  export type ff_mitglied_lehrgangDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangInclude<ExtArgs> | null
    /**
     * Filter which ff_mitglied_lehrgang to delete.
     */
    where: ff_mitglied_lehrgangWhereUniqueInput
  }

  /**
   * ff_mitglied_lehrgang deleteMany
   */
  export type ff_mitglied_lehrgangDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ff_mitglied_lehrgangs to delete
     */
    where?: ff_mitglied_lehrgangWhereInput
    /**
     * Limit how many ff_mitglied_lehrgangs to delete.
     */
    limit?: number
  }

  /**
   * ff_mitglied_lehrgang without action
   */
  export type ff_mitglied_lehrgangDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangInclude<ExtArgs> | null
  }


  /**
   * Model funktion_ff
   */

  export type AggregateFunktion_ff = {
    _count: Funktion_ffCountAggregateOutputType | null
    _avg: Funktion_ffAvgAggregateOutputType | null
    _sum: Funktion_ffSumAggregateOutputType | null
    _min: Funktion_ffMinAggregateOutputType | null
    _max: Funktion_ffMaxAggregateOutputType | null
  }

  export type Funktion_ffAvgAggregateOutputType = {
    ID: number | null
  }

  export type Funktion_ffSumAggregateOutputType = {
    ID: number | null
  }

  export type Funktion_ffMinAggregateOutputType = {
    ID: number | null
    Name: string | null
    Ist_Admin: boolean | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Funktion_ffMaxAggregateOutputType = {
    ID: number | null
    Name: string | null
    Ist_Admin: boolean | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Funktion_ffCountAggregateOutputType = {
    ID: number
    Name: number
    Ist_Admin: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type Funktion_ffAvgAggregateInputType = {
    ID?: true
  }

  export type Funktion_ffSumAggregateInputType = {
    ID?: true
  }

  export type Funktion_ffMinAggregateInputType = {
    ID?: true
    Name?: true
    Ist_Admin?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Funktion_ffMaxAggregateInputType = {
    ID?: true
    Name?: true
    Ist_Admin?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Funktion_ffCountAggregateInputType = {
    ID?: true
    Name?: true
    Ist_Admin?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type Funktion_ffAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which funktion_ff to aggregate.
     */
    where?: funktion_ffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of funktion_ffs to fetch.
     */
    orderBy?: funktion_ffOrderByWithRelationInput | funktion_ffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: funktion_ffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` funktion_ffs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` funktion_ffs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned funktion_ffs
    **/
    _count?: true | Funktion_ffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Funktion_ffAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Funktion_ffSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Funktion_ffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Funktion_ffMaxAggregateInputType
  }

  export type GetFunktion_ffAggregateType<T extends Funktion_ffAggregateArgs> = {
        [P in keyof T & keyof AggregateFunktion_ff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFunktion_ff[P]>
      : GetScalarType<T[P], AggregateFunktion_ff[P]>
  }




  export type funktion_ffGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: funktion_ffWhereInput
    orderBy?: funktion_ffOrderByWithAggregationInput | funktion_ffOrderByWithAggregationInput[]
    by: Funktion_ffScalarFieldEnum[] | Funktion_ffScalarFieldEnum
    having?: funktion_ffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Funktion_ffCountAggregateInputType | true
    _avg?: Funktion_ffAvgAggregateInputType
    _sum?: Funktion_ffSumAggregateInputType
    _min?: Funktion_ffMinAggregateInputType
    _max?: Funktion_ffMaxAggregateInputType
  }

  export type Funktion_ffGroupByOutputType = {
    ID: number
    Name: string
    Ist_Admin: boolean | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
    _count: Funktion_ffCountAggregateOutputType | null
    _avg: Funktion_ffAvgAggregateOutputType | null
    _sum: Funktion_ffSumAggregateOutputType | null
    _min: Funktion_ffMinAggregateOutputType | null
    _max: Funktion_ffMaxAggregateOutputType | null
  }

  type GetFunktion_ffGroupByPayload<T extends funktion_ffGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Funktion_ffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Funktion_ffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Funktion_ffGroupByOutputType[P]>
            : GetScalarType<T[P], Funktion_ffGroupByOutputType[P]>
        }
      >
    >


  export type funktion_ffSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Name?: boolean
    Ist_Admin?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["funktion_ff"]>

  export type funktion_ffSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Name?: boolean
    Ist_Admin?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["funktion_ff"]>

  export type funktion_ffSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Name?: boolean
    Ist_Admin?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["funktion_ff"]>

  export type funktion_ffSelectScalar = {
    ID?: boolean
    Name?: boolean
    Ist_Admin?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type funktion_ffOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Name" | "Ist_Admin" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["funktion_ff"]>

  export type $funktion_ffPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "funktion_ff"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Name: string
      Ist_Admin: boolean | null
      Erstellt_am: Date | null
      Geaendert_am: Date | null
    }, ExtArgs["result"]["funktion_ff"]>
    composites: {}
  }

  type funktion_ffGetPayload<S extends boolean | null | undefined | funktion_ffDefaultArgs> = $Result.GetResult<Prisma.$funktion_ffPayload, S>

  type funktion_ffCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<funktion_ffFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Funktion_ffCountAggregateInputType | true
    }

  export interface funktion_ffDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['funktion_ff'], meta: { name: 'funktion_ff' } }
    /**
     * Find zero or one Funktion_ff that matches the filter.
     * @param {funktion_ffFindUniqueArgs} args - Arguments to find a Funktion_ff
     * @example
     * // Get one Funktion_ff
     * const funktion_ff = await prisma.funktion_ff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends funktion_ffFindUniqueArgs>(args: SelectSubset<T, funktion_ffFindUniqueArgs<ExtArgs>>): Prisma__funktion_ffClient<$Result.GetResult<Prisma.$funktion_ffPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Funktion_ff that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {funktion_ffFindUniqueOrThrowArgs} args - Arguments to find a Funktion_ff
     * @example
     * // Get one Funktion_ff
     * const funktion_ff = await prisma.funktion_ff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends funktion_ffFindUniqueOrThrowArgs>(args: SelectSubset<T, funktion_ffFindUniqueOrThrowArgs<ExtArgs>>): Prisma__funktion_ffClient<$Result.GetResult<Prisma.$funktion_ffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Funktion_ff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funktion_ffFindFirstArgs} args - Arguments to find a Funktion_ff
     * @example
     * // Get one Funktion_ff
     * const funktion_ff = await prisma.funktion_ff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends funktion_ffFindFirstArgs>(args?: SelectSubset<T, funktion_ffFindFirstArgs<ExtArgs>>): Prisma__funktion_ffClient<$Result.GetResult<Prisma.$funktion_ffPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Funktion_ff that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funktion_ffFindFirstOrThrowArgs} args - Arguments to find a Funktion_ff
     * @example
     * // Get one Funktion_ff
     * const funktion_ff = await prisma.funktion_ff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends funktion_ffFindFirstOrThrowArgs>(args?: SelectSubset<T, funktion_ffFindFirstOrThrowArgs<ExtArgs>>): Prisma__funktion_ffClient<$Result.GetResult<Prisma.$funktion_ffPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Funktion_ffs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funktion_ffFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Funktion_ffs
     * const funktion_ffs = await prisma.funktion_ff.findMany()
     * 
     * // Get first 10 Funktion_ffs
     * const funktion_ffs = await prisma.funktion_ff.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const funktion_ffWithIDOnly = await prisma.funktion_ff.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends funktion_ffFindManyArgs>(args?: SelectSubset<T, funktion_ffFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$funktion_ffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Funktion_ff.
     * @param {funktion_ffCreateArgs} args - Arguments to create a Funktion_ff.
     * @example
     * // Create one Funktion_ff
     * const Funktion_ff = await prisma.funktion_ff.create({
     *   data: {
     *     // ... data to create a Funktion_ff
     *   }
     * })
     * 
     */
    create<T extends funktion_ffCreateArgs>(args: SelectSubset<T, funktion_ffCreateArgs<ExtArgs>>): Prisma__funktion_ffClient<$Result.GetResult<Prisma.$funktion_ffPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Funktion_ffs.
     * @param {funktion_ffCreateManyArgs} args - Arguments to create many Funktion_ffs.
     * @example
     * // Create many Funktion_ffs
     * const funktion_ff = await prisma.funktion_ff.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends funktion_ffCreateManyArgs>(args?: SelectSubset<T, funktion_ffCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Funktion_ffs and returns the data saved in the database.
     * @param {funktion_ffCreateManyAndReturnArgs} args - Arguments to create many Funktion_ffs.
     * @example
     * // Create many Funktion_ffs
     * const funktion_ff = await prisma.funktion_ff.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Funktion_ffs and only return the `ID`
     * const funktion_ffWithIDOnly = await prisma.funktion_ff.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends funktion_ffCreateManyAndReturnArgs>(args?: SelectSubset<T, funktion_ffCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$funktion_ffPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Funktion_ff.
     * @param {funktion_ffDeleteArgs} args - Arguments to delete one Funktion_ff.
     * @example
     * // Delete one Funktion_ff
     * const Funktion_ff = await prisma.funktion_ff.delete({
     *   where: {
     *     // ... filter to delete one Funktion_ff
     *   }
     * })
     * 
     */
    delete<T extends funktion_ffDeleteArgs>(args: SelectSubset<T, funktion_ffDeleteArgs<ExtArgs>>): Prisma__funktion_ffClient<$Result.GetResult<Prisma.$funktion_ffPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Funktion_ff.
     * @param {funktion_ffUpdateArgs} args - Arguments to update one Funktion_ff.
     * @example
     * // Update one Funktion_ff
     * const funktion_ff = await prisma.funktion_ff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends funktion_ffUpdateArgs>(args: SelectSubset<T, funktion_ffUpdateArgs<ExtArgs>>): Prisma__funktion_ffClient<$Result.GetResult<Prisma.$funktion_ffPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Funktion_ffs.
     * @param {funktion_ffDeleteManyArgs} args - Arguments to filter Funktion_ffs to delete.
     * @example
     * // Delete a few Funktion_ffs
     * const { count } = await prisma.funktion_ff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends funktion_ffDeleteManyArgs>(args?: SelectSubset<T, funktion_ffDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funktion_ffs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funktion_ffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Funktion_ffs
     * const funktion_ff = await prisma.funktion_ff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends funktion_ffUpdateManyArgs>(args: SelectSubset<T, funktion_ffUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funktion_ffs and returns the data updated in the database.
     * @param {funktion_ffUpdateManyAndReturnArgs} args - Arguments to update many Funktion_ffs.
     * @example
     * // Update many Funktion_ffs
     * const funktion_ff = await prisma.funktion_ff.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Funktion_ffs and only return the `ID`
     * const funktion_ffWithIDOnly = await prisma.funktion_ff.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends funktion_ffUpdateManyAndReturnArgs>(args: SelectSubset<T, funktion_ffUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$funktion_ffPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Funktion_ff.
     * @param {funktion_ffUpsertArgs} args - Arguments to update or create a Funktion_ff.
     * @example
     * // Update or create a Funktion_ff
     * const funktion_ff = await prisma.funktion_ff.upsert({
     *   create: {
     *     // ... data to create a Funktion_ff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Funktion_ff we want to update
     *   }
     * })
     */
    upsert<T extends funktion_ffUpsertArgs>(args: SelectSubset<T, funktion_ffUpsertArgs<ExtArgs>>): Prisma__funktion_ffClient<$Result.GetResult<Prisma.$funktion_ffPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Funktion_ffs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funktion_ffCountArgs} args - Arguments to filter Funktion_ffs to count.
     * @example
     * // Count the number of Funktion_ffs
     * const count = await prisma.funktion_ff.count({
     *   where: {
     *     // ... the filter for the Funktion_ffs we want to count
     *   }
     * })
    **/
    count<T extends funktion_ffCountArgs>(
      args?: Subset<T, funktion_ffCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Funktion_ffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Funktion_ff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Funktion_ffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Funktion_ffAggregateArgs>(args: Subset<T, Funktion_ffAggregateArgs>): Prisma.PrismaPromise<GetFunktion_ffAggregateType<T>>

    /**
     * Group by Funktion_ff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funktion_ffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends funktion_ffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: funktion_ffGroupByArgs['orderBy'] }
        : { orderBy?: funktion_ffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, funktion_ffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFunktion_ffGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the funktion_ff model
   */
  readonly fields: funktion_ffFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for funktion_ff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__funktion_ffClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the funktion_ff model
   */
  interface funktion_ffFieldRefs {
    readonly ID: FieldRef<"funktion_ff", 'Int'>
    readonly Name: FieldRef<"funktion_ff", 'String'>
    readonly Ist_Admin: FieldRef<"funktion_ff", 'Boolean'>
    readonly Erstellt_am: FieldRef<"funktion_ff", 'DateTime'>
    readonly Geaendert_am: FieldRef<"funktion_ff", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * funktion_ff findUnique
   */
  export type funktion_ffFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_ff
     */
    select?: funktion_ffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_ff
     */
    omit?: funktion_ffOmit<ExtArgs> | null
    /**
     * Filter, which funktion_ff to fetch.
     */
    where: funktion_ffWhereUniqueInput
  }

  /**
   * funktion_ff findUniqueOrThrow
   */
  export type funktion_ffFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_ff
     */
    select?: funktion_ffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_ff
     */
    omit?: funktion_ffOmit<ExtArgs> | null
    /**
     * Filter, which funktion_ff to fetch.
     */
    where: funktion_ffWhereUniqueInput
  }

  /**
   * funktion_ff findFirst
   */
  export type funktion_ffFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_ff
     */
    select?: funktion_ffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_ff
     */
    omit?: funktion_ffOmit<ExtArgs> | null
    /**
     * Filter, which funktion_ff to fetch.
     */
    where?: funktion_ffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of funktion_ffs to fetch.
     */
    orderBy?: funktion_ffOrderByWithRelationInput | funktion_ffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for funktion_ffs.
     */
    cursor?: funktion_ffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` funktion_ffs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` funktion_ffs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of funktion_ffs.
     */
    distinct?: Funktion_ffScalarFieldEnum | Funktion_ffScalarFieldEnum[]
  }

  /**
   * funktion_ff findFirstOrThrow
   */
  export type funktion_ffFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_ff
     */
    select?: funktion_ffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_ff
     */
    omit?: funktion_ffOmit<ExtArgs> | null
    /**
     * Filter, which funktion_ff to fetch.
     */
    where?: funktion_ffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of funktion_ffs to fetch.
     */
    orderBy?: funktion_ffOrderByWithRelationInput | funktion_ffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for funktion_ffs.
     */
    cursor?: funktion_ffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` funktion_ffs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` funktion_ffs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of funktion_ffs.
     */
    distinct?: Funktion_ffScalarFieldEnum | Funktion_ffScalarFieldEnum[]
  }

  /**
   * funktion_ff findMany
   */
  export type funktion_ffFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_ff
     */
    select?: funktion_ffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_ff
     */
    omit?: funktion_ffOmit<ExtArgs> | null
    /**
     * Filter, which funktion_ffs to fetch.
     */
    where?: funktion_ffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of funktion_ffs to fetch.
     */
    orderBy?: funktion_ffOrderByWithRelationInput | funktion_ffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing funktion_ffs.
     */
    cursor?: funktion_ffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` funktion_ffs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` funktion_ffs.
     */
    skip?: number
    distinct?: Funktion_ffScalarFieldEnum | Funktion_ffScalarFieldEnum[]
  }

  /**
   * funktion_ff create
   */
  export type funktion_ffCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_ff
     */
    select?: funktion_ffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_ff
     */
    omit?: funktion_ffOmit<ExtArgs> | null
    /**
     * The data needed to create a funktion_ff.
     */
    data: XOR<funktion_ffCreateInput, funktion_ffUncheckedCreateInput>
  }

  /**
   * funktion_ff createMany
   */
  export type funktion_ffCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many funktion_ffs.
     */
    data: funktion_ffCreateManyInput | funktion_ffCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * funktion_ff createManyAndReturn
   */
  export type funktion_ffCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_ff
     */
    select?: funktion_ffSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_ff
     */
    omit?: funktion_ffOmit<ExtArgs> | null
    /**
     * The data used to create many funktion_ffs.
     */
    data: funktion_ffCreateManyInput | funktion_ffCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * funktion_ff update
   */
  export type funktion_ffUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_ff
     */
    select?: funktion_ffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_ff
     */
    omit?: funktion_ffOmit<ExtArgs> | null
    /**
     * The data needed to update a funktion_ff.
     */
    data: XOR<funktion_ffUpdateInput, funktion_ffUncheckedUpdateInput>
    /**
     * Choose, which funktion_ff to update.
     */
    where: funktion_ffWhereUniqueInput
  }

  /**
   * funktion_ff updateMany
   */
  export type funktion_ffUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update funktion_ffs.
     */
    data: XOR<funktion_ffUpdateManyMutationInput, funktion_ffUncheckedUpdateManyInput>
    /**
     * Filter which funktion_ffs to update
     */
    where?: funktion_ffWhereInput
    /**
     * Limit how many funktion_ffs to update.
     */
    limit?: number
  }

  /**
   * funktion_ff updateManyAndReturn
   */
  export type funktion_ffUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_ff
     */
    select?: funktion_ffSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_ff
     */
    omit?: funktion_ffOmit<ExtArgs> | null
    /**
     * The data used to update funktion_ffs.
     */
    data: XOR<funktion_ffUpdateManyMutationInput, funktion_ffUncheckedUpdateManyInput>
    /**
     * Filter which funktion_ffs to update
     */
    where?: funktion_ffWhereInput
    /**
     * Limit how many funktion_ffs to update.
     */
    limit?: number
  }

  /**
   * funktion_ff upsert
   */
  export type funktion_ffUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_ff
     */
    select?: funktion_ffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_ff
     */
    omit?: funktion_ffOmit<ExtArgs> | null
    /**
     * The filter to search for the funktion_ff to update in case it exists.
     */
    where: funktion_ffWhereUniqueInput
    /**
     * In case the funktion_ff found by the `where` argument doesn't exist, create a new funktion_ff with this data.
     */
    create: XOR<funktion_ffCreateInput, funktion_ffUncheckedCreateInput>
    /**
     * In case the funktion_ff was found with the provided `where` argument, update it with this data.
     */
    update: XOR<funktion_ffUpdateInput, funktion_ffUncheckedUpdateInput>
  }

  /**
   * funktion_ff delete
   */
  export type funktion_ffDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_ff
     */
    select?: funktion_ffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_ff
     */
    omit?: funktion_ffOmit<ExtArgs> | null
    /**
     * Filter which funktion_ff to delete.
     */
    where: funktion_ffWhereUniqueInput
  }

  /**
   * funktion_ff deleteMany
   */
  export type funktion_ffDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which funktion_ffs to delete
     */
    where?: funktion_ffWhereInput
    /**
     * Limit how many funktion_ffs to delete.
     */
    limit?: number
  }

  /**
   * funktion_ff without action
   */
  export type funktion_ffDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_ff
     */
    select?: funktion_ffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_ff
     */
    omit?: funktion_ffOmit<ExtArgs> | null
  }


  /**
   * Model funktion_jf
   */

  export type AggregateFunktion_jf = {
    _count: Funktion_jfCountAggregateOutputType | null
    _avg: Funktion_jfAvgAggregateOutputType | null
    _sum: Funktion_jfSumAggregateOutputType | null
    _min: Funktion_jfMinAggregateOutputType | null
    _max: Funktion_jfMaxAggregateOutputType | null
  }

  export type Funktion_jfAvgAggregateOutputType = {
    ID: number | null
  }

  export type Funktion_jfSumAggregateOutputType = {
    ID: number | null
  }

  export type Funktion_jfMinAggregateOutputType = {
    ID: number | null
    Name: string | null
    Ist_Admin: boolean | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Funktion_jfMaxAggregateOutputType = {
    ID: number | null
    Name: string | null
    Ist_Admin: boolean | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Funktion_jfCountAggregateOutputType = {
    ID: number
    Name: number
    Ist_Admin: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type Funktion_jfAvgAggregateInputType = {
    ID?: true
  }

  export type Funktion_jfSumAggregateInputType = {
    ID?: true
  }

  export type Funktion_jfMinAggregateInputType = {
    ID?: true
    Name?: true
    Ist_Admin?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Funktion_jfMaxAggregateInputType = {
    ID?: true
    Name?: true
    Ist_Admin?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Funktion_jfCountAggregateInputType = {
    ID?: true
    Name?: true
    Ist_Admin?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type Funktion_jfAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which funktion_jf to aggregate.
     */
    where?: funktion_jfWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of funktion_jfs to fetch.
     */
    orderBy?: funktion_jfOrderByWithRelationInput | funktion_jfOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: funktion_jfWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` funktion_jfs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` funktion_jfs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned funktion_jfs
    **/
    _count?: true | Funktion_jfCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Funktion_jfAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Funktion_jfSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Funktion_jfMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Funktion_jfMaxAggregateInputType
  }

  export type GetFunktion_jfAggregateType<T extends Funktion_jfAggregateArgs> = {
        [P in keyof T & keyof AggregateFunktion_jf]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFunktion_jf[P]>
      : GetScalarType<T[P], AggregateFunktion_jf[P]>
  }




  export type funktion_jfGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: funktion_jfWhereInput
    orderBy?: funktion_jfOrderByWithAggregationInput | funktion_jfOrderByWithAggregationInput[]
    by: Funktion_jfScalarFieldEnum[] | Funktion_jfScalarFieldEnum
    having?: funktion_jfScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Funktion_jfCountAggregateInputType | true
    _avg?: Funktion_jfAvgAggregateInputType
    _sum?: Funktion_jfSumAggregateInputType
    _min?: Funktion_jfMinAggregateInputType
    _max?: Funktion_jfMaxAggregateInputType
  }

  export type Funktion_jfGroupByOutputType = {
    ID: number
    Name: string
    Ist_Admin: boolean | null
    Erstellt_am: Date
    Geaendert_am: Date | null
    _count: Funktion_jfCountAggregateOutputType | null
    _avg: Funktion_jfAvgAggregateOutputType | null
    _sum: Funktion_jfSumAggregateOutputType | null
    _min: Funktion_jfMinAggregateOutputType | null
    _max: Funktion_jfMaxAggregateOutputType | null
  }

  type GetFunktion_jfGroupByPayload<T extends funktion_jfGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Funktion_jfGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Funktion_jfGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Funktion_jfGroupByOutputType[P]>
            : GetScalarType<T[P], Funktion_jfGroupByOutputType[P]>
        }
      >
    >


  export type funktion_jfSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Name?: boolean
    Ist_Admin?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["funktion_jf"]>

  export type funktion_jfSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Name?: boolean
    Ist_Admin?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["funktion_jf"]>

  export type funktion_jfSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Name?: boolean
    Ist_Admin?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["funktion_jf"]>

  export type funktion_jfSelectScalar = {
    ID?: boolean
    Name?: boolean
    Ist_Admin?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type funktion_jfOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Name" | "Ist_Admin" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["funktion_jf"]>

  export type $funktion_jfPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "funktion_jf"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Name: string
      Ist_Admin: boolean | null
      Erstellt_am: Date
      Geaendert_am: Date | null
    }, ExtArgs["result"]["funktion_jf"]>
    composites: {}
  }

  type funktion_jfGetPayload<S extends boolean | null | undefined | funktion_jfDefaultArgs> = $Result.GetResult<Prisma.$funktion_jfPayload, S>

  type funktion_jfCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<funktion_jfFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Funktion_jfCountAggregateInputType | true
    }

  export interface funktion_jfDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['funktion_jf'], meta: { name: 'funktion_jf' } }
    /**
     * Find zero or one Funktion_jf that matches the filter.
     * @param {funktion_jfFindUniqueArgs} args - Arguments to find a Funktion_jf
     * @example
     * // Get one Funktion_jf
     * const funktion_jf = await prisma.funktion_jf.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends funktion_jfFindUniqueArgs>(args: SelectSubset<T, funktion_jfFindUniqueArgs<ExtArgs>>): Prisma__funktion_jfClient<$Result.GetResult<Prisma.$funktion_jfPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Funktion_jf that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {funktion_jfFindUniqueOrThrowArgs} args - Arguments to find a Funktion_jf
     * @example
     * // Get one Funktion_jf
     * const funktion_jf = await prisma.funktion_jf.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends funktion_jfFindUniqueOrThrowArgs>(args: SelectSubset<T, funktion_jfFindUniqueOrThrowArgs<ExtArgs>>): Prisma__funktion_jfClient<$Result.GetResult<Prisma.$funktion_jfPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Funktion_jf that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funktion_jfFindFirstArgs} args - Arguments to find a Funktion_jf
     * @example
     * // Get one Funktion_jf
     * const funktion_jf = await prisma.funktion_jf.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends funktion_jfFindFirstArgs>(args?: SelectSubset<T, funktion_jfFindFirstArgs<ExtArgs>>): Prisma__funktion_jfClient<$Result.GetResult<Prisma.$funktion_jfPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Funktion_jf that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funktion_jfFindFirstOrThrowArgs} args - Arguments to find a Funktion_jf
     * @example
     * // Get one Funktion_jf
     * const funktion_jf = await prisma.funktion_jf.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends funktion_jfFindFirstOrThrowArgs>(args?: SelectSubset<T, funktion_jfFindFirstOrThrowArgs<ExtArgs>>): Prisma__funktion_jfClient<$Result.GetResult<Prisma.$funktion_jfPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Funktion_jfs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funktion_jfFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Funktion_jfs
     * const funktion_jfs = await prisma.funktion_jf.findMany()
     * 
     * // Get first 10 Funktion_jfs
     * const funktion_jfs = await prisma.funktion_jf.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const funktion_jfWithIDOnly = await prisma.funktion_jf.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends funktion_jfFindManyArgs>(args?: SelectSubset<T, funktion_jfFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$funktion_jfPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Funktion_jf.
     * @param {funktion_jfCreateArgs} args - Arguments to create a Funktion_jf.
     * @example
     * // Create one Funktion_jf
     * const Funktion_jf = await prisma.funktion_jf.create({
     *   data: {
     *     // ... data to create a Funktion_jf
     *   }
     * })
     * 
     */
    create<T extends funktion_jfCreateArgs>(args: SelectSubset<T, funktion_jfCreateArgs<ExtArgs>>): Prisma__funktion_jfClient<$Result.GetResult<Prisma.$funktion_jfPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Funktion_jfs.
     * @param {funktion_jfCreateManyArgs} args - Arguments to create many Funktion_jfs.
     * @example
     * // Create many Funktion_jfs
     * const funktion_jf = await prisma.funktion_jf.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends funktion_jfCreateManyArgs>(args?: SelectSubset<T, funktion_jfCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Funktion_jfs and returns the data saved in the database.
     * @param {funktion_jfCreateManyAndReturnArgs} args - Arguments to create many Funktion_jfs.
     * @example
     * // Create many Funktion_jfs
     * const funktion_jf = await prisma.funktion_jf.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Funktion_jfs and only return the `ID`
     * const funktion_jfWithIDOnly = await prisma.funktion_jf.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends funktion_jfCreateManyAndReturnArgs>(args?: SelectSubset<T, funktion_jfCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$funktion_jfPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Funktion_jf.
     * @param {funktion_jfDeleteArgs} args - Arguments to delete one Funktion_jf.
     * @example
     * // Delete one Funktion_jf
     * const Funktion_jf = await prisma.funktion_jf.delete({
     *   where: {
     *     // ... filter to delete one Funktion_jf
     *   }
     * })
     * 
     */
    delete<T extends funktion_jfDeleteArgs>(args: SelectSubset<T, funktion_jfDeleteArgs<ExtArgs>>): Prisma__funktion_jfClient<$Result.GetResult<Prisma.$funktion_jfPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Funktion_jf.
     * @param {funktion_jfUpdateArgs} args - Arguments to update one Funktion_jf.
     * @example
     * // Update one Funktion_jf
     * const funktion_jf = await prisma.funktion_jf.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends funktion_jfUpdateArgs>(args: SelectSubset<T, funktion_jfUpdateArgs<ExtArgs>>): Prisma__funktion_jfClient<$Result.GetResult<Prisma.$funktion_jfPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Funktion_jfs.
     * @param {funktion_jfDeleteManyArgs} args - Arguments to filter Funktion_jfs to delete.
     * @example
     * // Delete a few Funktion_jfs
     * const { count } = await prisma.funktion_jf.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends funktion_jfDeleteManyArgs>(args?: SelectSubset<T, funktion_jfDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funktion_jfs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funktion_jfUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Funktion_jfs
     * const funktion_jf = await prisma.funktion_jf.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends funktion_jfUpdateManyArgs>(args: SelectSubset<T, funktion_jfUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funktion_jfs and returns the data updated in the database.
     * @param {funktion_jfUpdateManyAndReturnArgs} args - Arguments to update many Funktion_jfs.
     * @example
     * // Update many Funktion_jfs
     * const funktion_jf = await prisma.funktion_jf.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Funktion_jfs and only return the `ID`
     * const funktion_jfWithIDOnly = await prisma.funktion_jf.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends funktion_jfUpdateManyAndReturnArgs>(args: SelectSubset<T, funktion_jfUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$funktion_jfPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Funktion_jf.
     * @param {funktion_jfUpsertArgs} args - Arguments to update or create a Funktion_jf.
     * @example
     * // Update or create a Funktion_jf
     * const funktion_jf = await prisma.funktion_jf.upsert({
     *   create: {
     *     // ... data to create a Funktion_jf
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Funktion_jf we want to update
     *   }
     * })
     */
    upsert<T extends funktion_jfUpsertArgs>(args: SelectSubset<T, funktion_jfUpsertArgs<ExtArgs>>): Prisma__funktion_jfClient<$Result.GetResult<Prisma.$funktion_jfPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Funktion_jfs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funktion_jfCountArgs} args - Arguments to filter Funktion_jfs to count.
     * @example
     * // Count the number of Funktion_jfs
     * const count = await prisma.funktion_jf.count({
     *   where: {
     *     // ... the filter for the Funktion_jfs we want to count
     *   }
     * })
    **/
    count<T extends funktion_jfCountArgs>(
      args?: Subset<T, funktion_jfCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Funktion_jfCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Funktion_jf.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Funktion_jfAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Funktion_jfAggregateArgs>(args: Subset<T, Funktion_jfAggregateArgs>): Prisma.PrismaPromise<GetFunktion_jfAggregateType<T>>

    /**
     * Group by Funktion_jf.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funktion_jfGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends funktion_jfGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: funktion_jfGroupByArgs['orderBy'] }
        : { orderBy?: funktion_jfGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, funktion_jfGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFunktion_jfGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the funktion_jf model
   */
  readonly fields: funktion_jfFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for funktion_jf.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__funktion_jfClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the funktion_jf model
   */
  interface funktion_jfFieldRefs {
    readonly ID: FieldRef<"funktion_jf", 'Int'>
    readonly Name: FieldRef<"funktion_jf", 'String'>
    readonly Ist_Admin: FieldRef<"funktion_jf", 'Boolean'>
    readonly Erstellt_am: FieldRef<"funktion_jf", 'DateTime'>
    readonly Geaendert_am: FieldRef<"funktion_jf", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * funktion_jf findUnique
   */
  export type funktion_jfFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_jf
     */
    select?: funktion_jfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_jf
     */
    omit?: funktion_jfOmit<ExtArgs> | null
    /**
     * Filter, which funktion_jf to fetch.
     */
    where: funktion_jfWhereUniqueInput
  }

  /**
   * funktion_jf findUniqueOrThrow
   */
  export type funktion_jfFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_jf
     */
    select?: funktion_jfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_jf
     */
    omit?: funktion_jfOmit<ExtArgs> | null
    /**
     * Filter, which funktion_jf to fetch.
     */
    where: funktion_jfWhereUniqueInput
  }

  /**
   * funktion_jf findFirst
   */
  export type funktion_jfFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_jf
     */
    select?: funktion_jfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_jf
     */
    omit?: funktion_jfOmit<ExtArgs> | null
    /**
     * Filter, which funktion_jf to fetch.
     */
    where?: funktion_jfWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of funktion_jfs to fetch.
     */
    orderBy?: funktion_jfOrderByWithRelationInput | funktion_jfOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for funktion_jfs.
     */
    cursor?: funktion_jfWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` funktion_jfs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` funktion_jfs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of funktion_jfs.
     */
    distinct?: Funktion_jfScalarFieldEnum | Funktion_jfScalarFieldEnum[]
  }

  /**
   * funktion_jf findFirstOrThrow
   */
  export type funktion_jfFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_jf
     */
    select?: funktion_jfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_jf
     */
    omit?: funktion_jfOmit<ExtArgs> | null
    /**
     * Filter, which funktion_jf to fetch.
     */
    where?: funktion_jfWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of funktion_jfs to fetch.
     */
    orderBy?: funktion_jfOrderByWithRelationInput | funktion_jfOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for funktion_jfs.
     */
    cursor?: funktion_jfWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` funktion_jfs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` funktion_jfs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of funktion_jfs.
     */
    distinct?: Funktion_jfScalarFieldEnum | Funktion_jfScalarFieldEnum[]
  }

  /**
   * funktion_jf findMany
   */
  export type funktion_jfFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_jf
     */
    select?: funktion_jfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_jf
     */
    omit?: funktion_jfOmit<ExtArgs> | null
    /**
     * Filter, which funktion_jfs to fetch.
     */
    where?: funktion_jfWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of funktion_jfs to fetch.
     */
    orderBy?: funktion_jfOrderByWithRelationInput | funktion_jfOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing funktion_jfs.
     */
    cursor?: funktion_jfWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` funktion_jfs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` funktion_jfs.
     */
    skip?: number
    distinct?: Funktion_jfScalarFieldEnum | Funktion_jfScalarFieldEnum[]
  }

  /**
   * funktion_jf create
   */
  export type funktion_jfCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_jf
     */
    select?: funktion_jfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_jf
     */
    omit?: funktion_jfOmit<ExtArgs> | null
    /**
     * The data needed to create a funktion_jf.
     */
    data: XOR<funktion_jfCreateInput, funktion_jfUncheckedCreateInput>
  }

  /**
   * funktion_jf createMany
   */
  export type funktion_jfCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many funktion_jfs.
     */
    data: funktion_jfCreateManyInput | funktion_jfCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * funktion_jf createManyAndReturn
   */
  export type funktion_jfCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_jf
     */
    select?: funktion_jfSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_jf
     */
    omit?: funktion_jfOmit<ExtArgs> | null
    /**
     * The data used to create many funktion_jfs.
     */
    data: funktion_jfCreateManyInput | funktion_jfCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * funktion_jf update
   */
  export type funktion_jfUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_jf
     */
    select?: funktion_jfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_jf
     */
    omit?: funktion_jfOmit<ExtArgs> | null
    /**
     * The data needed to update a funktion_jf.
     */
    data: XOR<funktion_jfUpdateInput, funktion_jfUncheckedUpdateInput>
    /**
     * Choose, which funktion_jf to update.
     */
    where: funktion_jfWhereUniqueInput
  }

  /**
   * funktion_jf updateMany
   */
  export type funktion_jfUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update funktion_jfs.
     */
    data: XOR<funktion_jfUpdateManyMutationInput, funktion_jfUncheckedUpdateManyInput>
    /**
     * Filter which funktion_jfs to update
     */
    where?: funktion_jfWhereInput
    /**
     * Limit how many funktion_jfs to update.
     */
    limit?: number
  }

  /**
   * funktion_jf updateManyAndReturn
   */
  export type funktion_jfUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_jf
     */
    select?: funktion_jfSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_jf
     */
    omit?: funktion_jfOmit<ExtArgs> | null
    /**
     * The data used to update funktion_jfs.
     */
    data: XOR<funktion_jfUpdateManyMutationInput, funktion_jfUncheckedUpdateManyInput>
    /**
     * Filter which funktion_jfs to update
     */
    where?: funktion_jfWhereInput
    /**
     * Limit how many funktion_jfs to update.
     */
    limit?: number
  }

  /**
   * funktion_jf upsert
   */
  export type funktion_jfUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_jf
     */
    select?: funktion_jfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_jf
     */
    omit?: funktion_jfOmit<ExtArgs> | null
    /**
     * The filter to search for the funktion_jf to update in case it exists.
     */
    where: funktion_jfWhereUniqueInput
    /**
     * In case the funktion_jf found by the `where` argument doesn't exist, create a new funktion_jf with this data.
     */
    create: XOR<funktion_jfCreateInput, funktion_jfUncheckedCreateInput>
    /**
     * In case the funktion_jf was found with the provided `where` argument, update it with this data.
     */
    update: XOR<funktion_jfUpdateInput, funktion_jfUncheckedUpdateInput>
  }

  /**
   * funktion_jf delete
   */
  export type funktion_jfDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_jf
     */
    select?: funktion_jfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_jf
     */
    omit?: funktion_jfOmit<ExtArgs> | null
    /**
     * Filter which funktion_jf to delete.
     */
    where: funktion_jfWhereUniqueInput
  }

  /**
   * funktion_jf deleteMany
   */
  export type funktion_jfDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which funktion_jfs to delete
     */
    where?: funktion_jfWhereInput
    /**
     * Limit how many funktion_jfs to delete.
     */
    limit?: number
  }

  /**
   * funktion_jf without action
   */
  export type funktion_jfDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the funktion_jf
     */
    select?: funktion_jfSelect<ExtArgs> | null
    /**
     * Omit specific fields from the funktion_jf
     */
    omit?: funktion_jfOmit<ExtArgs> | null
  }


  /**
   * Model jf_erziehungsberechtigter
   */

  export type AggregateJf_erziehungsberechtigter = {
    _count: Jf_erziehungsberechtigterCountAggregateOutputType | null
    _avg: Jf_erziehungsberechtigterAvgAggregateOutputType | null
    _sum: Jf_erziehungsberechtigterSumAggregateOutputType | null
    _min: Jf_erziehungsberechtigterMinAggregateOutputType | null
    _max: Jf_erziehungsberechtigterMaxAggregateOutputType | null
  }

  export type Jf_erziehungsberechtigterAvgAggregateOutputType = {
    ID: number | null
    JF_Mitglied_ID: number | null
    Person_ID: number | null
  }

  export type Jf_erziehungsberechtigterSumAggregateOutputType = {
    ID: number | null
    JF_Mitglied_ID: number | null
    Person_ID: number | null
  }

  export type Jf_erziehungsberechtigterMinAggregateOutputType = {
    ID: number | null
    JF_Mitglied_ID: number | null
    Person_ID: number | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Jf_erziehungsberechtigterMaxAggregateOutputType = {
    ID: number | null
    JF_Mitglied_ID: number | null
    Person_ID: number | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Jf_erziehungsberechtigterCountAggregateOutputType = {
    ID: number
    JF_Mitglied_ID: number
    Person_ID: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type Jf_erziehungsberechtigterAvgAggregateInputType = {
    ID?: true
    JF_Mitglied_ID?: true
    Person_ID?: true
  }

  export type Jf_erziehungsberechtigterSumAggregateInputType = {
    ID?: true
    JF_Mitglied_ID?: true
    Person_ID?: true
  }

  export type Jf_erziehungsberechtigterMinAggregateInputType = {
    ID?: true
    JF_Mitglied_ID?: true
    Person_ID?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Jf_erziehungsberechtigterMaxAggregateInputType = {
    ID?: true
    JF_Mitglied_ID?: true
    Person_ID?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Jf_erziehungsberechtigterCountAggregateInputType = {
    ID?: true
    JF_Mitglied_ID?: true
    Person_ID?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type Jf_erziehungsberechtigterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jf_erziehungsberechtigter to aggregate.
     */
    where?: jf_erziehungsberechtigterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jf_erziehungsberechtigters to fetch.
     */
    orderBy?: jf_erziehungsberechtigterOrderByWithRelationInput | jf_erziehungsberechtigterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: jf_erziehungsberechtigterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jf_erziehungsberechtigters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jf_erziehungsberechtigters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned jf_erziehungsberechtigters
    **/
    _count?: true | Jf_erziehungsberechtigterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Jf_erziehungsberechtigterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Jf_erziehungsberechtigterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Jf_erziehungsberechtigterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Jf_erziehungsberechtigterMaxAggregateInputType
  }

  export type GetJf_erziehungsberechtigterAggregateType<T extends Jf_erziehungsberechtigterAggregateArgs> = {
        [P in keyof T & keyof AggregateJf_erziehungsberechtigter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJf_erziehungsberechtigter[P]>
      : GetScalarType<T[P], AggregateJf_erziehungsberechtigter[P]>
  }




  export type jf_erziehungsberechtigterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jf_erziehungsberechtigterWhereInput
    orderBy?: jf_erziehungsberechtigterOrderByWithAggregationInput | jf_erziehungsberechtigterOrderByWithAggregationInput[]
    by: Jf_erziehungsberechtigterScalarFieldEnum[] | Jf_erziehungsberechtigterScalarFieldEnum
    having?: jf_erziehungsberechtigterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Jf_erziehungsberechtigterCountAggregateInputType | true
    _avg?: Jf_erziehungsberechtigterAvgAggregateInputType
    _sum?: Jf_erziehungsberechtigterSumAggregateInputType
    _min?: Jf_erziehungsberechtigterMinAggregateInputType
    _max?: Jf_erziehungsberechtigterMaxAggregateInputType
  }

  export type Jf_erziehungsberechtigterGroupByOutputType = {
    ID: number
    JF_Mitglied_ID: number
    Person_ID: number
    Erstellt_am: Date | null
    Geaendert_am: Date | null
    _count: Jf_erziehungsberechtigterCountAggregateOutputType | null
    _avg: Jf_erziehungsberechtigterAvgAggregateOutputType | null
    _sum: Jf_erziehungsberechtigterSumAggregateOutputType | null
    _min: Jf_erziehungsberechtigterMinAggregateOutputType | null
    _max: Jf_erziehungsberechtigterMaxAggregateOutputType | null
  }

  type GetJf_erziehungsberechtigterGroupByPayload<T extends jf_erziehungsberechtigterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Jf_erziehungsberechtigterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Jf_erziehungsberechtigterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Jf_erziehungsberechtigterGroupByOutputType[P]>
            : GetScalarType<T[P], Jf_erziehungsberechtigterGroupByOutputType[P]>
        }
      >
    >


  export type jf_erziehungsberechtigterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    JF_Mitglied_ID?: boolean
    Person_ID?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    jf_mitglied?: boolean | jf_mitgliedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jf_erziehungsberechtigter"]>

  export type jf_erziehungsberechtigterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    JF_Mitglied_ID?: boolean
    Person_ID?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    jf_mitglied?: boolean | jf_mitgliedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jf_erziehungsberechtigter"]>

  export type jf_erziehungsberechtigterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    JF_Mitglied_ID?: boolean
    Person_ID?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    jf_mitglied?: boolean | jf_mitgliedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jf_erziehungsberechtigter"]>

  export type jf_erziehungsberechtigterSelectScalar = {
    ID?: boolean
    JF_Mitglied_ID?: boolean
    Person_ID?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type jf_erziehungsberechtigterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "JF_Mitglied_ID" | "Person_ID" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["jf_erziehungsberechtigter"]>
  export type jf_erziehungsberechtigterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jf_mitglied?: boolean | jf_mitgliedDefaultArgs<ExtArgs>
  }
  export type jf_erziehungsberechtigterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jf_mitglied?: boolean | jf_mitgliedDefaultArgs<ExtArgs>
  }
  export type jf_erziehungsberechtigterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jf_mitglied?: boolean | jf_mitgliedDefaultArgs<ExtArgs>
  }

  export type $jf_erziehungsberechtigterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "jf_erziehungsberechtigter"
    objects: {
      jf_mitglied: Prisma.$jf_mitgliedPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      JF_Mitglied_ID: number
      Person_ID: number
      Erstellt_am: Date | null
      Geaendert_am: Date | null
    }, ExtArgs["result"]["jf_erziehungsberechtigter"]>
    composites: {}
  }

  type jf_erziehungsberechtigterGetPayload<S extends boolean | null | undefined | jf_erziehungsberechtigterDefaultArgs> = $Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload, S>

  type jf_erziehungsberechtigterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<jf_erziehungsberechtigterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Jf_erziehungsberechtigterCountAggregateInputType | true
    }

  export interface jf_erziehungsberechtigterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['jf_erziehungsberechtigter'], meta: { name: 'jf_erziehungsberechtigter' } }
    /**
     * Find zero or one Jf_erziehungsberechtigter that matches the filter.
     * @param {jf_erziehungsberechtigterFindUniqueArgs} args - Arguments to find a Jf_erziehungsberechtigter
     * @example
     * // Get one Jf_erziehungsberechtigter
     * const jf_erziehungsberechtigter = await prisma.jf_erziehungsberechtigter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends jf_erziehungsberechtigterFindUniqueArgs>(args: SelectSubset<T, jf_erziehungsberechtigterFindUniqueArgs<ExtArgs>>): Prisma__jf_erziehungsberechtigterClient<$Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Jf_erziehungsberechtigter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {jf_erziehungsberechtigterFindUniqueOrThrowArgs} args - Arguments to find a Jf_erziehungsberechtigter
     * @example
     * // Get one Jf_erziehungsberechtigter
     * const jf_erziehungsberechtigter = await prisma.jf_erziehungsberechtigter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends jf_erziehungsberechtigterFindUniqueOrThrowArgs>(args: SelectSubset<T, jf_erziehungsberechtigterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__jf_erziehungsberechtigterClient<$Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Jf_erziehungsberechtigter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jf_erziehungsberechtigterFindFirstArgs} args - Arguments to find a Jf_erziehungsberechtigter
     * @example
     * // Get one Jf_erziehungsberechtigter
     * const jf_erziehungsberechtigter = await prisma.jf_erziehungsberechtigter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends jf_erziehungsberechtigterFindFirstArgs>(args?: SelectSubset<T, jf_erziehungsberechtigterFindFirstArgs<ExtArgs>>): Prisma__jf_erziehungsberechtigterClient<$Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Jf_erziehungsberechtigter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jf_erziehungsberechtigterFindFirstOrThrowArgs} args - Arguments to find a Jf_erziehungsberechtigter
     * @example
     * // Get one Jf_erziehungsberechtigter
     * const jf_erziehungsberechtigter = await prisma.jf_erziehungsberechtigter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends jf_erziehungsberechtigterFindFirstOrThrowArgs>(args?: SelectSubset<T, jf_erziehungsberechtigterFindFirstOrThrowArgs<ExtArgs>>): Prisma__jf_erziehungsberechtigterClient<$Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jf_erziehungsberechtigters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jf_erziehungsberechtigterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jf_erziehungsberechtigters
     * const jf_erziehungsberechtigters = await prisma.jf_erziehungsberechtigter.findMany()
     * 
     * // Get first 10 Jf_erziehungsberechtigters
     * const jf_erziehungsberechtigters = await prisma.jf_erziehungsberechtigter.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const jf_erziehungsberechtigterWithIDOnly = await prisma.jf_erziehungsberechtigter.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends jf_erziehungsberechtigterFindManyArgs>(args?: SelectSubset<T, jf_erziehungsberechtigterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Jf_erziehungsberechtigter.
     * @param {jf_erziehungsberechtigterCreateArgs} args - Arguments to create a Jf_erziehungsberechtigter.
     * @example
     * // Create one Jf_erziehungsberechtigter
     * const Jf_erziehungsberechtigter = await prisma.jf_erziehungsberechtigter.create({
     *   data: {
     *     // ... data to create a Jf_erziehungsberechtigter
     *   }
     * })
     * 
     */
    create<T extends jf_erziehungsberechtigterCreateArgs>(args: SelectSubset<T, jf_erziehungsberechtigterCreateArgs<ExtArgs>>): Prisma__jf_erziehungsberechtigterClient<$Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jf_erziehungsberechtigters.
     * @param {jf_erziehungsberechtigterCreateManyArgs} args - Arguments to create many Jf_erziehungsberechtigters.
     * @example
     * // Create many Jf_erziehungsberechtigters
     * const jf_erziehungsberechtigter = await prisma.jf_erziehungsberechtigter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends jf_erziehungsberechtigterCreateManyArgs>(args?: SelectSubset<T, jf_erziehungsberechtigterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jf_erziehungsberechtigters and returns the data saved in the database.
     * @param {jf_erziehungsberechtigterCreateManyAndReturnArgs} args - Arguments to create many Jf_erziehungsberechtigters.
     * @example
     * // Create many Jf_erziehungsberechtigters
     * const jf_erziehungsberechtigter = await prisma.jf_erziehungsberechtigter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jf_erziehungsberechtigters and only return the `ID`
     * const jf_erziehungsberechtigterWithIDOnly = await prisma.jf_erziehungsberechtigter.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends jf_erziehungsberechtigterCreateManyAndReturnArgs>(args?: SelectSubset<T, jf_erziehungsberechtigterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Jf_erziehungsberechtigter.
     * @param {jf_erziehungsberechtigterDeleteArgs} args - Arguments to delete one Jf_erziehungsberechtigter.
     * @example
     * // Delete one Jf_erziehungsberechtigter
     * const Jf_erziehungsberechtigter = await prisma.jf_erziehungsberechtigter.delete({
     *   where: {
     *     // ... filter to delete one Jf_erziehungsberechtigter
     *   }
     * })
     * 
     */
    delete<T extends jf_erziehungsberechtigterDeleteArgs>(args: SelectSubset<T, jf_erziehungsberechtigterDeleteArgs<ExtArgs>>): Prisma__jf_erziehungsberechtigterClient<$Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Jf_erziehungsberechtigter.
     * @param {jf_erziehungsberechtigterUpdateArgs} args - Arguments to update one Jf_erziehungsberechtigter.
     * @example
     * // Update one Jf_erziehungsberechtigter
     * const jf_erziehungsberechtigter = await prisma.jf_erziehungsberechtigter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends jf_erziehungsberechtigterUpdateArgs>(args: SelectSubset<T, jf_erziehungsberechtigterUpdateArgs<ExtArgs>>): Prisma__jf_erziehungsberechtigterClient<$Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jf_erziehungsberechtigters.
     * @param {jf_erziehungsberechtigterDeleteManyArgs} args - Arguments to filter Jf_erziehungsberechtigters to delete.
     * @example
     * // Delete a few Jf_erziehungsberechtigters
     * const { count } = await prisma.jf_erziehungsberechtigter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends jf_erziehungsberechtigterDeleteManyArgs>(args?: SelectSubset<T, jf_erziehungsberechtigterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jf_erziehungsberechtigters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jf_erziehungsberechtigterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jf_erziehungsberechtigters
     * const jf_erziehungsberechtigter = await prisma.jf_erziehungsberechtigter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends jf_erziehungsberechtigterUpdateManyArgs>(args: SelectSubset<T, jf_erziehungsberechtigterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jf_erziehungsberechtigters and returns the data updated in the database.
     * @param {jf_erziehungsberechtigterUpdateManyAndReturnArgs} args - Arguments to update many Jf_erziehungsberechtigters.
     * @example
     * // Update many Jf_erziehungsberechtigters
     * const jf_erziehungsberechtigter = await prisma.jf_erziehungsberechtigter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Jf_erziehungsberechtigters and only return the `ID`
     * const jf_erziehungsberechtigterWithIDOnly = await prisma.jf_erziehungsberechtigter.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends jf_erziehungsberechtigterUpdateManyAndReturnArgs>(args: SelectSubset<T, jf_erziehungsberechtigterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Jf_erziehungsberechtigter.
     * @param {jf_erziehungsberechtigterUpsertArgs} args - Arguments to update or create a Jf_erziehungsberechtigter.
     * @example
     * // Update or create a Jf_erziehungsberechtigter
     * const jf_erziehungsberechtigter = await prisma.jf_erziehungsberechtigter.upsert({
     *   create: {
     *     // ... data to create a Jf_erziehungsberechtigter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jf_erziehungsberechtigter we want to update
     *   }
     * })
     */
    upsert<T extends jf_erziehungsberechtigterUpsertArgs>(args: SelectSubset<T, jf_erziehungsberechtigterUpsertArgs<ExtArgs>>): Prisma__jf_erziehungsberechtigterClient<$Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jf_erziehungsberechtigters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jf_erziehungsberechtigterCountArgs} args - Arguments to filter Jf_erziehungsberechtigters to count.
     * @example
     * // Count the number of Jf_erziehungsberechtigters
     * const count = await prisma.jf_erziehungsberechtigter.count({
     *   where: {
     *     // ... the filter for the Jf_erziehungsberechtigters we want to count
     *   }
     * })
    **/
    count<T extends jf_erziehungsberechtigterCountArgs>(
      args?: Subset<T, jf_erziehungsberechtigterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Jf_erziehungsberechtigterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jf_erziehungsberechtigter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jf_erziehungsberechtigterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Jf_erziehungsberechtigterAggregateArgs>(args: Subset<T, Jf_erziehungsberechtigterAggregateArgs>): Prisma.PrismaPromise<GetJf_erziehungsberechtigterAggregateType<T>>

    /**
     * Group by Jf_erziehungsberechtigter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jf_erziehungsberechtigterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends jf_erziehungsberechtigterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: jf_erziehungsberechtigterGroupByArgs['orderBy'] }
        : { orderBy?: jf_erziehungsberechtigterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, jf_erziehungsberechtigterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJf_erziehungsberechtigterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the jf_erziehungsberechtigter model
   */
  readonly fields: jf_erziehungsberechtigterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for jf_erziehungsberechtigter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__jf_erziehungsberechtigterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jf_mitglied<T extends jf_mitgliedDefaultArgs<ExtArgs> = {}>(args?: Subset<T, jf_mitgliedDefaultArgs<ExtArgs>>): Prisma__jf_mitgliedClient<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the jf_erziehungsberechtigter model
   */
  interface jf_erziehungsberechtigterFieldRefs {
    readonly ID: FieldRef<"jf_erziehungsberechtigter", 'Int'>
    readonly JF_Mitglied_ID: FieldRef<"jf_erziehungsberechtigter", 'Int'>
    readonly Person_ID: FieldRef<"jf_erziehungsberechtigter", 'Int'>
    readonly Erstellt_am: FieldRef<"jf_erziehungsberechtigter", 'DateTime'>
    readonly Geaendert_am: FieldRef<"jf_erziehungsberechtigter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * jf_erziehungsberechtigter findUnique
   */
  export type jf_erziehungsberechtigterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterInclude<ExtArgs> | null
    /**
     * Filter, which jf_erziehungsberechtigter to fetch.
     */
    where: jf_erziehungsberechtigterWhereUniqueInput
  }

  /**
   * jf_erziehungsberechtigter findUniqueOrThrow
   */
  export type jf_erziehungsberechtigterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterInclude<ExtArgs> | null
    /**
     * Filter, which jf_erziehungsberechtigter to fetch.
     */
    where: jf_erziehungsberechtigterWhereUniqueInput
  }

  /**
   * jf_erziehungsberechtigter findFirst
   */
  export type jf_erziehungsberechtigterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterInclude<ExtArgs> | null
    /**
     * Filter, which jf_erziehungsberechtigter to fetch.
     */
    where?: jf_erziehungsberechtigterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jf_erziehungsberechtigters to fetch.
     */
    orderBy?: jf_erziehungsberechtigterOrderByWithRelationInput | jf_erziehungsberechtigterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jf_erziehungsberechtigters.
     */
    cursor?: jf_erziehungsberechtigterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jf_erziehungsberechtigters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jf_erziehungsberechtigters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jf_erziehungsberechtigters.
     */
    distinct?: Jf_erziehungsberechtigterScalarFieldEnum | Jf_erziehungsberechtigterScalarFieldEnum[]
  }

  /**
   * jf_erziehungsberechtigter findFirstOrThrow
   */
  export type jf_erziehungsberechtigterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterInclude<ExtArgs> | null
    /**
     * Filter, which jf_erziehungsberechtigter to fetch.
     */
    where?: jf_erziehungsberechtigterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jf_erziehungsberechtigters to fetch.
     */
    orderBy?: jf_erziehungsberechtigterOrderByWithRelationInput | jf_erziehungsberechtigterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jf_erziehungsberechtigters.
     */
    cursor?: jf_erziehungsberechtigterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jf_erziehungsberechtigters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jf_erziehungsberechtigters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jf_erziehungsberechtigters.
     */
    distinct?: Jf_erziehungsberechtigterScalarFieldEnum | Jf_erziehungsberechtigterScalarFieldEnum[]
  }

  /**
   * jf_erziehungsberechtigter findMany
   */
  export type jf_erziehungsberechtigterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterInclude<ExtArgs> | null
    /**
     * Filter, which jf_erziehungsberechtigters to fetch.
     */
    where?: jf_erziehungsberechtigterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jf_erziehungsberechtigters to fetch.
     */
    orderBy?: jf_erziehungsberechtigterOrderByWithRelationInput | jf_erziehungsberechtigterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing jf_erziehungsberechtigters.
     */
    cursor?: jf_erziehungsberechtigterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jf_erziehungsberechtigters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jf_erziehungsberechtigters.
     */
    skip?: number
    distinct?: Jf_erziehungsberechtigterScalarFieldEnum | Jf_erziehungsberechtigterScalarFieldEnum[]
  }

  /**
   * jf_erziehungsberechtigter create
   */
  export type jf_erziehungsberechtigterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterInclude<ExtArgs> | null
    /**
     * The data needed to create a jf_erziehungsberechtigter.
     */
    data: XOR<jf_erziehungsberechtigterCreateInput, jf_erziehungsberechtigterUncheckedCreateInput>
  }

  /**
   * jf_erziehungsberechtigter createMany
   */
  export type jf_erziehungsberechtigterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many jf_erziehungsberechtigters.
     */
    data: jf_erziehungsberechtigterCreateManyInput | jf_erziehungsberechtigterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * jf_erziehungsberechtigter createManyAndReturn
   */
  export type jf_erziehungsberechtigterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * The data used to create many jf_erziehungsberechtigters.
     */
    data: jf_erziehungsberechtigterCreateManyInput | jf_erziehungsberechtigterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * jf_erziehungsberechtigter update
   */
  export type jf_erziehungsberechtigterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterInclude<ExtArgs> | null
    /**
     * The data needed to update a jf_erziehungsberechtigter.
     */
    data: XOR<jf_erziehungsberechtigterUpdateInput, jf_erziehungsberechtigterUncheckedUpdateInput>
    /**
     * Choose, which jf_erziehungsberechtigter to update.
     */
    where: jf_erziehungsberechtigterWhereUniqueInput
  }

  /**
   * jf_erziehungsberechtigter updateMany
   */
  export type jf_erziehungsberechtigterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update jf_erziehungsberechtigters.
     */
    data: XOR<jf_erziehungsberechtigterUpdateManyMutationInput, jf_erziehungsberechtigterUncheckedUpdateManyInput>
    /**
     * Filter which jf_erziehungsberechtigters to update
     */
    where?: jf_erziehungsberechtigterWhereInput
    /**
     * Limit how many jf_erziehungsberechtigters to update.
     */
    limit?: number
  }

  /**
   * jf_erziehungsberechtigter updateManyAndReturn
   */
  export type jf_erziehungsberechtigterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * The data used to update jf_erziehungsberechtigters.
     */
    data: XOR<jf_erziehungsberechtigterUpdateManyMutationInput, jf_erziehungsberechtigterUncheckedUpdateManyInput>
    /**
     * Filter which jf_erziehungsberechtigters to update
     */
    where?: jf_erziehungsberechtigterWhereInput
    /**
     * Limit how many jf_erziehungsberechtigters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * jf_erziehungsberechtigter upsert
   */
  export type jf_erziehungsberechtigterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterInclude<ExtArgs> | null
    /**
     * The filter to search for the jf_erziehungsberechtigter to update in case it exists.
     */
    where: jf_erziehungsberechtigterWhereUniqueInput
    /**
     * In case the jf_erziehungsberechtigter found by the `where` argument doesn't exist, create a new jf_erziehungsberechtigter with this data.
     */
    create: XOR<jf_erziehungsberechtigterCreateInput, jf_erziehungsberechtigterUncheckedCreateInput>
    /**
     * In case the jf_erziehungsberechtigter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<jf_erziehungsberechtigterUpdateInput, jf_erziehungsberechtigterUncheckedUpdateInput>
  }

  /**
   * jf_erziehungsberechtigter delete
   */
  export type jf_erziehungsberechtigterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterInclude<ExtArgs> | null
    /**
     * Filter which jf_erziehungsberechtigter to delete.
     */
    where: jf_erziehungsberechtigterWhereUniqueInput
  }

  /**
   * jf_erziehungsberechtigter deleteMany
   */
  export type jf_erziehungsberechtigterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jf_erziehungsberechtigters to delete
     */
    where?: jf_erziehungsberechtigterWhereInput
    /**
     * Limit how many jf_erziehungsberechtigters to delete.
     */
    limit?: number
  }

  /**
   * jf_erziehungsberechtigter without action
   */
  export type jf_erziehungsberechtigterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterInclude<ExtArgs> | null
  }


  /**
   * Model jf_mitglied
   */

  export type AggregateJf_mitglied = {
    _count: Jf_mitgliedCountAggregateOutputType | null
    _avg: Jf_mitgliedAvgAggregateOutputType | null
    _sum: Jf_mitgliedSumAggregateOutputType | null
    _min: Jf_mitgliedMinAggregateOutputType | null
    _max: Jf_mitgliedMaxAggregateOutputType | null
  }

  export type Jf_mitgliedAvgAggregateOutputType = {
    ID: number | null
    Person_ID: number | null
  }

  export type Jf_mitgliedSumAggregateOutputType = {
    ID: number | null
    Person_ID: number | null
  }

  export type Jf_mitgliedMinAggregateOutputType = {
    ID: number | null
    Person_ID: number | null
    Eintrittsdatum: Date | null
    Austrittsdatum: Date | null
    Aufnahmedatum: Date | null
    Status: $Enums.jf_mitglied_status | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Jf_mitgliedMaxAggregateOutputType = {
    ID: number | null
    Person_ID: number | null
    Eintrittsdatum: Date | null
    Austrittsdatum: Date | null
    Aufnahmedatum: Date | null
    Status: $Enums.jf_mitglied_status | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Jf_mitgliedCountAggregateOutputType = {
    ID: number
    Person_ID: number
    Eintrittsdatum: number
    Austrittsdatum: number
    Aufnahmedatum: number
    Status: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type Jf_mitgliedAvgAggregateInputType = {
    ID?: true
    Person_ID?: true
  }

  export type Jf_mitgliedSumAggregateInputType = {
    ID?: true
    Person_ID?: true
  }

  export type Jf_mitgliedMinAggregateInputType = {
    ID?: true
    Person_ID?: true
    Eintrittsdatum?: true
    Austrittsdatum?: true
    Aufnahmedatum?: true
    Status?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Jf_mitgliedMaxAggregateInputType = {
    ID?: true
    Person_ID?: true
    Eintrittsdatum?: true
    Austrittsdatum?: true
    Aufnahmedatum?: true
    Status?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Jf_mitgliedCountAggregateInputType = {
    ID?: true
    Person_ID?: true
    Eintrittsdatum?: true
    Austrittsdatum?: true
    Aufnahmedatum?: true
    Status?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type Jf_mitgliedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jf_mitglied to aggregate.
     */
    where?: jf_mitgliedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jf_mitglieds to fetch.
     */
    orderBy?: jf_mitgliedOrderByWithRelationInput | jf_mitgliedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: jf_mitgliedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jf_mitglieds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jf_mitglieds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned jf_mitglieds
    **/
    _count?: true | Jf_mitgliedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Jf_mitgliedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Jf_mitgliedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Jf_mitgliedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Jf_mitgliedMaxAggregateInputType
  }

  export type GetJf_mitgliedAggregateType<T extends Jf_mitgliedAggregateArgs> = {
        [P in keyof T & keyof AggregateJf_mitglied]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJf_mitglied[P]>
      : GetScalarType<T[P], AggregateJf_mitglied[P]>
  }




  export type jf_mitgliedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jf_mitgliedWhereInput
    orderBy?: jf_mitgliedOrderByWithAggregationInput | jf_mitgliedOrderByWithAggregationInput[]
    by: Jf_mitgliedScalarFieldEnum[] | Jf_mitgliedScalarFieldEnum
    having?: jf_mitgliedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Jf_mitgliedCountAggregateInputType | true
    _avg?: Jf_mitgliedAvgAggregateInputType
    _sum?: Jf_mitgliedSumAggregateInputType
    _min?: Jf_mitgliedMinAggregateInputType
    _max?: Jf_mitgliedMaxAggregateInputType
  }

  export type Jf_mitgliedGroupByOutputType = {
    ID: number
    Person_ID: number
    Eintrittsdatum: Date
    Austrittsdatum: Date | null
    Aufnahmedatum: Date | null
    Status: $Enums.jf_mitglied_status | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
    _count: Jf_mitgliedCountAggregateOutputType | null
    _avg: Jf_mitgliedAvgAggregateOutputType | null
    _sum: Jf_mitgliedSumAggregateOutputType | null
    _min: Jf_mitgliedMinAggregateOutputType | null
    _max: Jf_mitgliedMaxAggregateOutputType | null
  }

  type GetJf_mitgliedGroupByPayload<T extends jf_mitgliedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Jf_mitgliedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Jf_mitgliedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Jf_mitgliedGroupByOutputType[P]>
            : GetScalarType<T[P], Jf_mitgliedGroupByOutputType[P]>
        }
      >
    >


  export type jf_mitgliedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Person_ID?: boolean
    Eintrittsdatum?: boolean
    Austrittsdatum?: boolean
    Aufnahmedatum?: boolean
    Status?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    allergie?: boolean | jf_mitglied$allergieArgs<ExtArgs>
    jf_erziehungsberechtigter?: boolean | jf_mitglied$jf_erziehungsberechtigterArgs<ExtArgs>
    _count?: boolean | Jf_mitgliedCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jf_mitglied"]>

  export type jf_mitgliedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Person_ID?: boolean
    Eintrittsdatum?: boolean
    Austrittsdatum?: boolean
    Aufnahmedatum?: boolean
    Status?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["jf_mitglied"]>

  export type jf_mitgliedSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Person_ID?: boolean
    Eintrittsdatum?: boolean
    Austrittsdatum?: boolean
    Aufnahmedatum?: boolean
    Status?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["jf_mitglied"]>

  export type jf_mitgliedSelectScalar = {
    ID?: boolean
    Person_ID?: boolean
    Eintrittsdatum?: boolean
    Austrittsdatum?: boolean
    Aufnahmedatum?: boolean
    Status?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type jf_mitgliedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Person_ID" | "Eintrittsdatum" | "Austrittsdatum" | "Aufnahmedatum" | "Status" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["jf_mitglied"]>
  export type jf_mitgliedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    allergie?: boolean | jf_mitglied$allergieArgs<ExtArgs>
    jf_erziehungsberechtigter?: boolean | jf_mitglied$jf_erziehungsberechtigterArgs<ExtArgs>
    _count?: boolean | Jf_mitgliedCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type jf_mitgliedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type jf_mitgliedIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $jf_mitgliedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "jf_mitglied"
    objects: {
      allergie: Prisma.$allergiePayload<ExtArgs>[]
      jf_erziehungsberechtigter: Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Person_ID: number
      Eintrittsdatum: Date
      Austrittsdatum: Date | null
      Aufnahmedatum: Date | null
      Status: $Enums.jf_mitglied_status | null
      Erstellt_am: Date | null
      Geaendert_am: Date | null
    }, ExtArgs["result"]["jf_mitglied"]>
    composites: {}
  }

  type jf_mitgliedGetPayload<S extends boolean | null | undefined | jf_mitgliedDefaultArgs> = $Result.GetResult<Prisma.$jf_mitgliedPayload, S>

  type jf_mitgliedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<jf_mitgliedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Jf_mitgliedCountAggregateInputType | true
    }

  export interface jf_mitgliedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['jf_mitglied'], meta: { name: 'jf_mitglied' } }
    /**
     * Find zero or one Jf_mitglied that matches the filter.
     * @param {jf_mitgliedFindUniqueArgs} args - Arguments to find a Jf_mitglied
     * @example
     * // Get one Jf_mitglied
     * const jf_mitglied = await prisma.jf_mitglied.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends jf_mitgliedFindUniqueArgs>(args: SelectSubset<T, jf_mitgliedFindUniqueArgs<ExtArgs>>): Prisma__jf_mitgliedClient<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Jf_mitglied that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {jf_mitgliedFindUniqueOrThrowArgs} args - Arguments to find a Jf_mitglied
     * @example
     * // Get one Jf_mitglied
     * const jf_mitglied = await prisma.jf_mitglied.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends jf_mitgliedFindUniqueOrThrowArgs>(args: SelectSubset<T, jf_mitgliedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__jf_mitgliedClient<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Jf_mitglied that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jf_mitgliedFindFirstArgs} args - Arguments to find a Jf_mitglied
     * @example
     * // Get one Jf_mitglied
     * const jf_mitglied = await prisma.jf_mitglied.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends jf_mitgliedFindFirstArgs>(args?: SelectSubset<T, jf_mitgliedFindFirstArgs<ExtArgs>>): Prisma__jf_mitgliedClient<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Jf_mitglied that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jf_mitgliedFindFirstOrThrowArgs} args - Arguments to find a Jf_mitglied
     * @example
     * // Get one Jf_mitglied
     * const jf_mitglied = await prisma.jf_mitglied.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends jf_mitgliedFindFirstOrThrowArgs>(args?: SelectSubset<T, jf_mitgliedFindFirstOrThrowArgs<ExtArgs>>): Prisma__jf_mitgliedClient<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jf_mitglieds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jf_mitgliedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jf_mitglieds
     * const jf_mitglieds = await prisma.jf_mitglied.findMany()
     * 
     * // Get first 10 Jf_mitglieds
     * const jf_mitglieds = await prisma.jf_mitglied.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const jf_mitgliedWithIDOnly = await prisma.jf_mitglied.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends jf_mitgliedFindManyArgs>(args?: SelectSubset<T, jf_mitgliedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Jf_mitglied.
     * @param {jf_mitgliedCreateArgs} args - Arguments to create a Jf_mitglied.
     * @example
     * // Create one Jf_mitglied
     * const Jf_mitglied = await prisma.jf_mitglied.create({
     *   data: {
     *     // ... data to create a Jf_mitglied
     *   }
     * })
     * 
     */
    create<T extends jf_mitgliedCreateArgs>(args: SelectSubset<T, jf_mitgliedCreateArgs<ExtArgs>>): Prisma__jf_mitgliedClient<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jf_mitglieds.
     * @param {jf_mitgliedCreateManyArgs} args - Arguments to create many Jf_mitglieds.
     * @example
     * // Create many Jf_mitglieds
     * const jf_mitglied = await prisma.jf_mitglied.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends jf_mitgliedCreateManyArgs>(args?: SelectSubset<T, jf_mitgliedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jf_mitglieds and returns the data saved in the database.
     * @param {jf_mitgliedCreateManyAndReturnArgs} args - Arguments to create many Jf_mitglieds.
     * @example
     * // Create many Jf_mitglieds
     * const jf_mitglied = await prisma.jf_mitglied.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jf_mitglieds and only return the `ID`
     * const jf_mitgliedWithIDOnly = await prisma.jf_mitglied.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends jf_mitgliedCreateManyAndReturnArgs>(args?: SelectSubset<T, jf_mitgliedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Jf_mitglied.
     * @param {jf_mitgliedDeleteArgs} args - Arguments to delete one Jf_mitglied.
     * @example
     * // Delete one Jf_mitglied
     * const Jf_mitglied = await prisma.jf_mitglied.delete({
     *   where: {
     *     // ... filter to delete one Jf_mitglied
     *   }
     * })
     * 
     */
    delete<T extends jf_mitgliedDeleteArgs>(args: SelectSubset<T, jf_mitgliedDeleteArgs<ExtArgs>>): Prisma__jf_mitgliedClient<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Jf_mitglied.
     * @param {jf_mitgliedUpdateArgs} args - Arguments to update one Jf_mitglied.
     * @example
     * // Update one Jf_mitglied
     * const jf_mitglied = await prisma.jf_mitglied.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends jf_mitgliedUpdateArgs>(args: SelectSubset<T, jf_mitgliedUpdateArgs<ExtArgs>>): Prisma__jf_mitgliedClient<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jf_mitglieds.
     * @param {jf_mitgliedDeleteManyArgs} args - Arguments to filter Jf_mitglieds to delete.
     * @example
     * // Delete a few Jf_mitglieds
     * const { count } = await prisma.jf_mitglied.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends jf_mitgliedDeleteManyArgs>(args?: SelectSubset<T, jf_mitgliedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jf_mitglieds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jf_mitgliedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jf_mitglieds
     * const jf_mitglied = await prisma.jf_mitglied.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends jf_mitgliedUpdateManyArgs>(args: SelectSubset<T, jf_mitgliedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jf_mitglieds and returns the data updated in the database.
     * @param {jf_mitgliedUpdateManyAndReturnArgs} args - Arguments to update many Jf_mitglieds.
     * @example
     * // Update many Jf_mitglieds
     * const jf_mitglied = await prisma.jf_mitglied.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Jf_mitglieds and only return the `ID`
     * const jf_mitgliedWithIDOnly = await prisma.jf_mitglied.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends jf_mitgliedUpdateManyAndReturnArgs>(args: SelectSubset<T, jf_mitgliedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Jf_mitglied.
     * @param {jf_mitgliedUpsertArgs} args - Arguments to update or create a Jf_mitglied.
     * @example
     * // Update or create a Jf_mitglied
     * const jf_mitglied = await prisma.jf_mitglied.upsert({
     *   create: {
     *     // ... data to create a Jf_mitglied
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jf_mitglied we want to update
     *   }
     * })
     */
    upsert<T extends jf_mitgliedUpsertArgs>(args: SelectSubset<T, jf_mitgliedUpsertArgs<ExtArgs>>): Prisma__jf_mitgliedClient<$Result.GetResult<Prisma.$jf_mitgliedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jf_mitglieds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jf_mitgliedCountArgs} args - Arguments to filter Jf_mitglieds to count.
     * @example
     * // Count the number of Jf_mitglieds
     * const count = await prisma.jf_mitglied.count({
     *   where: {
     *     // ... the filter for the Jf_mitglieds we want to count
     *   }
     * })
    **/
    count<T extends jf_mitgliedCountArgs>(
      args?: Subset<T, jf_mitgliedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Jf_mitgliedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jf_mitglied.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Jf_mitgliedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Jf_mitgliedAggregateArgs>(args: Subset<T, Jf_mitgliedAggregateArgs>): Prisma.PrismaPromise<GetJf_mitgliedAggregateType<T>>

    /**
     * Group by Jf_mitglied.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jf_mitgliedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends jf_mitgliedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: jf_mitgliedGroupByArgs['orderBy'] }
        : { orderBy?: jf_mitgliedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, jf_mitgliedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJf_mitgliedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the jf_mitglied model
   */
  readonly fields: jf_mitgliedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for jf_mitglied.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__jf_mitgliedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    allergie<T extends jf_mitglied$allergieArgs<ExtArgs> = {}>(args?: Subset<T, jf_mitglied$allergieArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$allergiePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jf_erziehungsberechtigter<T extends jf_mitglied$jf_erziehungsberechtigterArgs<ExtArgs> = {}>(args?: Subset<T, jf_mitglied$jf_erziehungsberechtigterArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jf_erziehungsberechtigterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the jf_mitglied model
   */
  interface jf_mitgliedFieldRefs {
    readonly ID: FieldRef<"jf_mitglied", 'Int'>
    readonly Person_ID: FieldRef<"jf_mitglied", 'Int'>
    readonly Eintrittsdatum: FieldRef<"jf_mitglied", 'DateTime'>
    readonly Austrittsdatum: FieldRef<"jf_mitglied", 'DateTime'>
    readonly Aufnahmedatum: FieldRef<"jf_mitglied", 'DateTime'>
    readonly Status: FieldRef<"jf_mitglied", 'jf_mitglied_status'>
    readonly Erstellt_am: FieldRef<"jf_mitglied", 'DateTime'>
    readonly Geaendert_am: FieldRef<"jf_mitglied", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * jf_mitglied findUnique
   */
  export type jf_mitgliedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_mitglied
     */
    select?: jf_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_mitglied
     */
    omit?: jf_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_mitgliedInclude<ExtArgs> | null
    /**
     * Filter, which jf_mitglied to fetch.
     */
    where: jf_mitgliedWhereUniqueInput
  }

  /**
   * jf_mitglied findUniqueOrThrow
   */
  export type jf_mitgliedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_mitglied
     */
    select?: jf_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_mitglied
     */
    omit?: jf_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_mitgliedInclude<ExtArgs> | null
    /**
     * Filter, which jf_mitglied to fetch.
     */
    where: jf_mitgliedWhereUniqueInput
  }

  /**
   * jf_mitglied findFirst
   */
  export type jf_mitgliedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_mitglied
     */
    select?: jf_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_mitglied
     */
    omit?: jf_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_mitgliedInclude<ExtArgs> | null
    /**
     * Filter, which jf_mitglied to fetch.
     */
    where?: jf_mitgliedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jf_mitglieds to fetch.
     */
    orderBy?: jf_mitgliedOrderByWithRelationInput | jf_mitgliedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jf_mitglieds.
     */
    cursor?: jf_mitgliedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jf_mitglieds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jf_mitglieds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jf_mitglieds.
     */
    distinct?: Jf_mitgliedScalarFieldEnum | Jf_mitgliedScalarFieldEnum[]
  }

  /**
   * jf_mitglied findFirstOrThrow
   */
  export type jf_mitgliedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_mitglied
     */
    select?: jf_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_mitglied
     */
    omit?: jf_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_mitgliedInclude<ExtArgs> | null
    /**
     * Filter, which jf_mitglied to fetch.
     */
    where?: jf_mitgliedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jf_mitglieds to fetch.
     */
    orderBy?: jf_mitgliedOrderByWithRelationInput | jf_mitgliedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jf_mitglieds.
     */
    cursor?: jf_mitgliedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jf_mitglieds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jf_mitglieds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jf_mitglieds.
     */
    distinct?: Jf_mitgliedScalarFieldEnum | Jf_mitgliedScalarFieldEnum[]
  }

  /**
   * jf_mitglied findMany
   */
  export type jf_mitgliedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_mitglied
     */
    select?: jf_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_mitglied
     */
    omit?: jf_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_mitgliedInclude<ExtArgs> | null
    /**
     * Filter, which jf_mitglieds to fetch.
     */
    where?: jf_mitgliedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jf_mitglieds to fetch.
     */
    orderBy?: jf_mitgliedOrderByWithRelationInput | jf_mitgliedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing jf_mitglieds.
     */
    cursor?: jf_mitgliedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jf_mitglieds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jf_mitglieds.
     */
    skip?: number
    distinct?: Jf_mitgliedScalarFieldEnum | Jf_mitgliedScalarFieldEnum[]
  }

  /**
   * jf_mitglied create
   */
  export type jf_mitgliedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_mitglied
     */
    select?: jf_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_mitglied
     */
    omit?: jf_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_mitgliedInclude<ExtArgs> | null
    /**
     * The data needed to create a jf_mitglied.
     */
    data: XOR<jf_mitgliedCreateInput, jf_mitgliedUncheckedCreateInput>
  }

  /**
   * jf_mitglied createMany
   */
  export type jf_mitgliedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many jf_mitglieds.
     */
    data: jf_mitgliedCreateManyInput | jf_mitgliedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * jf_mitglied createManyAndReturn
   */
  export type jf_mitgliedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_mitglied
     */
    select?: jf_mitgliedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the jf_mitglied
     */
    omit?: jf_mitgliedOmit<ExtArgs> | null
    /**
     * The data used to create many jf_mitglieds.
     */
    data: jf_mitgliedCreateManyInput | jf_mitgliedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * jf_mitglied update
   */
  export type jf_mitgliedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_mitglied
     */
    select?: jf_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_mitglied
     */
    omit?: jf_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_mitgliedInclude<ExtArgs> | null
    /**
     * The data needed to update a jf_mitglied.
     */
    data: XOR<jf_mitgliedUpdateInput, jf_mitgliedUncheckedUpdateInput>
    /**
     * Choose, which jf_mitglied to update.
     */
    where: jf_mitgliedWhereUniqueInput
  }

  /**
   * jf_mitglied updateMany
   */
  export type jf_mitgliedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update jf_mitglieds.
     */
    data: XOR<jf_mitgliedUpdateManyMutationInput, jf_mitgliedUncheckedUpdateManyInput>
    /**
     * Filter which jf_mitglieds to update
     */
    where?: jf_mitgliedWhereInput
    /**
     * Limit how many jf_mitglieds to update.
     */
    limit?: number
  }

  /**
   * jf_mitglied updateManyAndReturn
   */
  export type jf_mitgliedUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_mitglied
     */
    select?: jf_mitgliedSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the jf_mitglied
     */
    omit?: jf_mitgliedOmit<ExtArgs> | null
    /**
     * The data used to update jf_mitglieds.
     */
    data: XOR<jf_mitgliedUpdateManyMutationInput, jf_mitgliedUncheckedUpdateManyInput>
    /**
     * Filter which jf_mitglieds to update
     */
    where?: jf_mitgliedWhereInput
    /**
     * Limit how many jf_mitglieds to update.
     */
    limit?: number
  }

  /**
   * jf_mitglied upsert
   */
  export type jf_mitgliedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_mitglied
     */
    select?: jf_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_mitglied
     */
    omit?: jf_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_mitgliedInclude<ExtArgs> | null
    /**
     * The filter to search for the jf_mitglied to update in case it exists.
     */
    where: jf_mitgliedWhereUniqueInput
    /**
     * In case the jf_mitglied found by the `where` argument doesn't exist, create a new jf_mitglied with this data.
     */
    create: XOR<jf_mitgliedCreateInput, jf_mitgliedUncheckedCreateInput>
    /**
     * In case the jf_mitglied was found with the provided `where` argument, update it with this data.
     */
    update: XOR<jf_mitgliedUpdateInput, jf_mitgliedUncheckedUpdateInput>
  }

  /**
   * jf_mitglied delete
   */
  export type jf_mitgliedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_mitglied
     */
    select?: jf_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_mitglied
     */
    omit?: jf_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_mitgliedInclude<ExtArgs> | null
    /**
     * Filter which jf_mitglied to delete.
     */
    where: jf_mitgliedWhereUniqueInput
  }

  /**
   * jf_mitglied deleteMany
   */
  export type jf_mitgliedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jf_mitglieds to delete
     */
    where?: jf_mitgliedWhereInput
    /**
     * Limit how many jf_mitglieds to delete.
     */
    limit?: number
  }

  /**
   * jf_mitglied.allergie
   */
  export type jf_mitglied$allergieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the allergie
     */
    select?: allergieSelect<ExtArgs> | null
    /**
     * Omit specific fields from the allergie
     */
    omit?: allergieOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: allergieInclude<ExtArgs> | null
    where?: allergieWhereInput
    orderBy?: allergieOrderByWithRelationInput | allergieOrderByWithRelationInput[]
    cursor?: allergieWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AllergieScalarFieldEnum | AllergieScalarFieldEnum[]
  }

  /**
   * jf_mitglied.jf_erziehungsberechtigter
   */
  export type jf_mitglied$jf_erziehungsberechtigterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_erziehungsberechtigter
     */
    select?: jf_erziehungsberechtigterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_erziehungsberechtigter
     */
    omit?: jf_erziehungsberechtigterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_erziehungsberechtigterInclude<ExtArgs> | null
    where?: jf_erziehungsberechtigterWhereInput
    orderBy?: jf_erziehungsberechtigterOrderByWithRelationInput | jf_erziehungsberechtigterOrderByWithRelationInput[]
    cursor?: jf_erziehungsberechtigterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Jf_erziehungsberechtigterScalarFieldEnum | Jf_erziehungsberechtigterScalarFieldEnum[]
  }

  /**
   * jf_mitglied without action
   */
  export type jf_mitgliedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jf_mitglied
     */
    select?: jf_mitgliedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jf_mitglied
     */
    omit?: jf_mitgliedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: jf_mitgliedInclude<ExtArgs> | null
  }


  /**
   * Model lehrgang
   */

  export type AggregateLehrgang = {
    _count: LehrgangCountAggregateOutputType | null
    _avg: LehrgangAvgAggregateOutputType | null
    _sum: LehrgangSumAggregateOutputType | null
    _min: LehrgangMinAggregateOutputType | null
    _max: LehrgangMaxAggregateOutputType | null
  }

  export type LehrgangAvgAggregateOutputType = {
    ID: number | null
    Reihenfolge: number | null
  }

  export type LehrgangSumAggregateOutputType = {
    ID: number | null
    Reihenfolge: number | null
  }

  export type LehrgangMinAggregateOutputType = {
    ID: number | null
    Abk_rzung: string | null
    Beschreibung: string | null
    Reihenfolge: number | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type LehrgangMaxAggregateOutputType = {
    ID: number | null
    Abk_rzung: string | null
    Beschreibung: string | null
    Reihenfolge: number | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type LehrgangCountAggregateOutputType = {
    ID: number
    Abk_rzung: number
    Beschreibung: number
    Reihenfolge: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type LehrgangAvgAggregateInputType = {
    ID?: true
    Reihenfolge?: true
  }

  export type LehrgangSumAggregateInputType = {
    ID?: true
    Reihenfolge?: true
  }

  export type LehrgangMinAggregateInputType = {
    ID?: true
    Abk_rzung?: true
    Beschreibung?: true
    Reihenfolge?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type LehrgangMaxAggregateInputType = {
    ID?: true
    Abk_rzung?: true
    Beschreibung?: true
    Reihenfolge?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type LehrgangCountAggregateInputType = {
    ID?: true
    Abk_rzung?: true
    Beschreibung?: true
    Reihenfolge?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type LehrgangAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lehrgang to aggregate.
     */
    where?: lehrgangWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lehrgangs to fetch.
     */
    orderBy?: lehrgangOrderByWithRelationInput | lehrgangOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: lehrgangWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lehrgangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lehrgangs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lehrgangs
    **/
    _count?: true | LehrgangCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LehrgangAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LehrgangSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LehrgangMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LehrgangMaxAggregateInputType
  }

  export type GetLehrgangAggregateType<T extends LehrgangAggregateArgs> = {
        [P in keyof T & keyof AggregateLehrgang]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLehrgang[P]>
      : GetScalarType<T[P], AggregateLehrgang[P]>
  }




  export type lehrgangGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lehrgangWhereInput
    orderBy?: lehrgangOrderByWithAggregationInput | lehrgangOrderByWithAggregationInput[]
    by: LehrgangScalarFieldEnum[] | LehrgangScalarFieldEnum
    having?: lehrgangScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LehrgangCountAggregateInputType | true
    _avg?: LehrgangAvgAggregateInputType
    _sum?: LehrgangSumAggregateInputType
    _min?: LehrgangMinAggregateInputType
    _max?: LehrgangMaxAggregateInputType
  }

  export type LehrgangGroupByOutputType = {
    ID: number
    Abk_rzung: string | null
    Beschreibung: string | null
    Reihenfolge: number | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
    _count: LehrgangCountAggregateOutputType | null
    _avg: LehrgangAvgAggregateOutputType | null
    _sum: LehrgangSumAggregateOutputType | null
    _min: LehrgangMinAggregateOutputType | null
    _max: LehrgangMaxAggregateOutputType | null
  }

  type GetLehrgangGroupByPayload<T extends lehrgangGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LehrgangGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LehrgangGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LehrgangGroupByOutputType[P]>
            : GetScalarType<T[P], LehrgangGroupByOutputType[P]>
        }
      >
    >


  export type lehrgangSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Abk_rzung?: boolean
    Beschreibung?: boolean
    Reihenfolge?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    ff_mitglied_lehrgang?: boolean | lehrgang$ff_mitglied_lehrgangArgs<ExtArgs>
    _count?: boolean | LehrgangCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lehrgang"]>

  export type lehrgangSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Abk_rzung?: boolean
    Beschreibung?: boolean
    Reihenfolge?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["lehrgang"]>

  export type lehrgangSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Abk_rzung?: boolean
    Beschreibung?: boolean
    Reihenfolge?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["lehrgang"]>

  export type lehrgangSelectScalar = {
    ID?: boolean
    Abk_rzung?: boolean
    Beschreibung?: boolean
    Reihenfolge?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type lehrgangOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Abk_rzung" | "Beschreibung" | "Reihenfolge" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["lehrgang"]>
  export type lehrgangInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ff_mitglied_lehrgang?: boolean | lehrgang$ff_mitglied_lehrgangArgs<ExtArgs>
    _count?: boolean | LehrgangCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type lehrgangIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type lehrgangIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $lehrgangPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "lehrgang"
    objects: {
      ff_mitglied_lehrgang: Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Abk_rzung: string | null
      Beschreibung: string | null
      Reihenfolge: number | null
      Erstellt_am: Date | null
      Geaendert_am: Date | null
    }, ExtArgs["result"]["lehrgang"]>
    composites: {}
  }

  type lehrgangGetPayload<S extends boolean | null | undefined | lehrgangDefaultArgs> = $Result.GetResult<Prisma.$lehrgangPayload, S>

  type lehrgangCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<lehrgangFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LehrgangCountAggregateInputType | true
    }

  export interface lehrgangDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['lehrgang'], meta: { name: 'lehrgang' } }
    /**
     * Find zero or one Lehrgang that matches the filter.
     * @param {lehrgangFindUniqueArgs} args - Arguments to find a Lehrgang
     * @example
     * // Get one Lehrgang
     * const lehrgang = await prisma.lehrgang.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends lehrgangFindUniqueArgs>(args: SelectSubset<T, lehrgangFindUniqueArgs<ExtArgs>>): Prisma__lehrgangClient<$Result.GetResult<Prisma.$lehrgangPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lehrgang that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {lehrgangFindUniqueOrThrowArgs} args - Arguments to find a Lehrgang
     * @example
     * // Get one Lehrgang
     * const lehrgang = await prisma.lehrgang.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends lehrgangFindUniqueOrThrowArgs>(args: SelectSubset<T, lehrgangFindUniqueOrThrowArgs<ExtArgs>>): Prisma__lehrgangClient<$Result.GetResult<Prisma.$lehrgangPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lehrgang that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lehrgangFindFirstArgs} args - Arguments to find a Lehrgang
     * @example
     * // Get one Lehrgang
     * const lehrgang = await prisma.lehrgang.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends lehrgangFindFirstArgs>(args?: SelectSubset<T, lehrgangFindFirstArgs<ExtArgs>>): Prisma__lehrgangClient<$Result.GetResult<Prisma.$lehrgangPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lehrgang that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lehrgangFindFirstOrThrowArgs} args - Arguments to find a Lehrgang
     * @example
     * // Get one Lehrgang
     * const lehrgang = await prisma.lehrgang.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends lehrgangFindFirstOrThrowArgs>(args?: SelectSubset<T, lehrgangFindFirstOrThrowArgs<ExtArgs>>): Prisma__lehrgangClient<$Result.GetResult<Prisma.$lehrgangPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lehrgangs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lehrgangFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lehrgangs
     * const lehrgangs = await prisma.lehrgang.findMany()
     * 
     * // Get first 10 Lehrgangs
     * const lehrgangs = await prisma.lehrgang.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const lehrgangWithIDOnly = await prisma.lehrgang.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends lehrgangFindManyArgs>(args?: SelectSubset<T, lehrgangFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lehrgangPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lehrgang.
     * @param {lehrgangCreateArgs} args - Arguments to create a Lehrgang.
     * @example
     * // Create one Lehrgang
     * const Lehrgang = await prisma.lehrgang.create({
     *   data: {
     *     // ... data to create a Lehrgang
     *   }
     * })
     * 
     */
    create<T extends lehrgangCreateArgs>(args: SelectSubset<T, lehrgangCreateArgs<ExtArgs>>): Prisma__lehrgangClient<$Result.GetResult<Prisma.$lehrgangPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lehrgangs.
     * @param {lehrgangCreateManyArgs} args - Arguments to create many Lehrgangs.
     * @example
     * // Create many Lehrgangs
     * const lehrgang = await prisma.lehrgang.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends lehrgangCreateManyArgs>(args?: SelectSubset<T, lehrgangCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lehrgangs and returns the data saved in the database.
     * @param {lehrgangCreateManyAndReturnArgs} args - Arguments to create many Lehrgangs.
     * @example
     * // Create many Lehrgangs
     * const lehrgang = await prisma.lehrgang.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lehrgangs and only return the `ID`
     * const lehrgangWithIDOnly = await prisma.lehrgang.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends lehrgangCreateManyAndReturnArgs>(args?: SelectSubset<T, lehrgangCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lehrgangPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lehrgang.
     * @param {lehrgangDeleteArgs} args - Arguments to delete one Lehrgang.
     * @example
     * // Delete one Lehrgang
     * const Lehrgang = await prisma.lehrgang.delete({
     *   where: {
     *     // ... filter to delete one Lehrgang
     *   }
     * })
     * 
     */
    delete<T extends lehrgangDeleteArgs>(args: SelectSubset<T, lehrgangDeleteArgs<ExtArgs>>): Prisma__lehrgangClient<$Result.GetResult<Prisma.$lehrgangPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lehrgang.
     * @param {lehrgangUpdateArgs} args - Arguments to update one Lehrgang.
     * @example
     * // Update one Lehrgang
     * const lehrgang = await prisma.lehrgang.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends lehrgangUpdateArgs>(args: SelectSubset<T, lehrgangUpdateArgs<ExtArgs>>): Prisma__lehrgangClient<$Result.GetResult<Prisma.$lehrgangPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lehrgangs.
     * @param {lehrgangDeleteManyArgs} args - Arguments to filter Lehrgangs to delete.
     * @example
     * // Delete a few Lehrgangs
     * const { count } = await prisma.lehrgang.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends lehrgangDeleteManyArgs>(args?: SelectSubset<T, lehrgangDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lehrgangs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lehrgangUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lehrgangs
     * const lehrgang = await prisma.lehrgang.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends lehrgangUpdateManyArgs>(args: SelectSubset<T, lehrgangUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lehrgangs and returns the data updated in the database.
     * @param {lehrgangUpdateManyAndReturnArgs} args - Arguments to update many Lehrgangs.
     * @example
     * // Update many Lehrgangs
     * const lehrgang = await prisma.lehrgang.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lehrgangs and only return the `ID`
     * const lehrgangWithIDOnly = await prisma.lehrgang.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends lehrgangUpdateManyAndReturnArgs>(args: SelectSubset<T, lehrgangUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lehrgangPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lehrgang.
     * @param {lehrgangUpsertArgs} args - Arguments to update or create a Lehrgang.
     * @example
     * // Update or create a Lehrgang
     * const lehrgang = await prisma.lehrgang.upsert({
     *   create: {
     *     // ... data to create a Lehrgang
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lehrgang we want to update
     *   }
     * })
     */
    upsert<T extends lehrgangUpsertArgs>(args: SelectSubset<T, lehrgangUpsertArgs<ExtArgs>>): Prisma__lehrgangClient<$Result.GetResult<Prisma.$lehrgangPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lehrgangs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lehrgangCountArgs} args - Arguments to filter Lehrgangs to count.
     * @example
     * // Count the number of Lehrgangs
     * const count = await prisma.lehrgang.count({
     *   where: {
     *     // ... the filter for the Lehrgangs we want to count
     *   }
     * })
    **/
    count<T extends lehrgangCountArgs>(
      args?: Subset<T, lehrgangCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LehrgangCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lehrgang.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LehrgangAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LehrgangAggregateArgs>(args: Subset<T, LehrgangAggregateArgs>): Prisma.PrismaPromise<GetLehrgangAggregateType<T>>

    /**
     * Group by Lehrgang.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lehrgangGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends lehrgangGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: lehrgangGroupByArgs['orderBy'] }
        : { orderBy?: lehrgangGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, lehrgangGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLehrgangGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the lehrgang model
   */
  readonly fields: lehrgangFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for lehrgang.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__lehrgangClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ff_mitglied_lehrgang<T extends lehrgang$ff_mitglied_lehrgangArgs<ExtArgs> = {}>(args?: Subset<T, lehrgang$ff_mitglied_lehrgangArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ff_mitglied_lehrgangPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the lehrgang model
   */
  interface lehrgangFieldRefs {
    readonly ID: FieldRef<"lehrgang", 'Int'>
    readonly Abk_rzung: FieldRef<"lehrgang", 'String'>
    readonly Beschreibung: FieldRef<"lehrgang", 'String'>
    readonly Reihenfolge: FieldRef<"lehrgang", 'Int'>
    readonly Erstellt_am: FieldRef<"lehrgang", 'DateTime'>
    readonly Geaendert_am: FieldRef<"lehrgang", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * lehrgang findUnique
   */
  export type lehrgangFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lehrgang
     */
    select?: lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lehrgang
     */
    omit?: lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lehrgangInclude<ExtArgs> | null
    /**
     * Filter, which lehrgang to fetch.
     */
    where: lehrgangWhereUniqueInput
  }

  /**
   * lehrgang findUniqueOrThrow
   */
  export type lehrgangFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lehrgang
     */
    select?: lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lehrgang
     */
    omit?: lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lehrgangInclude<ExtArgs> | null
    /**
     * Filter, which lehrgang to fetch.
     */
    where: lehrgangWhereUniqueInput
  }

  /**
   * lehrgang findFirst
   */
  export type lehrgangFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lehrgang
     */
    select?: lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lehrgang
     */
    omit?: lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lehrgangInclude<ExtArgs> | null
    /**
     * Filter, which lehrgang to fetch.
     */
    where?: lehrgangWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lehrgangs to fetch.
     */
    orderBy?: lehrgangOrderByWithRelationInput | lehrgangOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lehrgangs.
     */
    cursor?: lehrgangWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lehrgangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lehrgangs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lehrgangs.
     */
    distinct?: LehrgangScalarFieldEnum | LehrgangScalarFieldEnum[]
  }

  /**
   * lehrgang findFirstOrThrow
   */
  export type lehrgangFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lehrgang
     */
    select?: lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lehrgang
     */
    omit?: lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lehrgangInclude<ExtArgs> | null
    /**
     * Filter, which lehrgang to fetch.
     */
    where?: lehrgangWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lehrgangs to fetch.
     */
    orderBy?: lehrgangOrderByWithRelationInput | lehrgangOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lehrgangs.
     */
    cursor?: lehrgangWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lehrgangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lehrgangs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lehrgangs.
     */
    distinct?: LehrgangScalarFieldEnum | LehrgangScalarFieldEnum[]
  }

  /**
   * lehrgang findMany
   */
  export type lehrgangFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lehrgang
     */
    select?: lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lehrgang
     */
    omit?: lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lehrgangInclude<ExtArgs> | null
    /**
     * Filter, which lehrgangs to fetch.
     */
    where?: lehrgangWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lehrgangs to fetch.
     */
    orderBy?: lehrgangOrderByWithRelationInput | lehrgangOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lehrgangs.
     */
    cursor?: lehrgangWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lehrgangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lehrgangs.
     */
    skip?: number
    distinct?: LehrgangScalarFieldEnum | LehrgangScalarFieldEnum[]
  }

  /**
   * lehrgang create
   */
  export type lehrgangCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lehrgang
     */
    select?: lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lehrgang
     */
    omit?: lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lehrgangInclude<ExtArgs> | null
    /**
     * The data needed to create a lehrgang.
     */
    data?: XOR<lehrgangCreateInput, lehrgangUncheckedCreateInput>
  }

  /**
   * lehrgang createMany
   */
  export type lehrgangCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many lehrgangs.
     */
    data: lehrgangCreateManyInput | lehrgangCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * lehrgang createManyAndReturn
   */
  export type lehrgangCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lehrgang
     */
    select?: lehrgangSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the lehrgang
     */
    omit?: lehrgangOmit<ExtArgs> | null
    /**
     * The data used to create many lehrgangs.
     */
    data: lehrgangCreateManyInput | lehrgangCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * lehrgang update
   */
  export type lehrgangUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lehrgang
     */
    select?: lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lehrgang
     */
    omit?: lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lehrgangInclude<ExtArgs> | null
    /**
     * The data needed to update a lehrgang.
     */
    data: XOR<lehrgangUpdateInput, lehrgangUncheckedUpdateInput>
    /**
     * Choose, which lehrgang to update.
     */
    where: lehrgangWhereUniqueInput
  }

  /**
   * lehrgang updateMany
   */
  export type lehrgangUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update lehrgangs.
     */
    data: XOR<lehrgangUpdateManyMutationInput, lehrgangUncheckedUpdateManyInput>
    /**
     * Filter which lehrgangs to update
     */
    where?: lehrgangWhereInput
    /**
     * Limit how many lehrgangs to update.
     */
    limit?: number
  }

  /**
   * lehrgang updateManyAndReturn
   */
  export type lehrgangUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lehrgang
     */
    select?: lehrgangSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the lehrgang
     */
    omit?: lehrgangOmit<ExtArgs> | null
    /**
     * The data used to update lehrgangs.
     */
    data: XOR<lehrgangUpdateManyMutationInput, lehrgangUncheckedUpdateManyInput>
    /**
     * Filter which lehrgangs to update
     */
    where?: lehrgangWhereInput
    /**
     * Limit how many lehrgangs to update.
     */
    limit?: number
  }

  /**
   * lehrgang upsert
   */
  export type lehrgangUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lehrgang
     */
    select?: lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lehrgang
     */
    omit?: lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lehrgangInclude<ExtArgs> | null
    /**
     * The filter to search for the lehrgang to update in case it exists.
     */
    where: lehrgangWhereUniqueInput
    /**
     * In case the lehrgang found by the `where` argument doesn't exist, create a new lehrgang with this data.
     */
    create: XOR<lehrgangCreateInput, lehrgangUncheckedCreateInput>
    /**
     * In case the lehrgang was found with the provided `where` argument, update it with this data.
     */
    update: XOR<lehrgangUpdateInput, lehrgangUncheckedUpdateInput>
  }

  /**
   * lehrgang delete
   */
  export type lehrgangDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lehrgang
     */
    select?: lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lehrgang
     */
    omit?: lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lehrgangInclude<ExtArgs> | null
    /**
     * Filter which lehrgang to delete.
     */
    where: lehrgangWhereUniqueInput
  }

  /**
   * lehrgang deleteMany
   */
  export type lehrgangDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lehrgangs to delete
     */
    where?: lehrgangWhereInput
    /**
     * Limit how many lehrgangs to delete.
     */
    limit?: number
  }

  /**
   * lehrgang.ff_mitglied_lehrgang
   */
  export type lehrgang$ff_mitglied_lehrgangArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ff_mitglied_lehrgang
     */
    select?: ff_mitglied_lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ff_mitglied_lehrgang
     */
    omit?: ff_mitglied_lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ff_mitglied_lehrgangInclude<ExtArgs> | null
    where?: ff_mitglied_lehrgangWhereInput
    orderBy?: ff_mitglied_lehrgangOrderByWithRelationInput | ff_mitglied_lehrgangOrderByWithRelationInput[]
    cursor?: ff_mitglied_lehrgangWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Ff_mitglied_lehrgangScalarFieldEnum | Ff_mitglied_lehrgangScalarFieldEnum[]
  }

  /**
   * lehrgang without action
   */
  export type lehrgangDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lehrgang
     */
    select?: lehrgangSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lehrgang
     */
    omit?: lehrgangOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lehrgangInclude<ExtArgs> | null
  }


  /**
   * Model mitglied_funktionen
   */

  export type AggregateMitglied_funktionen = {
    _count: Mitglied_funktionenCountAggregateOutputType | null
    _avg: Mitglied_funktionenAvgAggregateOutputType | null
    _sum: Mitglied_funktionenSumAggregateOutputType | null
    _min: Mitglied_funktionenMinAggregateOutputType | null
    _max: Mitglied_funktionenMaxAggregateOutputType | null
  }

  export type Mitglied_funktionenAvgAggregateOutputType = {
    ID: number | null
    Mitglied_ID: number | null
    Funktion_ID: number | null
  }

  export type Mitglied_funktionenSumAggregateOutputType = {
    ID: number | null
    Mitglied_ID: number | null
    Funktion_ID: number | null
  }

  export type Mitglied_funktionenMinAggregateOutputType = {
    ID: number | null
    Mitglied_ID: number | null
    Funktion_ID: number | null
    Typ: $Enums.mitglied_funktionen_typ | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Mitglied_funktionenMaxAggregateOutputType = {
    ID: number | null
    Mitglied_ID: number | null
    Funktion_ID: number | null
    Typ: $Enums.mitglied_funktionen_typ | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Mitglied_funktionenCountAggregateOutputType = {
    ID: number
    Mitglied_ID: number
    Funktion_ID: number
    Typ: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type Mitglied_funktionenAvgAggregateInputType = {
    ID?: true
    Mitglied_ID?: true
    Funktion_ID?: true
  }

  export type Mitglied_funktionenSumAggregateInputType = {
    ID?: true
    Mitglied_ID?: true
    Funktion_ID?: true
  }

  export type Mitglied_funktionenMinAggregateInputType = {
    ID?: true
    Mitglied_ID?: true
    Funktion_ID?: true
    Typ?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Mitglied_funktionenMaxAggregateInputType = {
    ID?: true
    Mitglied_ID?: true
    Funktion_ID?: true
    Typ?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Mitglied_funktionenCountAggregateInputType = {
    ID?: true
    Mitglied_ID?: true
    Funktion_ID?: true
    Typ?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type Mitglied_funktionenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mitglied_funktionen to aggregate.
     */
    where?: mitglied_funktionenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mitglied_funktionens to fetch.
     */
    orderBy?: mitglied_funktionenOrderByWithRelationInput | mitglied_funktionenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: mitglied_funktionenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mitglied_funktionens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mitglied_funktionens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned mitglied_funktionens
    **/
    _count?: true | Mitglied_funktionenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Mitglied_funktionenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Mitglied_funktionenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Mitglied_funktionenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Mitglied_funktionenMaxAggregateInputType
  }

  export type GetMitglied_funktionenAggregateType<T extends Mitglied_funktionenAggregateArgs> = {
        [P in keyof T & keyof AggregateMitglied_funktionen]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMitglied_funktionen[P]>
      : GetScalarType<T[P], AggregateMitglied_funktionen[P]>
  }




  export type mitglied_funktionenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mitglied_funktionenWhereInput
    orderBy?: mitglied_funktionenOrderByWithAggregationInput | mitglied_funktionenOrderByWithAggregationInput[]
    by: Mitglied_funktionenScalarFieldEnum[] | Mitglied_funktionenScalarFieldEnum
    having?: mitglied_funktionenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Mitglied_funktionenCountAggregateInputType | true
    _avg?: Mitglied_funktionenAvgAggregateInputType
    _sum?: Mitglied_funktionenSumAggregateInputType
    _min?: Mitglied_funktionenMinAggregateInputType
    _max?: Mitglied_funktionenMaxAggregateInputType
  }

  export type Mitglied_funktionenGroupByOutputType = {
    ID: number
    Mitglied_ID: number
    Funktion_ID: number
    Typ: $Enums.mitglied_funktionen_typ
    Erstellt_am: Date | null
    Geaendert_am: Date | null
    _count: Mitglied_funktionenCountAggregateOutputType | null
    _avg: Mitglied_funktionenAvgAggregateOutputType | null
    _sum: Mitglied_funktionenSumAggregateOutputType | null
    _min: Mitglied_funktionenMinAggregateOutputType | null
    _max: Mitglied_funktionenMaxAggregateOutputType | null
  }

  type GetMitglied_funktionenGroupByPayload<T extends mitglied_funktionenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Mitglied_funktionenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Mitglied_funktionenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Mitglied_funktionenGroupByOutputType[P]>
            : GetScalarType<T[P], Mitglied_funktionenGroupByOutputType[P]>
        }
      >
    >


  export type mitglied_funktionenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Mitglied_ID?: boolean
    Funktion_ID?: boolean
    Typ?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mitglied_funktionen"]>

  export type mitglied_funktionenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Mitglied_ID?: boolean
    Funktion_ID?: boolean
    Typ?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mitglied_funktionen"]>

  export type mitglied_funktionenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Mitglied_ID?: boolean
    Funktion_ID?: boolean
    Typ?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mitglied_funktionen"]>

  export type mitglied_funktionenSelectScalar = {
    ID?: boolean
    Mitglied_ID?: boolean
    Funktion_ID?: boolean
    Typ?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type mitglied_funktionenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Mitglied_ID" | "Funktion_ID" | "Typ" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["mitglied_funktionen"]>
  export type mitglied_funktionenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
  }
  export type mitglied_funktionenIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
  }
  export type mitglied_funktionenIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ff_mitglied?: boolean | ff_mitgliedDefaultArgs<ExtArgs>
  }

  export type $mitglied_funktionenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "mitglied_funktionen"
    objects: {
      ff_mitglied: Prisma.$ff_mitgliedPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Mitglied_ID: number
      Funktion_ID: number
      Typ: $Enums.mitglied_funktionen_typ
      Erstellt_am: Date | null
      Geaendert_am: Date | null
    }, ExtArgs["result"]["mitglied_funktionen"]>
    composites: {}
  }

  type mitglied_funktionenGetPayload<S extends boolean | null | undefined | mitglied_funktionenDefaultArgs> = $Result.GetResult<Prisma.$mitglied_funktionenPayload, S>

  type mitglied_funktionenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<mitglied_funktionenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Mitglied_funktionenCountAggregateInputType | true
    }

  export interface mitglied_funktionenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['mitglied_funktionen'], meta: { name: 'mitglied_funktionen' } }
    /**
     * Find zero or one Mitglied_funktionen that matches the filter.
     * @param {mitglied_funktionenFindUniqueArgs} args - Arguments to find a Mitglied_funktionen
     * @example
     * // Get one Mitglied_funktionen
     * const mitglied_funktionen = await prisma.mitglied_funktionen.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends mitglied_funktionenFindUniqueArgs>(args: SelectSubset<T, mitglied_funktionenFindUniqueArgs<ExtArgs>>): Prisma__mitglied_funktionenClient<$Result.GetResult<Prisma.$mitglied_funktionenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Mitglied_funktionen that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {mitglied_funktionenFindUniqueOrThrowArgs} args - Arguments to find a Mitglied_funktionen
     * @example
     * // Get one Mitglied_funktionen
     * const mitglied_funktionen = await prisma.mitglied_funktionen.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends mitglied_funktionenFindUniqueOrThrowArgs>(args: SelectSubset<T, mitglied_funktionenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__mitglied_funktionenClient<$Result.GetResult<Prisma.$mitglied_funktionenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mitglied_funktionen that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mitglied_funktionenFindFirstArgs} args - Arguments to find a Mitglied_funktionen
     * @example
     * // Get one Mitglied_funktionen
     * const mitglied_funktionen = await prisma.mitglied_funktionen.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends mitglied_funktionenFindFirstArgs>(args?: SelectSubset<T, mitglied_funktionenFindFirstArgs<ExtArgs>>): Prisma__mitglied_funktionenClient<$Result.GetResult<Prisma.$mitglied_funktionenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mitglied_funktionen that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mitglied_funktionenFindFirstOrThrowArgs} args - Arguments to find a Mitglied_funktionen
     * @example
     * // Get one Mitglied_funktionen
     * const mitglied_funktionen = await prisma.mitglied_funktionen.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends mitglied_funktionenFindFirstOrThrowArgs>(args?: SelectSubset<T, mitglied_funktionenFindFirstOrThrowArgs<ExtArgs>>): Prisma__mitglied_funktionenClient<$Result.GetResult<Prisma.$mitglied_funktionenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Mitglied_funktionens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mitglied_funktionenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mitglied_funktionens
     * const mitglied_funktionens = await prisma.mitglied_funktionen.findMany()
     * 
     * // Get first 10 Mitglied_funktionens
     * const mitglied_funktionens = await prisma.mitglied_funktionen.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const mitglied_funktionenWithIDOnly = await prisma.mitglied_funktionen.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends mitglied_funktionenFindManyArgs>(args?: SelectSubset<T, mitglied_funktionenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mitglied_funktionenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Mitglied_funktionen.
     * @param {mitglied_funktionenCreateArgs} args - Arguments to create a Mitglied_funktionen.
     * @example
     * // Create one Mitglied_funktionen
     * const Mitglied_funktionen = await prisma.mitglied_funktionen.create({
     *   data: {
     *     // ... data to create a Mitglied_funktionen
     *   }
     * })
     * 
     */
    create<T extends mitglied_funktionenCreateArgs>(args: SelectSubset<T, mitglied_funktionenCreateArgs<ExtArgs>>): Prisma__mitglied_funktionenClient<$Result.GetResult<Prisma.$mitglied_funktionenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Mitglied_funktionens.
     * @param {mitglied_funktionenCreateManyArgs} args - Arguments to create many Mitglied_funktionens.
     * @example
     * // Create many Mitglied_funktionens
     * const mitglied_funktionen = await prisma.mitglied_funktionen.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends mitglied_funktionenCreateManyArgs>(args?: SelectSubset<T, mitglied_funktionenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Mitglied_funktionens and returns the data saved in the database.
     * @param {mitglied_funktionenCreateManyAndReturnArgs} args - Arguments to create many Mitglied_funktionens.
     * @example
     * // Create many Mitglied_funktionens
     * const mitglied_funktionen = await prisma.mitglied_funktionen.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Mitglied_funktionens and only return the `ID`
     * const mitglied_funktionenWithIDOnly = await prisma.mitglied_funktionen.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends mitglied_funktionenCreateManyAndReturnArgs>(args?: SelectSubset<T, mitglied_funktionenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mitglied_funktionenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Mitglied_funktionen.
     * @param {mitglied_funktionenDeleteArgs} args - Arguments to delete one Mitglied_funktionen.
     * @example
     * // Delete one Mitglied_funktionen
     * const Mitglied_funktionen = await prisma.mitglied_funktionen.delete({
     *   where: {
     *     // ... filter to delete one Mitglied_funktionen
     *   }
     * })
     * 
     */
    delete<T extends mitglied_funktionenDeleteArgs>(args: SelectSubset<T, mitglied_funktionenDeleteArgs<ExtArgs>>): Prisma__mitglied_funktionenClient<$Result.GetResult<Prisma.$mitglied_funktionenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Mitglied_funktionen.
     * @param {mitglied_funktionenUpdateArgs} args - Arguments to update one Mitglied_funktionen.
     * @example
     * // Update one Mitglied_funktionen
     * const mitglied_funktionen = await prisma.mitglied_funktionen.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends mitglied_funktionenUpdateArgs>(args: SelectSubset<T, mitglied_funktionenUpdateArgs<ExtArgs>>): Prisma__mitglied_funktionenClient<$Result.GetResult<Prisma.$mitglied_funktionenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Mitglied_funktionens.
     * @param {mitglied_funktionenDeleteManyArgs} args - Arguments to filter Mitglied_funktionens to delete.
     * @example
     * // Delete a few Mitglied_funktionens
     * const { count } = await prisma.mitglied_funktionen.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends mitglied_funktionenDeleteManyArgs>(args?: SelectSubset<T, mitglied_funktionenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mitglied_funktionens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mitglied_funktionenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mitglied_funktionens
     * const mitglied_funktionen = await prisma.mitglied_funktionen.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends mitglied_funktionenUpdateManyArgs>(args: SelectSubset<T, mitglied_funktionenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mitglied_funktionens and returns the data updated in the database.
     * @param {mitglied_funktionenUpdateManyAndReturnArgs} args - Arguments to update many Mitglied_funktionens.
     * @example
     * // Update many Mitglied_funktionens
     * const mitglied_funktionen = await prisma.mitglied_funktionen.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Mitglied_funktionens and only return the `ID`
     * const mitglied_funktionenWithIDOnly = await prisma.mitglied_funktionen.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends mitglied_funktionenUpdateManyAndReturnArgs>(args: SelectSubset<T, mitglied_funktionenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mitglied_funktionenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Mitglied_funktionen.
     * @param {mitglied_funktionenUpsertArgs} args - Arguments to update or create a Mitglied_funktionen.
     * @example
     * // Update or create a Mitglied_funktionen
     * const mitglied_funktionen = await prisma.mitglied_funktionen.upsert({
     *   create: {
     *     // ... data to create a Mitglied_funktionen
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mitglied_funktionen we want to update
     *   }
     * })
     */
    upsert<T extends mitglied_funktionenUpsertArgs>(args: SelectSubset<T, mitglied_funktionenUpsertArgs<ExtArgs>>): Prisma__mitglied_funktionenClient<$Result.GetResult<Prisma.$mitglied_funktionenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Mitglied_funktionens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mitglied_funktionenCountArgs} args - Arguments to filter Mitglied_funktionens to count.
     * @example
     * // Count the number of Mitglied_funktionens
     * const count = await prisma.mitglied_funktionen.count({
     *   where: {
     *     // ... the filter for the Mitglied_funktionens we want to count
     *   }
     * })
    **/
    count<T extends mitglied_funktionenCountArgs>(
      args?: Subset<T, mitglied_funktionenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Mitglied_funktionenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mitglied_funktionen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Mitglied_funktionenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Mitglied_funktionenAggregateArgs>(args: Subset<T, Mitglied_funktionenAggregateArgs>): Prisma.PrismaPromise<GetMitglied_funktionenAggregateType<T>>

    /**
     * Group by Mitglied_funktionen.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mitglied_funktionenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends mitglied_funktionenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: mitglied_funktionenGroupByArgs['orderBy'] }
        : { orderBy?: mitglied_funktionenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, mitglied_funktionenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMitglied_funktionenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the mitglied_funktionen model
   */
  readonly fields: mitglied_funktionenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for mitglied_funktionen.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__mitglied_funktionenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ff_mitglied<T extends ff_mitgliedDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ff_mitgliedDefaultArgs<ExtArgs>>): Prisma__ff_mitgliedClient<$Result.GetResult<Prisma.$ff_mitgliedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the mitglied_funktionen model
   */
  interface mitglied_funktionenFieldRefs {
    readonly ID: FieldRef<"mitglied_funktionen", 'Int'>
    readonly Mitglied_ID: FieldRef<"mitglied_funktionen", 'Int'>
    readonly Funktion_ID: FieldRef<"mitglied_funktionen", 'Int'>
    readonly Typ: FieldRef<"mitglied_funktionen", 'mitglied_funktionen_typ'>
    readonly Erstellt_am: FieldRef<"mitglied_funktionen", 'DateTime'>
    readonly Geaendert_am: FieldRef<"mitglied_funktionen", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * mitglied_funktionen findUnique
   */
  export type mitglied_funktionenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenInclude<ExtArgs> | null
    /**
     * Filter, which mitglied_funktionen to fetch.
     */
    where: mitglied_funktionenWhereUniqueInput
  }

  /**
   * mitglied_funktionen findUniqueOrThrow
   */
  export type mitglied_funktionenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenInclude<ExtArgs> | null
    /**
     * Filter, which mitglied_funktionen to fetch.
     */
    where: mitglied_funktionenWhereUniqueInput
  }

  /**
   * mitglied_funktionen findFirst
   */
  export type mitglied_funktionenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenInclude<ExtArgs> | null
    /**
     * Filter, which mitglied_funktionen to fetch.
     */
    where?: mitglied_funktionenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mitglied_funktionens to fetch.
     */
    orderBy?: mitglied_funktionenOrderByWithRelationInput | mitglied_funktionenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mitglied_funktionens.
     */
    cursor?: mitglied_funktionenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mitglied_funktionens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mitglied_funktionens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mitglied_funktionens.
     */
    distinct?: Mitglied_funktionenScalarFieldEnum | Mitglied_funktionenScalarFieldEnum[]
  }

  /**
   * mitglied_funktionen findFirstOrThrow
   */
  export type mitglied_funktionenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenInclude<ExtArgs> | null
    /**
     * Filter, which mitglied_funktionen to fetch.
     */
    where?: mitglied_funktionenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mitglied_funktionens to fetch.
     */
    orderBy?: mitglied_funktionenOrderByWithRelationInput | mitglied_funktionenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mitglied_funktionens.
     */
    cursor?: mitglied_funktionenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mitglied_funktionens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mitglied_funktionens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mitglied_funktionens.
     */
    distinct?: Mitglied_funktionenScalarFieldEnum | Mitglied_funktionenScalarFieldEnum[]
  }

  /**
   * mitglied_funktionen findMany
   */
  export type mitglied_funktionenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenInclude<ExtArgs> | null
    /**
     * Filter, which mitglied_funktionens to fetch.
     */
    where?: mitglied_funktionenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mitglied_funktionens to fetch.
     */
    orderBy?: mitglied_funktionenOrderByWithRelationInput | mitglied_funktionenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing mitglied_funktionens.
     */
    cursor?: mitglied_funktionenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mitglied_funktionens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mitglied_funktionens.
     */
    skip?: number
    distinct?: Mitglied_funktionenScalarFieldEnum | Mitglied_funktionenScalarFieldEnum[]
  }

  /**
   * mitglied_funktionen create
   */
  export type mitglied_funktionenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenInclude<ExtArgs> | null
    /**
     * The data needed to create a mitglied_funktionen.
     */
    data: XOR<mitglied_funktionenCreateInput, mitglied_funktionenUncheckedCreateInput>
  }

  /**
   * mitglied_funktionen createMany
   */
  export type mitglied_funktionenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many mitglied_funktionens.
     */
    data: mitglied_funktionenCreateManyInput | mitglied_funktionenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * mitglied_funktionen createManyAndReturn
   */
  export type mitglied_funktionenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * The data used to create many mitglied_funktionens.
     */
    data: mitglied_funktionenCreateManyInput | mitglied_funktionenCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * mitglied_funktionen update
   */
  export type mitglied_funktionenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenInclude<ExtArgs> | null
    /**
     * The data needed to update a mitglied_funktionen.
     */
    data: XOR<mitglied_funktionenUpdateInput, mitglied_funktionenUncheckedUpdateInput>
    /**
     * Choose, which mitglied_funktionen to update.
     */
    where: mitglied_funktionenWhereUniqueInput
  }

  /**
   * mitglied_funktionen updateMany
   */
  export type mitglied_funktionenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update mitglied_funktionens.
     */
    data: XOR<mitglied_funktionenUpdateManyMutationInput, mitglied_funktionenUncheckedUpdateManyInput>
    /**
     * Filter which mitglied_funktionens to update
     */
    where?: mitglied_funktionenWhereInput
    /**
     * Limit how many mitglied_funktionens to update.
     */
    limit?: number
  }

  /**
   * mitglied_funktionen updateManyAndReturn
   */
  export type mitglied_funktionenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * The data used to update mitglied_funktionens.
     */
    data: XOR<mitglied_funktionenUpdateManyMutationInput, mitglied_funktionenUncheckedUpdateManyInput>
    /**
     * Filter which mitglied_funktionens to update
     */
    where?: mitglied_funktionenWhereInput
    /**
     * Limit how many mitglied_funktionens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * mitglied_funktionen upsert
   */
  export type mitglied_funktionenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenInclude<ExtArgs> | null
    /**
     * The filter to search for the mitglied_funktionen to update in case it exists.
     */
    where: mitglied_funktionenWhereUniqueInput
    /**
     * In case the mitglied_funktionen found by the `where` argument doesn't exist, create a new mitglied_funktionen with this data.
     */
    create: XOR<mitglied_funktionenCreateInput, mitglied_funktionenUncheckedCreateInput>
    /**
     * In case the mitglied_funktionen was found with the provided `where` argument, update it with this data.
     */
    update: XOR<mitglied_funktionenUpdateInput, mitglied_funktionenUncheckedUpdateInput>
  }

  /**
   * mitglied_funktionen delete
   */
  export type mitglied_funktionenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenInclude<ExtArgs> | null
    /**
     * Filter which mitglied_funktionen to delete.
     */
    where: mitglied_funktionenWhereUniqueInput
  }

  /**
   * mitglied_funktionen deleteMany
   */
  export type mitglied_funktionenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mitglied_funktionens to delete
     */
    where?: mitglied_funktionenWhereInput
    /**
     * Limit how many mitglied_funktionens to delete.
     */
    limit?: number
  }

  /**
   * mitglied_funktionen without action
   */
  export type mitglied_funktionenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_funktionen
     */
    select?: mitglied_funktionenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_funktionen
     */
    omit?: mitglied_funktionenOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mitglied_funktionenInclude<ExtArgs> | null
  }


  /**
   * Model mitglied_login
   */

  export type AggregateMitglied_login = {
    _count: Mitglied_loginCountAggregateOutputType | null
    _avg: Mitglied_loginAvgAggregateOutputType | null
    _sum: Mitglied_loginSumAggregateOutputType | null
    _min: Mitglied_loginMinAggregateOutputType | null
    _max: Mitglied_loginMaxAggregateOutputType | null
  }

  export type Mitglied_loginAvgAggregateOutputType = {
    ID: number | null
    Benutzer_ID: number | null
    Mitglied_ID: number | null
  }

  export type Mitglied_loginSumAggregateOutputType = {
    ID: number | null
    Benutzer_ID: number | null
    Mitglied_ID: number | null
  }

  export type Mitglied_loginMinAggregateOutputType = {
    ID: number | null
    Benutzer_ID: number | null
    Mitglied_ID: number | null
    Typ: $Enums.mitglied_login_typ | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Mitglied_loginMaxAggregateOutputType = {
    ID: number | null
    Benutzer_ID: number | null
    Mitglied_ID: number | null
    Typ: $Enums.mitglied_login_typ | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type Mitglied_loginCountAggregateOutputType = {
    ID: number
    Benutzer_ID: number
    Mitglied_ID: number
    Typ: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type Mitglied_loginAvgAggregateInputType = {
    ID?: true
    Benutzer_ID?: true
    Mitglied_ID?: true
  }

  export type Mitglied_loginSumAggregateInputType = {
    ID?: true
    Benutzer_ID?: true
    Mitglied_ID?: true
  }

  export type Mitglied_loginMinAggregateInputType = {
    ID?: true
    Benutzer_ID?: true
    Mitglied_ID?: true
    Typ?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Mitglied_loginMaxAggregateInputType = {
    ID?: true
    Benutzer_ID?: true
    Mitglied_ID?: true
    Typ?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type Mitglied_loginCountAggregateInputType = {
    ID?: true
    Benutzer_ID?: true
    Mitglied_ID?: true
    Typ?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type Mitglied_loginAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mitglied_login to aggregate.
     */
    where?: mitglied_loginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mitglied_logins to fetch.
     */
    orderBy?: mitglied_loginOrderByWithRelationInput | mitglied_loginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: mitglied_loginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mitglied_logins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mitglied_logins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned mitglied_logins
    **/
    _count?: true | Mitglied_loginCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Mitglied_loginAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Mitglied_loginSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Mitglied_loginMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Mitglied_loginMaxAggregateInputType
  }

  export type GetMitglied_loginAggregateType<T extends Mitglied_loginAggregateArgs> = {
        [P in keyof T & keyof AggregateMitglied_login]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMitglied_login[P]>
      : GetScalarType<T[P], AggregateMitglied_login[P]>
  }




  export type mitglied_loginGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mitglied_loginWhereInput
    orderBy?: mitglied_loginOrderByWithAggregationInput | mitglied_loginOrderByWithAggregationInput[]
    by: Mitglied_loginScalarFieldEnum[] | Mitglied_loginScalarFieldEnum
    having?: mitglied_loginScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Mitglied_loginCountAggregateInputType | true
    _avg?: Mitglied_loginAvgAggregateInputType
    _sum?: Mitglied_loginSumAggregateInputType
    _min?: Mitglied_loginMinAggregateInputType
    _max?: Mitglied_loginMaxAggregateInputType
  }

  export type Mitglied_loginGroupByOutputType = {
    ID: number
    Benutzer_ID: number
    Mitglied_ID: number
    Typ: $Enums.mitglied_login_typ
    Erstellt_am: Date
    Geaendert_am: Date | null
    _count: Mitglied_loginCountAggregateOutputType | null
    _avg: Mitglied_loginAvgAggregateOutputType | null
    _sum: Mitglied_loginSumAggregateOutputType | null
    _min: Mitglied_loginMinAggregateOutputType | null
    _max: Mitglied_loginMaxAggregateOutputType | null
  }

  type GetMitglied_loginGroupByPayload<T extends mitglied_loginGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Mitglied_loginGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Mitglied_loginGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Mitglied_loginGroupByOutputType[P]>
            : GetScalarType<T[P], Mitglied_loginGroupByOutputType[P]>
        }
      >
    >


  export type mitglied_loginSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Benutzer_ID?: boolean
    Mitglied_ID?: boolean
    Typ?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["mitglied_login"]>

  export type mitglied_loginSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Benutzer_ID?: boolean
    Mitglied_ID?: boolean
    Typ?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["mitglied_login"]>

  export type mitglied_loginSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Benutzer_ID?: boolean
    Mitglied_ID?: boolean
    Typ?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["mitglied_login"]>

  export type mitglied_loginSelectScalar = {
    ID?: boolean
    Benutzer_ID?: boolean
    Mitglied_ID?: boolean
    Typ?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type mitglied_loginOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Benutzer_ID" | "Mitglied_ID" | "Typ" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["mitglied_login"]>

  export type $mitglied_loginPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "mitglied_login"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Benutzer_ID: number
      Mitglied_ID: number
      Typ: $Enums.mitglied_login_typ
      Erstellt_am: Date
      Geaendert_am: Date | null
    }, ExtArgs["result"]["mitglied_login"]>
    composites: {}
  }

  type mitglied_loginGetPayload<S extends boolean | null | undefined | mitglied_loginDefaultArgs> = $Result.GetResult<Prisma.$mitglied_loginPayload, S>

  type mitglied_loginCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<mitglied_loginFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Mitglied_loginCountAggregateInputType | true
    }

  export interface mitglied_loginDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['mitglied_login'], meta: { name: 'mitglied_login' } }
    /**
     * Find zero or one Mitglied_login that matches the filter.
     * @param {mitglied_loginFindUniqueArgs} args - Arguments to find a Mitglied_login
     * @example
     * // Get one Mitglied_login
     * const mitglied_login = await prisma.mitglied_login.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends mitglied_loginFindUniqueArgs>(args: SelectSubset<T, mitglied_loginFindUniqueArgs<ExtArgs>>): Prisma__mitglied_loginClient<$Result.GetResult<Prisma.$mitglied_loginPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Mitglied_login that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {mitglied_loginFindUniqueOrThrowArgs} args - Arguments to find a Mitglied_login
     * @example
     * // Get one Mitglied_login
     * const mitglied_login = await prisma.mitglied_login.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends mitglied_loginFindUniqueOrThrowArgs>(args: SelectSubset<T, mitglied_loginFindUniqueOrThrowArgs<ExtArgs>>): Prisma__mitglied_loginClient<$Result.GetResult<Prisma.$mitglied_loginPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mitglied_login that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mitglied_loginFindFirstArgs} args - Arguments to find a Mitglied_login
     * @example
     * // Get one Mitglied_login
     * const mitglied_login = await prisma.mitglied_login.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends mitglied_loginFindFirstArgs>(args?: SelectSubset<T, mitglied_loginFindFirstArgs<ExtArgs>>): Prisma__mitglied_loginClient<$Result.GetResult<Prisma.$mitglied_loginPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mitglied_login that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mitglied_loginFindFirstOrThrowArgs} args - Arguments to find a Mitglied_login
     * @example
     * // Get one Mitglied_login
     * const mitglied_login = await prisma.mitglied_login.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends mitglied_loginFindFirstOrThrowArgs>(args?: SelectSubset<T, mitglied_loginFindFirstOrThrowArgs<ExtArgs>>): Prisma__mitglied_loginClient<$Result.GetResult<Prisma.$mitglied_loginPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Mitglied_logins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mitglied_loginFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mitglied_logins
     * const mitglied_logins = await prisma.mitglied_login.findMany()
     * 
     * // Get first 10 Mitglied_logins
     * const mitglied_logins = await prisma.mitglied_login.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const mitglied_loginWithIDOnly = await prisma.mitglied_login.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends mitglied_loginFindManyArgs>(args?: SelectSubset<T, mitglied_loginFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mitglied_loginPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Mitglied_login.
     * @param {mitglied_loginCreateArgs} args - Arguments to create a Mitglied_login.
     * @example
     * // Create one Mitglied_login
     * const Mitglied_login = await prisma.mitglied_login.create({
     *   data: {
     *     // ... data to create a Mitglied_login
     *   }
     * })
     * 
     */
    create<T extends mitglied_loginCreateArgs>(args: SelectSubset<T, mitglied_loginCreateArgs<ExtArgs>>): Prisma__mitglied_loginClient<$Result.GetResult<Prisma.$mitglied_loginPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Mitglied_logins.
     * @param {mitglied_loginCreateManyArgs} args - Arguments to create many Mitglied_logins.
     * @example
     * // Create many Mitglied_logins
     * const mitglied_login = await prisma.mitglied_login.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends mitglied_loginCreateManyArgs>(args?: SelectSubset<T, mitglied_loginCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Mitglied_logins and returns the data saved in the database.
     * @param {mitglied_loginCreateManyAndReturnArgs} args - Arguments to create many Mitglied_logins.
     * @example
     * // Create many Mitglied_logins
     * const mitglied_login = await prisma.mitglied_login.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Mitglied_logins and only return the `ID`
     * const mitglied_loginWithIDOnly = await prisma.mitglied_login.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends mitglied_loginCreateManyAndReturnArgs>(args?: SelectSubset<T, mitglied_loginCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mitglied_loginPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Mitglied_login.
     * @param {mitglied_loginDeleteArgs} args - Arguments to delete one Mitglied_login.
     * @example
     * // Delete one Mitglied_login
     * const Mitglied_login = await prisma.mitglied_login.delete({
     *   where: {
     *     // ... filter to delete one Mitglied_login
     *   }
     * })
     * 
     */
    delete<T extends mitglied_loginDeleteArgs>(args: SelectSubset<T, mitglied_loginDeleteArgs<ExtArgs>>): Prisma__mitglied_loginClient<$Result.GetResult<Prisma.$mitglied_loginPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Mitglied_login.
     * @param {mitglied_loginUpdateArgs} args - Arguments to update one Mitglied_login.
     * @example
     * // Update one Mitglied_login
     * const mitglied_login = await prisma.mitglied_login.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends mitglied_loginUpdateArgs>(args: SelectSubset<T, mitglied_loginUpdateArgs<ExtArgs>>): Prisma__mitglied_loginClient<$Result.GetResult<Prisma.$mitglied_loginPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Mitglied_logins.
     * @param {mitglied_loginDeleteManyArgs} args - Arguments to filter Mitglied_logins to delete.
     * @example
     * // Delete a few Mitglied_logins
     * const { count } = await prisma.mitglied_login.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends mitglied_loginDeleteManyArgs>(args?: SelectSubset<T, mitglied_loginDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mitglied_logins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mitglied_loginUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mitglied_logins
     * const mitglied_login = await prisma.mitglied_login.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends mitglied_loginUpdateManyArgs>(args: SelectSubset<T, mitglied_loginUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mitglied_logins and returns the data updated in the database.
     * @param {mitglied_loginUpdateManyAndReturnArgs} args - Arguments to update many Mitglied_logins.
     * @example
     * // Update many Mitglied_logins
     * const mitglied_login = await prisma.mitglied_login.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Mitglied_logins and only return the `ID`
     * const mitglied_loginWithIDOnly = await prisma.mitglied_login.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends mitglied_loginUpdateManyAndReturnArgs>(args: SelectSubset<T, mitglied_loginUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mitglied_loginPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Mitglied_login.
     * @param {mitglied_loginUpsertArgs} args - Arguments to update or create a Mitglied_login.
     * @example
     * // Update or create a Mitglied_login
     * const mitglied_login = await prisma.mitglied_login.upsert({
     *   create: {
     *     // ... data to create a Mitglied_login
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mitglied_login we want to update
     *   }
     * })
     */
    upsert<T extends mitglied_loginUpsertArgs>(args: SelectSubset<T, mitglied_loginUpsertArgs<ExtArgs>>): Prisma__mitglied_loginClient<$Result.GetResult<Prisma.$mitglied_loginPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Mitglied_logins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mitglied_loginCountArgs} args - Arguments to filter Mitglied_logins to count.
     * @example
     * // Count the number of Mitglied_logins
     * const count = await prisma.mitglied_login.count({
     *   where: {
     *     // ... the filter for the Mitglied_logins we want to count
     *   }
     * })
    **/
    count<T extends mitglied_loginCountArgs>(
      args?: Subset<T, mitglied_loginCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Mitglied_loginCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mitglied_login.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Mitglied_loginAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Mitglied_loginAggregateArgs>(args: Subset<T, Mitglied_loginAggregateArgs>): Prisma.PrismaPromise<GetMitglied_loginAggregateType<T>>

    /**
     * Group by Mitglied_login.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mitglied_loginGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends mitglied_loginGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: mitglied_loginGroupByArgs['orderBy'] }
        : { orderBy?: mitglied_loginGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, mitglied_loginGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMitglied_loginGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the mitglied_login model
   */
  readonly fields: mitglied_loginFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for mitglied_login.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__mitglied_loginClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the mitglied_login model
   */
  interface mitglied_loginFieldRefs {
    readonly ID: FieldRef<"mitglied_login", 'Int'>
    readonly Benutzer_ID: FieldRef<"mitglied_login", 'Int'>
    readonly Mitglied_ID: FieldRef<"mitglied_login", 'Int'>
    readonly Typ: FieldRef<"mitglied_login", 'mitglied_login_typ'>
    readonly Erstellt_am: FieldRef<"mitglied_login", 'DateTime'>
    readonly Geaendert_am: FieldRef<"mitglied_login", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * mitglied_login findUnique
   */
  export type mitglied_loginFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_login
     */
    select?: mitglied_loginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_login
     */
    omit?: mitglied_loginOmit<ExtArgs> | null
    /**
     * Filter, which mitglied_login to fetch.
     */
    where: mitglied_loginWhereUniqueInput
  }

  /**
   * mitglied_login findUniqueOrThrow
   */
  export type mitglied_loginFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_login
     */
    select?: mitglied_loginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_login
     */
    omit?: mitglied_loginOmit<ExtArgs> | null
    /**
     * Filter, which mitglied_login to fetch.
     */
    where: mitglied_loginWhereUniqueInput
  }

  /**
   * mitglied_login findFirst
   */
  export type mitglied_loginFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_login
     */
    select?: mitglied_loginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_login
     */
    omit?: mitglied_loginOmit<ExtArgs> | null
    /**
     * Filter, which mitglied_login to fetch.
     */
    where?: mitglied_loginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mitglied_logins to fetch.
     */
    orderBy?: mitglied_loginOrderByWithRelationInput | mitglied_loginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mitglied_logins.
     */
    cursor?: mitglied_loginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mitglied_logins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mitglied_logins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mitglied_logins.
     */
    distinct?: Mitglied_loginScalarFieldEnum | Mitglied_loginScalarFieldEnum[]
  }

  /**
   * mitglied_login findFirstOrThrow
   */
  export type mitglied_loginFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_login
     */
    select?: mitglied_loginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_login
     */
    omit?: mitglied_loginOmit<ExtArgs> | null
    /**
     * Filter, which mitglied_login to fetch.
     */
    where?: mitglied_loginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mitglied_logins to fetch.
     */
    orderBy?: mitglied_loginOrderByWithRelationInput | mitglied_loginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mitglied_logins.
     */
    cursor?: mitglied_loginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mitglied_logins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mitglied_logins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mitglied_logins.
     */
    distinct?: Mitglied_loginScalarFieldEnum | Mitglied_loginScalarFieldEnum[]
  }

  /**
   * mitglied_login findMany
   */
  export type mitglied_loginFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_login
     */
    select?: mitglied_loginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_login
     */
    omit?: mitglied_loginOmit<ExtArgs> | null
    /**
     * Filter, which mitglied_logins to fetch.
     */
    where?: mitglied_loginWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mitglied_logins to fetch.
     */
    orderBy?: mitglied_loginOrderByWithRelationInput | mitglied_loginOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing mitglied_logins.
     */
    cursor?: mitglied_loginWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mitglied_logins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mitglied_logins.
     */
    skip?: number
    distinct?: Mitglied_loginScalarFieldEnum | Mitglied_loginScalarFieldEnum[]
  }

  /**
   * mitglied_login create
   */
  export type mitglied_loginCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_login
     */
    select?: mitglied_loginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_login
     */
    omit?: mitglied_loginOmit<ExtArgs> | null
    /**
     * The data needed to create a mitglied_login.
     */
    data: XOR<mitglied_loginCreateInput, mitglied_loginUncheckedCreateInput>
  }

  /**
   * mitglied_login createMany
   */
  export type mitglied_loginCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many mitglied_logins.
     */
    data: mitglied_loginCreateManyInput | mitglied_loginCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * mitglied_login createManyAndReturn
   */
  export type mitglied_loginCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_login
     */
    select?: mitglied_loginSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_login
     */
    omit?: mitglied_loginOmit<ExtArgs> | null
    /**
     * The data used to create many mitglied_logins.
     */
    data: mitglied_loginCreateManyInput | mitglied_loginCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * mitglied_login update
   */
  export type mitglied_loginUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_login
     */
    select?: mitglied_loginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_login
     */
    omit?: mitglied_loginOmit<ExtArgs> | null
    /**
     * The data needed to update a mitglied_login.
     */
    data: XOR<mitglied_loginUpdateInput, mitglied_loginUncheckedUpdateInput>
    /**
     * Choose, which mitglied_login to update.
     */
    where: mitglied_loginWhereUniqueInput
  }

  /**
   * mitglied_login updateMany
   */
  export type mitglied_loginUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update mitglied_logins.
     */
    data: XOR<mitglied_loginUpdateManyMutationInput, mitglied_loginUncheckedUpdateManyInput>
    /**
     * Filter which mitglied_logins to update
     */
    where?: mitglied_loginWhereInput
    /**
     * Limit how many mitglied_logins to update.
     */
    limit?: number
  }

  /**
   * mitglied_login updateManyAndReturn
   */
  export type mitglied_loginUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_login
     */
    select?: mitglied_loginSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_login
     */
    omit?: mitglied_loginOmit<ExtArgs> | null
    /**
     * The data used to update mitglied_logins.
     */
    data: XOR<mitglied_loginUpdateManyMutationInput, mitglied_loginUncheckedUpdateManyInput>
    /**
     * Filter which mitglied_logins to update
     */
    where?: mitglied_loginWhereInput
    /**
     * Limit how many mitglied_logins to update.
     */
    limit?: number
  }

  /**
   * mitglied_login upsert
   */
  export type mitglied_loginUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_login
     */
    select?: mitglied_loginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_login
     */
    omit?: mitglied_loginOmit<ExtArgs> | null
    /**
     * The filter to search for the mitglied_login to update in case it exists.
     */
    where: mitglied_loginWhereUniqueInput
    /**
     * In case the mitglied_login found by the `where` argument doesn't exist, create a new mitglied_login with this data.
     */
    create: XOR<mitglied_loginCreateInput, mitglied_loginUncheckedCreateInput>
    /**
     * In case the mitglied_login was found with the provided `where` argument, update it with this data.
     */
    update: XOR<mitglied_loginUpdateInput, mitglied_loginUncheckedUpdateInput>
  }

  /**
   * mitglied_login delete
   */
  export type mitglied_loginDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_login
     */
    select?: mitglied_loginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_login
     */
    omit?: mitglied_loginOmit<ExtArgs> | null
    /**
     * Filter which mitglied_login to delete.
     */
    where: mitglied_loginWhereUniqueInput
  }

  /**
   * mitglied_login deleteMany
   */
  export type mitglied_loginDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mitglied_logins to delete
     */
    where?: mitglied_loginWhereInput
    /**
     * Limit how many mitglied_logins to delete.
     */
    limit?: number
  }

  /**
   * mitglied_login without action
   */
  export type mitglied_loginDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mitglied_login
     */
    select?: mitglied_loginSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mitglied_login
     */
    omit?: mitglied_loginOmit<ExtArgs> | null
  }


  /**
   * Model teilnahme
   */

  export type AggregateTeilnahme = {
    _count: TeilnahmeCountAggregateOutputType | null
    _avg: TeilnahmeAvgAggregateOutputType | null
    _sum: TeilnahmeSumAggregateOutputType | null
    _min: TeilnahmeMinAggregateOutputType | null
    _max: TeilnahmeMaxAggregateOutputType | null
  }

  export type TeilnahmeAvgAggregateOutputType = {
    ID: number | null
    Mitglied_ID: number | null
    Veranstaltung_ID: number | null
  }

  export type TeilnahmeSumAggregateOutputType = {
    ID: number | null
    Mitglied_ID: number | null
    Veranstaltung_ID: number | null
  }

  export type TeilnahmeMinAggregateOutputType = {
    ID: number | null
    Mitglied_ID: number | null
    Veranstaltung_ID: number | null
    Typ: $Enums.teilnahme_typ | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type TeilnahmeMaxAggregateOutputType = {
    ID: number | null
    Mitglied_ID: number | null
    Veranstaltung_ID: number | null
    Typ: $Enums.teilnahme_typ | null
    Erstellt_am: Date | null
    Geaendert_am: Date | null
  }

  export type TeilnahmeCountAggregateOutputType = {
    ID: number
    Mitglied_ID: number
    Veranstaltung_ID: number
    Typ: number
    Erstellt_am: number
    Geaendert_am: number
    _all: number
  }


  export type TeilnahmeAvgAggregateInputType = {
    ID?: true
    Mitglied_ID?: true
    Veranstaltung_ID?: true
  }

  export type TeilnahmeSumAggregateInputType = {
    ID?: true
    Mitglied_ID?: true
    Veranstaltung_ID?: true
  }

  export type TeilnahmeMinAggregateInputType = {
    ID?: true
    Mitglied_ID?: true
    Veranstaltung_ID?: true
    Typ?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type TeilnahmeMaxAggregateInputType = {
    ID?: true
    Mitglied_ID?: true
    Veranstaltung_ID?: true
    Typ?: true
    Erstellt_am?: true
    Geaendert_am?: true
  }

  export type TeilnahmeCountAggregateInputType = {
    ID?: true
    Mitglied_ID?: true
    Veranstaltung_ID?: true
    Typ?: true
    Erstellt_am?: true
    Geaendert_am?: true
    _all?: true
  }

  export type TeilnahmeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teilnahme to aggregate.
     */
    where?: teilnahmeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teilnahmes to fetch.
     */
    orderBy?: teilnahmeOrderByWithRelationInput | teilnahmeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: teilnahmeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teilnahmes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teilnahmes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned teilnahmes
    **/
    _count?: true | TeilnahmeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeilnahmeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeilnahmeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeilnahmeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeilnahmeMaxAggregateInputType
  }

  export type GetTeilnahmeAggregateType<T extends TeilnahmeAggregateArgs> = {
        [P in keyof T & keyof AggregateTeilnahme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeilnahme[P]>
      : GetScalarType<T[P], AggregateTeilnahme[P]>
  }




  export type teilnahmeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: teilnahmeWhereInput
    orderBy?: teilnahmeOrderByWithAggregationInput | teilnahmeOrderByWithAggregationInput[]
    by: TeilnahmeScalarFieldEnum[] | TeilnahmeScalarFieldEnum
    having?: teilnahmeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeilnahmeCountAggregateInputType | true
    _avg?: TeilnahmeAvgAggregateInputType
    _sum?: TeilnahmeSumAggregateInputType
    _min?: TeilnahmeMinAggregateInputType
    _max?: TeilnahmeMaxAggregateInputType
  }

  export type TeilnahmeGroupByOutputType = {
    ID: number
    Mitglied_ID: number
    Veranstaltung_ID: number
    Typ: $Enums.teilnahme_typ
    Erstellt_am: Date
    Geaendert_am: Date | null
    _count: TeilnahmeCountAggregateOutputType | null
    _avg: TeilnahmeAvgAggregateOutputType | null
    _sum: TeilnahmeSumAggregateOutputType | null
    _min: TeilnahmeMinAggregateOutputType | null
    _max: TeilnahmeMaxAggregateOutputType | null
  }

  type GetTeilnahmeGroupByPayload<T extends teilnahmeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeilnahmeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeilnahmeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeilnahmeGroupByOutputType[P]>
            : GetScalarType<T[P], TeilnahmeGroupByOutputType[P]>
        }
      >
    >


  export type teilnahmeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Mitglied_ID?: boolean
    Veranstaltung_ID?: boolean
    Typ?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["teilnahme"]>

  export type teilnahmeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Mitglied_ID?: boolean
    Veranstaltung_ID?: boolean
    Typ?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["teilnahme"]>

  export type teilnahmeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ID?: boolean
    Mitglied_ID?: boolean
    Veranstaltung_ID?: boolean
    Typ?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }, ExtArgs["result"]["teilnahme"]>

  export type teilnahmeSelectScalar = {
    ID?: boolean
    Mitglied_ID?: boolean
    Veranstaltung_ID?: boolean
    Typ?: boolean
    Erstellt_am?: boolean
    Geaendert_am?: boolean
  }

  export type teilnahmeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"ID" | "Mitglied_ID" | "Veranstaltung_ID" | "Typ" | "Erstellt_am" | "Geaendert_am", ExtArgs["result"]["teilnahme"]>

  export type $teilnahmePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "teilnahme"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      ID: number
      Mitglied_ID: number
      Veranstaltung_ID: number
      Typ: $Enums.teilnahme_typ
      Erstellt_am: Date
      Geaendert_am: Date | null
    }, ExtArgs["result"]["teilnahme"]>
    composites: {}
  }

  type teilnahmeGetPayload<S extends boolean | null | undefined | teilnahmeDefaultArgs> = $Result.GetResult<Prisma.$teilnahmePayload, S>

  type teilnahmeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<teilnahmeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeilnahmeCountAggregateInputType | true
    }

  export interface teilnahmeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['teilnahme'], meta: { name: 'teilnahme' } }
    /**
     * Find zero or one Teilnahme that matches the filter.
     * @param {teilnahmeFindUniqueArgs} args - Arguments to find a Teilnahme
     * @example
     * // Get one Teilnahme
     * const teilnahme = await prisma.teilnahme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends teilnahmeFindUniqueArgs>(args: SelectSubset<T, teilnahmeFindUniqueArgs<ExtArgs>>): Prisma__teilnahmeClient<$Result.GetResult<Prisma.$teilnahmePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teilnahme that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {teilnahmeFindUniqueOrThrowArgs} args - Arguments to find a Teilnahme
     * @example
     * // Get one Teilnahme
     * const teilnahme = await prisma.teilnahme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends teilnahmeFindUniqueOrThrowArgs>(args: SelectSubset<T, teilnahmeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__teilnahmeClient<$Result.GetResult<Prisma.$teilnahmePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teilnahme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teilnahmeFindFirstArgs} args - Arguments to find a Teilnahme
     * @example
     * // Get one Teilnahme
     * const teilnahme = await prisma.teilnahme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends teilnahmeFindFirstArgs>(args?: SelectSubset<T, teilnahmeFindFirstArgs<ExtArgs>>): Prisma__teilnahmeClient<$Result.GetResult<Prisma.$teilnahmePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teilnahme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teilnahmeFindFirstOrThrowArgs} args - Arguments to find a Teilnahme
     * @example
     * // Get one Teilnahme
     * const teilnahme = await prisma.teilnahme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends teilnahmeFindFirstOrThrowArgs>(args?: SelectSubset<T, teilnahmeFindFirstOrThrowArgs<ExtArgs>>): Prisma__teilnahmeClient<$Result.GetResult<Prisma.$teilnahmePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teilnahmes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teilnahmeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teilnahmes
     * const teilnahmes = await prisma.teilnahme.findMany()
     * 
     * // Get first 10 Teilnahmes
     * const teilnahmes = await prisma.teilnahme.findMany({ take: 10 })
     * 
     * // Only select the `ID`
     * const teilnahmeWithIDOnly = await prisma.teilnahme.findMany({ select: { ID: true } })
     * 
     */
    findMany<T extends teilnahmeFindManyArgs>(args?: SelectSubset<T, teilnahmeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teilnahmePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teilnahme.
     * @param {teilnahmeCreateArgs} args - Arguments to create a Teilnahme.
     * @example
     * // Create one Teilnahme
     * const Teilnahme = await prisma.teilnahme.create({
     *   data: {
     *     // ... data to create a Teilnahme
     *   }
     * })
     * 
     */
    create<T extends teilnahmeCreateArgs>(args: SelectSubset<T, teilnahmeCreateArgs<ExtArgs>>): Prisma__teilnahmeClient<$Result.GetResult<Prisma.$teilnahmePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teilnahmes.
     * @param {teilnahmeCreateManyArgs} args - Arguments to create many Teilnahmes.
     * @example
     * // Create many Teilnahmes
     * const teilnahme = await prisma.teilnahme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends teilnahmeCreateManyArgs>(args?: SelectSubset<T, teilnahmeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teilnahmes and returns the data saved in the database.
     * @param {teilnahmeCreateManyAndReturnArgs} args - Arguments to create many Teilnahmes.
     * @example
     * // Create many Teilnahmes
     * const teilnahme = await prisma.teilnahme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teilnahmes and only return the `ID`
     * const teilnahmeWithIDOnly = await prisma.teilnahme.createManyAndReturn({
     *   select: { ID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends teilnahmeCreateManyAndReturnArgs>(args?: SelectSubset<T, teilnahmeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teilnahmePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Teilnahme.
     * @param {teilnahmeDeleteArgs} args - Arguments to delete one Teilnahme.
     * @example
     * // Delete one Teilnahme
     * const Teilnahme = await prisma.teilnahme.delete({
     *   where: {
     *     // ... filter to delete one Teilnahme
     *   }
     * })
     * 
     */
    delete<T extends teilnahmeDeleteArgs>(args: SelectSubset<T, teilnahmeDeleteArgs<ExtArgs>>): Prisma__teilnahmeClient<$Result.GetResult<Prisma.$teilnahmePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teilnahme.
     * @param {teilnahmeUpdateArgs} args - Arguments to update one Teilnahme.
     * @example
     * // Update one Teilnahme
     * const teilnahme = await prisma.teilnahme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends teilnahmeUpdateArgs>(args: SelectSubset<T, teilnahmeUpdateArgs<ExtArgs>>): Prisma__teilnahmeClient<$Result.GetResult<Prisma.$teilnahmePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teilnahmes.
     * @param {teilnahmeDeleteManyArgs} args - Arguments to filter Teilnahmes to delete.
     * @example
     * // Delete a few Teilnahmes
     * const { count } = await prisma.teilnahme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends teilnahmeDeleteManyArgs>(args?: SelectSubset<T, teilnahmeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teilnahmes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teilnahmeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teilnahmes
     * const teilnahme = await prisma.teilnahme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends teilnahmeUpdateManyArgs>(args: SelectSubset<T, teilnahmeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teilnahmes and returns the data updated in the database.
     * @param {teilnahmeUpdateManyAndReturnArgs} args - Arguments to update many Teilnahmes.
     * @example
     * // Update many Teilnahmes
     * const teilnahme = await prisma.teilnahme.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teilnahmes and only return the `ID`
     * const teilnahmeWithIDOnly = await prisma.teilnahme.updateManyAndReturn({
     *   select: { ID: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends teilnahmeUpdateManyAndReturnArgs>(args: SelectSubset<T, teilnahmeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$teilnahmePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Teilnahme.
     * @param {teilnahmeUpsertArgs} args - Arguments to update or create a Teilnahme.
     * @example
     * // Update or create a Teilnahme
     * const teilnahme = await prisma.teilnahme.upsert({
     *   create: {
     *     // ... data to create a Teilnahme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teilnahme we want to update
     *   }
     * })
     */
    upsert<T extends teilnahmeUpsertArgs>(args: SelectSubset<T, teilnahmeUpsertArgs<ExtArgs>>): Prisma__teilnahmeClient<$Result.GetResult<Prisma.$teilnahmePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teilnahmes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teilnahmeCountArgs} args - Arguments to filter Teilnahmes to count.
     * @example
     * // Count the number of Teilnahmes
     * const count = await prisma.teilnahme.count({
     *   where: {
     *     // ... the filter for the Teilnahmes we want to count
     *   }
     * })
    **/
    count<T extends teilnahmeCountArgs>(
      args?: Subset<T, teilnahmeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeilnahmeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teilnahme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeilnahmeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeilnahmeAggregateArgs>(args: Subset<T, TeilnahmeAggregateArgs>): Prisma.PrismaPromise<GetTeilnahmeAggregateType<T>>

    /**
     * Group by Teilnahme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {teilnahmeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends teilnahmeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: teilnahmeGroupByArgs['orderBy'] }
        : { orderBy?: teilnahmeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, teilnahmeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeilnahmeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the teilnahme model
   */
  readonly fields: teilnahmeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for teilnahme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__teilnahmeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the teilnahme model
   */
  interface teilnahmeFieldRefs {
    readonly ID: FieldRef<"teilnahme", 'Int'>
    readonly Mitglied_ID: FieldRef<"teilnahme", 'Int'>
    readonly Veranstaltung_ID: FieldRef<"teilnahme", 'Int'>
    readonly Typ: FieldRef<"teilnahme", 'teilnahme_typ'>
    readonly Erstellt_am: FieldRef<"teilnahme", 'DateTime'>
    readonly Geaendert_am: FieldRef<"teilnahme", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * teilnahme findUnique
   */
  export type teilnahmeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teilnahme
     */
    select?: teilnahmeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teilnahme
     */
    omit?: teilnahmeOmit<ExtArgs> | null
    /**
     * Filter, which teilnahme to fetch.
     */
    where: teilnahmeWhereUniqueInput
  }

  /**
   * teilnahme findUniqueOrThrow
   */
  export type teilnahmeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teilnahme
     */
    select?: teilnahmeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teilnahme
     */
    omit?: teilnahmeOmit<ExtArgs> | null
    /**
     * Filter, which teilnahme to fetch.
     */
    where: teilnahmeWhereUniqueInput
  }

  /**
   * teilnahme findFirst
   */
  export type teilnahmeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teilnahme
     */
    select?: teilnahmeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teilnahme
     */
    omit?: teilnahmeOmit<ExtArgs> | null
    /**
     * Filter, which teilnahme to fetch.
     */
    where?: teilnahmeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teilnahmes to fetch.
     */
    orderBy?: teilnahmeOrderByWithRelationInput | teilnahmeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teilnahmes.
     */
    cursor?: teilnahmeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teilnahmes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teilnahmes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teilnahmes.
     */
    distinct?: TeilnahmeScalarFieldEnum | TeilnahmeScalarFieldEnum[]
  }

  /**
   * teilnahme findFirstOrThrow
   */
  export type teilnahmeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teilnahme
     */
    select?: teilnahmeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teilnahme
     */
    omit?: teilnahmeOmit<ExtArgs> | null
    /**
     * Filter, which teilnahme to fetch.
     */
    where?: teilnahmeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teilnahmes to fetch.
     */
    orderBy?: teilnahmeOrderByWithRelationInput | teilnahmeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for teilnahmes.
     */
    cursor?: teilnahmeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teilnahmes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teilnahmes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of teilnahmes.
     */
    distinct?: TeilnahmeScalarFieldEnum | TeilnahmeScalarFieldEnum[]
  }

  /**
   * teilnahme findMany
   */
  export type teilnahmeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teilnahme
     */
    select?: teilnahmeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teilnahme
     */
    omit?: teilnahmeOmit<ExtArgs> | null
    /**
     * Filter, which teilnahmes to fetch.
     */
    where?: teilnahmeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of teilnahmes to fetch.
     */
    orderBy?: teilnahmeOrderByWithRelationInput | teilnahmeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing teilnahmes.
     */
    cursor?: teilnahmeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` teilnahmes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` teilnahmes.
     */
    skip?: number
    distinct?: TeilnahmeScalarFieldEnum | TeilnahmeScalarFieldEnum[]
  }

  /**
   * teilnahme create
   */
  export type teilnahmeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teilnahme
     */
    select?: teilnahmeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teilnahme
     */
    omit?: teilnahmeOmit<ExtArgs> | null
    /**
     * The data needed to create a teilnahme.
     */
    data: XOR<teilnahmeCreateInput, teilnahmeUncheckedCreateInput>
  }

  /**
   * teilnahme createMany
   */
  export type teilnahmeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many teilnahmes.
     */
    data: teilnahmeCreateManyInput | teilnahmeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * teilnahme createManyAndReturn
   */
  export type teilnahmeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teilnahme
     */
    select?: teilnahmeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the teilnahme
     */
    omit?: teilnahmeOmit<ExtArgs> | null
    /**
     * The data used to create many teilnahmes.
     */
    data: teilnahmeCreateManyInput | teilnahmeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * teilnahme update
   */
  export type teilnahmeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teilnahme
     */
    select?: teilnahmeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teilnahme
     */
    omit?: teilnahmeOmit<ExtArgs> | null
    /**
     * The data needed to update a teilnahme.
     */
    data: XOR<teilnahmeUpdateInput, teilnahmeUncheckedUpdateInput>
    /**
     * Choose, which teilnahme to update.
     */
    where: teilnahmeWhereUniqueInput
  }

  /**
   * teilnahme updateMany
   */
  export type teilnahmeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update teilnahmes.
     */
    data: XOR<teilnahmeUpdateManyMutationInput, teilnahmeUncheckedUpdateManyInput>
    /**
     * Filter which teilnahmes to update
     */
    where?: teilnahmeWhereInput
    /**
     * Limit how many teilnahmes to update.
     */
    limit?: number
  }

  /**
   * teilnahme updateManyAndReturn
   */
  export type teilnahmeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teilnahme
     */
    select?: teilnahmeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the teilnahme
     */
    omit?: teilnahmeOmit<ExtArgs> | null
    /**
     * The data used to update teilnahmes.
     */
    data: XOR<teilnahmeUpdateManyMutationInput, teilnahmeUncheckedUpdateManyInput>
    /**
     * Filter which teilnahmes to update
     */
    where?: teilnahmeWhereInput
    /**
     * Limit how many teilnahmes to update.
     */
    limit?: number
  }

  /**
   * teilnahme upsert
   */
  export type teilnahmeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teilnahme
     */
    select?: teilnahmeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teilnahme
     */
    omit?: teilnahmeOmit<ExtArgs> | null
    /**
     * The filter to search for the teilnahme to update in case it exists.
     */
    where: teilnahmeWhereUniqueInput
    /**
     * In case the teilnahme found by the `where` argument doesn't exist, create a new teilnahme with this data.
     */
    create: XOR<teilnahmeCreateInput, teilnahmeUncheckedCreateInput>
    /**
     * In case the teilnahme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<teilnahmeUpdateInput, teilnahmeUncheckedUpdateInput>
  }

  /**
   * teilnahme delete
   */
  export type teilnahmeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teilnahme
     */
    select?: teilnahmeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teilnahme
     */
    omit?: teilnahmeOmit<ExtArgs> | null
    /**
     * Filter which teilnahme to delete.
     */
    where: teilnahmeWhereUniqueInput
  }

  /**
   * teilnahme deleteMany
   */
  export type teilnahmeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which teilnahmes to delete
     */
    where?: teilnahmeWhereInput
    /**
     * Limit how many teilnahmes to delete.
     */
    limit?: number
  }

  /**
   * teilnahme without action
   */
  export type teilnahmeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the teilnahme
     */
    select?: teilnahmeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the teilnahme
     */
    omit?: teilnahmeOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AllergieScalarFieldEnum: {
    ID: 'ID',
    JF_Mitglied_ID: 'JF_Mitglied_ID',
    FF_Mitglied_ID: 'FF_Mitglied_ID',
    Allergie: 'Allergie',
    Beschreibung: 'Beschreibung',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type AllergieScalarFieldEnum = (typeof AllergieScalarFieldEnum)[keyof typeof AllergieScalarFieldEnum]


  export const DienstgradScalarFieldEnum: {
    ID: 'ID',
    Abkuerzung_maennlich: 'Abkuerzung_maennlich',
    Beschreibung_maennlich: 'Beschreibung_maennlich',
    Abkuerzung_weiblich: 'Abkuerzung_weiblich',
    Beschreibung_weiblich: 'Beschreibung_weiblich',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type DienstgradScalarFieldEnum = (typeof DienstgradScalarFieldEnum)[keyof typeof DienstgradScalarFieldEnum]


  export const DienstabendScalarFieldEnum: {
    ID: 'ID',
    Datum: 'Datum',
    Thema: 'Thema',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type DienstabendScalarFieldEnum = (typeof DienstabendScalarFieldEnum)[keyof typeof DienstabendScalarFieldEnum]


  export const EinheitScalarFieldEnum: {
    ID: 'ID',
    Abkuerzung: 'Abkuerzung',
    Beschreibung: 'Beschreibung',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type EinheitScalarFieldEnum = (typeof EinheitScalarFieldEnum)[keyof typeof EinheitScalarFieldEnum]


  export const EinsatzScalarFieldEnum: {
    ID: 'ID',
    Einsatznummer: 'Einsatznummer',
    Datum_Anfang: 'Datum_Anfang',
    Uhrzeit_Anfang: 'Uhrzeit_Anfang',
    Datum_Ende: 'Datum_Ende',
    Uhrzeit_Ende: 'Uhrzeit_Ende',
    Beschreibung: 'Beschreibung',
    Strasse: 'Strasse',
    Hausnummer: 'Hausnummer',
    Postleitzahl: 'Postleitzahl',
    Ort: 'Ort',
    Art: 'Art',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type EinsatzScalarFieldEnum = (typeof EinsatzScalarFieldEnum)[keyof typeof EinsatzScalarFieldEnum]


  export const EinteilungScalarFieldEnum: {
    ID: 'ID',
    Einsatz_ID: 'Einsatz_ID',
    Dienstabend_ID: 'Dienstabend_ID',
    Fahrzeug_ID: 'Fahrzeug_ID',
    FF_Mitglied_ID: 'FF_Mitglied_ID',
    Einheit_ID: 'Einheit_ID'
  };

  export type EinteilungScalarFieldEnum = (typeof EinteilungScalarFieldEnum)[keyof typeof EinteilungScalarFieldEnum]


  export const FahrzeugScalarFieldEnum: {
    ID: 'ID',
    Kennzeichen: 'Kennzeichen',
    Fahrzeugtyp: 'Fahrzeugtyp',
    Besatzungsstaerke: 'Besatzungsstaerke',
    Status: 'Status',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type FahrzeugScalarFieldEnum = (typeof FahrzeugScalarFieldEnum)[keyof typeof FahrzeugScalarFieldEnum]


  export const Ff_mitgliedScalarFieldEnum: {
    ID: 'ID',
    Person_ID: 'Person_ID',
    Eintrittsdatum: 'Eintrittsdatum',
    Austrittsdatum: 'Austrittsdatum',
    Aufnahmedatum: 'Aufnahmedatum',
    Status: 'Status',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type Ff_mitgliedScalarFieldEnum = (typeof Ff_mitgliedScalarFieldEnum)[keyof typeof Ff_mitgliedScalarFieldEnum]


  export const Ff_mitglied_lehrgangScalarFieldEnum: {
    ID: 'ID',
    FF_Mitglied_ID: 'FF_Mitglied_ID',
    Lehrgang_ID: 'Lehrgang_ID',
    Datum_bestanden: 'Datum_bestanden',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type Ff_mitglied_lehrgangScalarFieldEnum = (typeof Ff_mitglied_lehrgangScalarFieldEnum)[keyof typeof Ff_mitglied_lehrgangScalarFieldEnum]


  export const Funktion_ffScalarFieldEnum: {
    ID: 'ID',
    Name: 'Name',
    Ist_Admin: 'Ist_Admin',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type Funktion_ffScalarFieldEnum = (typeof Funktion_ffScalarFieldEnum)[keyof typeof Funktion_ffScalarFieldEnum]


  export const Funktion_jfScalarFieldEnum: {
    ID: 'ID',
    Name: 'Name',
    Ist_Admin: 'Ist_Admin',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type Funktion_jfScalarFieldEnum = (typeof Funktion_jfScalarFieldEnum)[keyof typeof Funktion_jfScalarFieldEnum]


  export const Jf_erziehungsberechtigterScalarFieldEnum: {
    ID: 'ID',
    JF_Mitglied_ID: 'JF_Mitglied_ID',
    Person_ID: 'Person_ID',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type Jf_erziehungsberechtigterScalarFieldEnum = (typeof Jf_erziehungsberechtigterScalarFieldEnum)[keyof typeof Jf_erziehungsberechtigterScalarFieldEnum]


  export const Jf_mitgliedScalarFieldEnum: {
    ID: 'ID',
    Person_ID: 'Person_ID',
    Eintrittsdatum: 'Eintrittsdatum',
    Austrittsdatum: 'Austrittsdatum',
    Aufnahmedatum: 'Aufnahmedatum',
    Status: 'Status',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type Jf_mitgliedScalarFieldEnum = (typeof Jf_mitgliedScalarFieldEnum)[keyof typeof Jf_mitgliedScalarFieldEnum]


  export const LehrgangScalarFieldEnum: {
    ID: 'ID',
    Abk_rzung: 'Abk_rzung',
    Beschreibung: 'Beschreibung',
    Reihenfolge: 'Reihenfolge',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type LehrgangScalarFieldEnum = (typeof LehrgangScalarFieldEnum)[keyof typeof LehrgangScalarFieldEnum]


  export const Mitglied_funktionenScalarFieldEnum: {
    ID: 'ID',
    Mitglied_ID: 'Mitglied_ID',
    Funktion_ID: 'Funktion_ID',
    Typ: 'Typ',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type Mitglied_funktionenScalarFieldEnum = (typeof Mitglied_funktionenScalarFieldEnum)[keyof typeof Mitglied_funktionenScalarFieldEnum]


  export const Mitglied_loginScalarFieldEnum: {
    ID: 'ID',
    Benutzer_ID: 'Benutzer_ID',
    Mitglied_ID: 'Mitglied_ID',
    Typ: 'Typ',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type Mitglied_loginScalarFieldEnum = (typeof Mitglied_loginScalarFieldEnum)[keyof typeof Mitglied_loginScalarFieldEnum]


  export const TeilnahmeScalarFieldEnum: {
    ID: 'ID',
    Mitglied_ID: 'Mitglied_ID',
    Veranstaltung_ID: 'Veranstaltung_ID',
    Typ: 'Typ',
    Erstellt_am: 'Erstellt_am',
    Geaendert_am: 'Geaendert_am'
  };

  export type TeilnahmeScalarFieldEnum = (typeof TeilnahmeScalarFieldEnum)[keyof typeof TeilnahmeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'einsatz_art'
   */
  export type Enumeinsatz_artFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'einsatz_art'>
    


  /**
   * Reference to a field of type 'einsatz_art[]'
   */
  export type ListEnumeinsatz_artFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'einsatz_art[]'>
    


  /**
   * Reference to a field of type 'fahrzeug_status'
   */
  export type Enumfahrzeug_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'fahrzeug_status'>
    


  /**
   * Reference to a field of type 'fahrzeug_status[]'
   */
  export type ListEnumfahrzeug_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'fahrzeug_status[]'>
    


  /**
   * Reference to a field of type 'ff_mitglied_status'
   */
  export type Enumff_mitglied_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ff_mitglied_status'>
    


  /**
   * Reference to a field of type 'ff_mitglied_status[]'
   */
  export type ListEnumff_mitglied_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ff_mitglied_status[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'jf_mitglied_status'
   */
  export type Enumjf_mitglied_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'jf_mitglied_status'>
    


  /**
   * Reference to a field of type 'jf_mitglied_status[]'
   */
  export type ListEnumjf_mitglied_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'jf_mitglied_status[]'>
    


  /**
   * Reference to a field of type 'mitglied_funktionen_typ'
   */
  export type Enummitglied_funktionen_typFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'mitglied_funktionen_typ'>
    


  /**
   * Reference to a field of type 'mitglied_funktionen_typ[]'
   */
  export type ListEnummitglied_funktionen_typFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'mitglied_funktionen_typ[]'>
    


  /**
   * Reference to a field of type 'mitglied_login_typ'
   */
  export type Enummitglied_login_typFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'mitglied_login_typ'>
    


  /**
   * Reference to a field of type 'mitglied_login_typ[]'
   */
  export type ListEnummitglied_login_typFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'mitglied_login_typ[]'>
    


  /**
   * Reference to a field of type 'teilnahme_typ'
   */
  export type Enumteilnahme_typFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'teilnahme_typ'>
    


  /**
   * Reference to a field of type 'teilnahme_typ[]'
   */
  export type ListEnumteilnahme_typFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'teilnahme_typ[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type allergieWhereInput = {
    AND?: allergieWhereInput | allergieWhereInput[]
    OR?: allergieWhereInput[]
    NOT?: allergieWhereInput | allergieWhereInput[]
    ID?: IntFilter<"allergie"> | number
    JF_Mitglied_ID?: IntFilter<"allergie"> | number
    FF_Mitglied_ID?: IntFilter<"allergie"> | number
    Allergie?: StringFilter<"allergie"> | string
    Beschreibung?: StringNullableFilter<"allergie"> | string | null
    Erstellt_am?: DateTimeNullableFilter<"allergie"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"allergie"> | Date | string | null
    ff_mitglied?: XOR<Ff_mitgliedScalarRelationFilter, ff_mitgliedWhereInput>
    jf_mitglied?: XOR<Jf_mitgliedScalarRelationFilter, jf_mitgliedWhereInput>
  }

  export type allergieOrderByWithRelationInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Allergie?: SortOrder
    Beschreibung?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    ff_mitglied?: ff_mitgliedOrderByWithRelationInput
    jf_mitglied?: jf_mitgliedOrderByWithRelationInput
  }

  export type allergieWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: allergieWhereInput | allergieWhereInput[]
    OR?: allergieWhereInput[]
    NOT?: allergieWhereInput | allergieWhereInput[]
    JF_Mitglied_ID?: IntFilter<"allergie"> | number
    FF_Mitglied_ID?: IntFilter<"allergie"> | number
    Allergie?: StringFilter<"allergie"> | string
    Beschreibung?: StringNullableFilter<"allergie"> | string | null
    Erstellt_am?: DateTimeNullableFilter<"allergie"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"allergie"> | Date | string | null
    ff_mitglied?: XOR<Ff_mitgliedScalarRelationFilter, ff_mitgliedWhereInput>
    jf_mitglied?: XOR<Jf_mitgliedScalarRelationFilter, jf_mitgliedWhereInput>
  }, "ID">

  export type allergieOrderByWithAggregationInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Allergie?: SortOrder
    Beschreibung?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: allergieCountOrderByAggregateInput
    _avg?: allergieAvgOrderByAggregateInput
    _max?: allergieMaxOrderByAggregateInput
    _min?: allergieMinOrderByAggregateInput
    _sum?: allergieSumOrderByAggregateInput
  }

  export type allergieScalarWhereWithAggregatesInput = {
    AND?: allergieScalarWhereWithAggregatesInput | allergieScalarWhereWithAggregatesInput[]
    OR?: allergieScalarWhereWithAggregatesInput[]
    NOT?: allergieScalarWhereWithAggregatesInput | allergieScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"allergie"> | number
    JF_Mitglied_ID?: IntWithAggregatesFilter<"allergie"> | number
    FF_Mitglied_ID?: IntWithAggregatesFilter<"allergie"> | number
    Allergie?: StringWithAggregatesFilter<"allergie"> | string
    Beschreibung?: StringNullableWithAggregatesFilter<"allergie"> | string | null
    Erstellt_am?: DateTimeNullableWithAggregatesFilter<"allergie"> | Date | string | null
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"allergie"> | Date | string | null
  }

  export type dienstgradWhereInput = {
    AND?: dienstgradWhereInput | dienstgradWhereInput[]
    OR?: dienstgradWhereInput[]
    NOT?: dienstgradWhereInput | dienstgradWhereInput[]
    ID?: IntFilter<"dienstgrad"> | number
    Abkuerzung_maennlich?: StringNullableFilter<"dienstgrad"> | string | null
    Beschreibung_maennlich?: StringNullableFilter<"dienstgrad"> | string | null
    Abkuerzung_weiblich?: StringNullableFilter<"dienstgrad"> | string | null
    Beschreibung_weiblich?: StringNullableFilter<"dienstgrad"> | string | null
    Erstellt_am?: DateTimeNullableFilter<"dienstgrad"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"dienstgrad"> | Date | string | null
  }

  export type dienstgradOrderByWithRelationInput = {
    ID?: SortOrder
    Abkuerzung_maennlich?: SortOrderInput | SortOrder
    Beschreibung_maennlich?: SortOrderInput | SortOrder
    Abkuerzung_weiblich?: SortOrderInput | SortOrder
    Beschreibung_weiblich?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
  }

  export type dienstgradWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: dienstgradWhereInput | dienstgradWhereInput[]
    OR?: dienstgradWhereInput[]
    NOT?: dienstgradWhereInput | dienstgradWhereInput[]
    Abkuerzung_maennlich?: StringNullableFilter<"dienstgrad"> | string | null
    Beschreibung_maennlich?: StringNullableFilter<"dienstgrad"> | string | null
    Abkuerzung_weiblich?: StringNullableFilter<"dienstgrad"> | string | null
    Beschreibung_weiblich?: StringNullableFilter<"dienstgrad"> | string | null
    Erstellt_am?: DateTimeNullableFilter<"dienstgrad"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"dienstgrad"> | Date | string | null
  }, "ID">

  export type dienstgradOrderByWithAggregationInput = {
    ID?: SortOrder
    Abkuerzung_maennlich?: SortOrderInput | SortOrder
    Beschreibung_maennlich?: SortOrderInput | SortOrder
    Abkuerzung_weiblich?: SortOrderInput | SortOrder
    Beschreibung_weiblich?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: dienstgradCountOrderByAggregateInput
    _avg?: dienstgradAvgOrderByAggregateInput
    _max?: dienstgradMaxOrderByAggregateInput
    _min?: dienstgradMinOrderByAggregateInput
    _sum?: dienstgradSumOrderByAggregateInput
  }

  export type dienstgradScalarWhereWithAggregatesInput = {
    AND?: dienstgradScalarWhereWithAggregatesInput | dienstgradScalarWhereWithAggregatesInput[]
    OR?: dienstgradScalarWhereWithAggregatesInput[]
    NOT?: dienstgradScalarWhereWithAggregatesInput | dienstgradScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"dienstgrad"> | number
    Abkuerzung_maennlich?: StringNullableWithAggregatesFilter<"dienstgrad"> | string | null
    Beschreibung_maennlich?: StringNullableWithAggregatesFilter<"dienstgrad"> | string | null
    Abkuerzung_weiblich?: StringNullableWithAggregatesFilter<"dienstgrad"> | string | null
    Beschreibung_weiblich?: StringNullableWithAggregatesFilter<"dienstgrad"> | string | null
    Erstellt_am?: DateTimeNullableWithAggregatesFilter<"dienstgrad"> | Date | string | null
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"dienstgrad"> | Date | string | null
  }

  export type dienstabendWhereInput = {
    AND?: dienstabendWhereInput | dienstabendWhereInput[]
    OR?: dienstabendWhereInput[]
    NOT?: dienstabendWhereInput | dienstabendWhereInput[]
    ID?: IntFilter<"dienstabend"> | number
    Datum?: DateTimeNullableFilter<"dienstabend"> | Date | string | null
    Thema?: StringNullableFilter<"dienstabend"> | string | null
    Erstellt_am?: DateTimeFilter<"dienstabend"> | Date | string
    Geaendert_am?: DateTimeNullableFilter<"dienstabend"> | Date | string | null
    einteilung?: EinteilungListRelationFilter
  }

  export type dienstabendOrderByWithRelationInput = {
    ID?: SortOrder
    Datum?: SortOrderInput | SortOrder
    Thema?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    einteilung?: einteilungOrderByRelationAggregateInput
  }

  export type dienstabendWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: dienstabendWhereInput | dienstabendWhereInput[]
    OR?: dienstabendWhereInput[]
    NOT?: dienstabendWhereInput | dienstabendWhereInput[]
    Datum?: DateTimeNullableFilter<"dienstabend"> | Date | string | null
    Thema?: StringNullableFilter<"dienstabend"> | string | null
    Erstellt_am?: DateTimeFilter<"dienstabend"> | Date | string
    Geaendert_am?: DateTimeNullableFilter<"dienstabend"> | Date | string | null
    einteilung?: EinteilungListRelationFilter
  }, "ID">

  export type dienstabendOrderByWithAggregationInput = {
    ID?: SortOrder
    Datum?: SortOrderInput | SortOrder
    Thema?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: dienstabendCountOrderByAggregateInput
    _avg?: dienstabendAvgOrderByAggregateInput
    _max?: dienstabendMaxOrderByAggregateInput
    _min?: dienstabendMinOrderByAggregateInput
    _sum?: dienstabendSumOrderByAggregateInput
  }

  export type dienstabendScalarWhereWithAggregatesInput = {
    AND?: dienstabendScalarWhereWithAggregatesInput | dienstabendScalarWhereWithAggregatesInput[]
    OR?: dienstabendScalarWhereWithAggregatesInput[]
    NOT?: dienstabendScalarWhereWithAggregatesInput | dienstabendScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"dienstabend"> | number
    Datum?: DateTimeNullableWithAggregatesFilter<"dienstabend"> | Date | string | null
    Thema?: StringNullableWithAggregatesFilter<"dienstabend"> | string | null
    Erstellt_am?: DateTimeWithAggregatesFilter<"dienstabend"> | Date | string
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"dienstabend"> | Date | string | null
  }

  export type einheitWhereInput = {
    AND?: einheitWhereInput | einheitWhereInput[]
    OR?: einheitWhereInput[]
    NOT?: einheitWhereInput | einheitWhereInput[]
    ID?: IntFilter<"einheit"> | number
    Abkuerzung?: StringNullableFilter<"einheit"> | string | null
    Beschreibung?: StringNullableFilter<"einheit"> | string | null
    Erstellt_am?: DateTimeNullableFilter<"einheit"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"einheit"> | Date | string | null
    einteilung?: EinteilungListRelationFilter
  }

  export type einheitOrderByWithRelationInput = {
    ID?: SortOrder
    Abkuerzung?: SortOrderInput | SortOrder
    Beschreibung?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    einteilung?: einteilungOrderByRelationAggregateInput
  }

  export type einheitWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: einheitWhereInput | einheitWhereInput[]
    OR?: einheitWhereInput[]
    NOT?: einheitWhereInput | einheitWhereInput[]
    Abkuerzung?: StringNullableFilter<"einheit"> | string | null
    Beschreibung?: StringNullableFilter<"einheit"> | string | null
    Erstellt_am?: DateTimeNullableFilter<"einheit"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"einheit"> | Date | string | null
    einteilung?: EinteilungListRelationFilter
  }, "ID">

  export type einheitOrderByWithAggregationInput = {
    ID?: SortOrder
    Abkuerzung?: SortOrderInput | SortOrder
    Beschreibung?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: einheitCountOrderByAggregateInput
    _avg?: einheitAvgOrderByAggregateInput
    _max?: einheitMaxOrderByAggregateInput
    _min?: einheitMinOrderByAggregateInput
    _sum?: einheitSumOrderByAggregateInput
  }

  export type einheitScalarWhereWithAggregatesInput = {
    AND?: einheitScalarWhereWithAggregatesInput | einheitScalarWhereWithAggregatesInput[]
    OR?: einheitScalarWhereWithAggregatesInput[]
    NOT?: einheitScalarWhereWithAggregatesInput | einheitScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"einheit"> | number
    Abkuerzung?: StringNullableWithAggregatesFilter<"einheit"> | string | null
    Beschreibung?: StringNullableWithAggregatesFilter<"einheit"> | string | null
    Erstellt_am?: DateTimeNullableWithAggregatesFilter<"einheit"> | Date | string | null
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"einheit"> | Date | string | null
  }

  export type einsatzWhereInput = {
    AND?: einsatzWhereInput | einsatzWhereInput[]
    OR?: einsatzWhereInput[]
    NOT?: einsatzWhereInput | einsatzWhereInput[]
    ID?: IntFilter<"einsatz"> | number
    Einsatznummer?: IntFilter<"einsatz"> | number
    Datum_Anfang?: DateTimeFilter<"einsatz"> | Date | string
    Uhrzeit_Anfang?: DateTimeFilter<"einsatz"> | Date | string
    Datum_Ende?: DateTimeNullableFilter<"einsatz"> | Date | string | null
    Uhrzeit_Ende?: DateTimeNullableFilter<"einsatz"> | Date | string | null
    Beschreibung?: StringNullableFilter<"einsatz"> | string | null
    Strasse?: StringNullableFilter<"einsatz"> | string | null
    Hausnummer?: StringNullableFilter<"einsatz"> | string | null
    Postleitzahl?: StringNullableFilter<"einsatz"> | string | null
    Ort?: StringNullableFilter<"einsatz"> | string | null
    Art?: Enumeinsatz_artFilter<"einsatz"> | $Enums.einsatz_art
    Erstellt_am?: DateTimeNullableFilter<"einsatz"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"einsatz"> | Date | string | null
    einteilung?: EinteilungListRelationFilter
  }

  export type einsatzOrderByWithRelationInput = {
    ID?: SortOrder
    Einsatznummer?: SortOrder
    Datum_Anfang?: SortOrder
    Uhrzeit_Anfang?: SortOrder
    Datum_Ende?: SortOrderInput | SortOrder
    Uhrzeit_Ende?: SortOrderInput | SortOrder
    Beschreibung?: SortOrderInput | SortOrder
    Strasse?: SortOrderInput | SortOrder
    Hausnummer?: SortOrderInput | SortOrder
    Postleitzahl?: SortOrderInput | SortOrder
    Ort?: SortOrderInput | SortOrder
    Art?: SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    einteilung?: einteilungOrderByRelationAggregateInput
  }

  export type einsatzWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: einsatzWhereInput | einsatzWhereInput[]
    OR?: einsatzWhereInput[]
    NOT?: einsatzWhereInput | einsatzWhereInput[]
    Einsatznummer?: IntFilter<"einsatz"> | number
    Datum_Anfang?: DateTimeFilter<"einsatz"> | Date | string
    Uhrzeit_Anfang?: DateTimeFilter<"einsatz"> | Date | string
    Datum_Ende?: DateTimeNullableFilter<"einsatz"> | Date | string | null
    Uhrzeit_Ende?: DateTimeNullableFilter<"einsatz"> | Date | string | null
    Beschreibung?: StringNullableFilter<"einsatz"> | string | null
    Strasse?: StringNullableFilter<"einsatz"> | string | null
    Hausnummer?: StringNullableFilter<"einsatz"> | string | null
    Postleitzahl?: StringNullableFilter<"einsatz"> | string | null
    Ort?: StringNullableFilter<"einsatz"> | string | null
    Art?: Enumeinsatz_artFilter<"einsatz"> | $Enums.einsatz_art
    Erstellt_am?: DateTimeNullableFilter<"einsatz"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"einsatz"> | Date | string | null
    einteilung?: EinteilungListRelationFilter
  }, "ID">

  export type einsatzOrderByWithAggregationInput = {
    ID?: SortOrder
    Einsatznummer?: SortOrder
    Datum_Anfang?: SortOrder
    Uhrzeit_Anfang?: SortOrder
    Datum_Ende?: SortOrderInput | SortOrder
    Uhrzeit_Ende?: SortOrderInput | SortOrder
    Beschreibung?: SortOrderInput | SortOrder
    Strasse?: SortOrderInput | SortOrder
    Hausnummer?: SortOrderInput | SortOrder
    Postleitzahl?: SortOrderInput | SortOrder
    Ort?: SortOrderInput | SortOrder
    Art?: SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: einsatzCountOrderByAggregateInput
    _avg?: einsatzAvgOrderByAggregateInput
    _max?: einsatzMaxOrderByAggregateInput
    _min?: einsatzMinOrderByAggregateInput
    _sum?: einsatzSumOrderByAggregateInput
  }

  export type einsatzScalarWhereWithAggregatesInput = {
    AND?: einsatzScalarWhereWithAggregatesInput | einsatzScalarWhereWithAggregatesInput[]
    OR?: einsatzScalarWhereWithAggregatesInput[]
    NOT?: einsatzScalarWhereWithAggregatesInput | einsatzScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"einsatz"> | number
    Einsatznummer?: IntWithAggregatesFilter<"einsatz"> | number
    Datum_Anfang?: DateTimeWithAggregatesFilter<"einsatz"> | Date | string
    Uhrzeit_Anfang?: DateTimeWithAggregatesFilter<"einsatz"> | Date | string
    Datum_Ende?: DateTimeNullableWithAggregatesFilter<"einsatz"> | Date | string | null
    Uhrzeit_Ende?: DateTimeNullableWithAggregatesFilter<"einsatz"> | Date | string | null
    Beschreibung?: StringNullableWithAggregatesFilter<"einsatz"> | string | null
    Strasse?: StringNullableWithAggregatesFilter<"einsatz"> | string | null
    Hausnummer?: StringNullableWithAggregatesFilter<"einsatz"> | string | null
    Postleitzahl?: StringNullableWithAggregatesFilter<"einsatz"> | string | null
    Ort?: StringNullableWithAggregatesFilter<"einsatz"> | string | null
    Art?: Enumeinsatz_artWithAggregatesFilter<"einsatz"> | $Enums.einsatz_art
    Erstellt_am?: DateTimeNullableWithAggregatesFilter<"einsatz"> | Date | string | null
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"einsatz"> | Date | string | null
  }

  export type einteilungWhereInput = {
    AND?: einteilungWhereInput | einteilungWhereInput[]
    OR?: einteilungWhereInput[]
    NOT?: einteilungWhereInput | einteilungWhereInput[]
    ID?: IntFilter<"einteilung"> | number
    Einsatz_ID?: IntFilter<"einteilung"> | number
    Dienstabend_ID?: IntFilter<"einteilung"> | number
    Fahrzeug_ID?: IntFilter<"einteilung"> | number
    FF_Mitglied_ID?: IntFilter<"einteilung"> | number
    Einheit_ID?: IntFilter<"einteilung"> | number
    dienstabend?: XOR<DienstabendScalarRelationFilter, dienstabendWhereInput>
    einheit?: XOR<EinheitScalarRelationFilter, einheitWhereInput>
    einsatz?: XOR<EinsatzScalarRelationFilter, einsatzWhereInput>
    fahrzeug?: XOR<FahrzeugScalarRelationFilter, fahrzeugWhereInput>
    ff_mitglied?: XOR<Ff_mitgliedScalarRelationFilter, ff_mitgliedWhereInput>
  }

  export type einteilungOrderByWithRelationInput = {
    ID?: SortOrder
    Einsatz_ID?: SortOrder
    Dienstabend_ID?: SortOrder
    Fahrzeug_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Einheit_ID?: SortOrder
    dienstabend?: dienstabendOrderByWithRelationInput
    einheit?: einheitOrderByWithRelationInput
    einsatz?: einsatzOrderByWithRelationInput
    fahrzeug?: fahrzeugOrderByWithRelationInput
    ff_mitglied?: ff_mitgliedOrderByWithRelationInput
  }

  export type einteilungWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: einteilungWhereInput | einteilungWhereInput[]
    OR?: einteilungWhereInput[]
    NOT?: einteilungWhereInput | einteilungWhereInput[]
    Einsatz_ID?: IntFilter<"einteilung"> | number
    Dienstabend_ID?: IntFilter<"einteilung"> | number
    Fahrzeug_ID?: IntFilter<"einteilung"> | number
    FF_Mitglied_ID?: IntFilter<"einteilung"> | number
    Einheit_ID?: IntFilter<"einteilung"> | number
    dienstabend?: XOR<DienstabendScalarRelationFilter, dienstabendWhereInput>
    einheit?: XOR<EinheitScalarRelationFilter, einheitWhereInput>
    einsatz?: XOR<EinsatzScalarRelationFilter, einsatzWhereInput>
    fahrzeug?: XOR<FahrzeugScalarRelationFilter, fahrzeugWhereInput>
    ff_mitglied?: XOR<Ff_mitgliedScalarRelationFilter, ff_mitgliedWhereInput>
  }, "ID">

  export type einteilungOrderByWithAggregationInput = {
    ID?: SortOrder
    Einsatz_ID?: SortOrder
    Dienstabend_ID?: SortOrder
    Fahrzeug_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Einheit_ID?: SortOrder
    _count?: einteilungCountOrderByAggregateInput
    _avg?: einteilungAvgOrderByAggregateInput
    _max?: einteilungMaxOrderByAggregateInput
    _min?: einteilungMinOrderByAggregateInput
    _sum?: einteilungSumOrderByAggregateInput
  }

  export type einteilungScalarWhereWithAggregatesInput = {
    AND?: einteilungScalarWhereWithAggregatesInput | einteilungScalarWhereWithAggregatesInput[]
    OR?: einteilungScalarWhereWithAggregatesInput[]
    NOT?: einteilungScalarWhereWithAggregatesInput | einteilungScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"einteilung"> | number
    Einsatz_ID?: IntWithAggregatesFilter<"einteilung"> | number
    Dienstabend_ID?: IntWithAggregatesFilter<"einteilung"> | number
    Fahrzeug_ID?: IntWithAggregatesFilter<"einteilung"> | number
    FF_Mitglied_ID?: IntWithAggregatesFilter<"einteilung"> | number
    Einheit_ID?: IntWithAggregatesFilter<"einteilung"> | number
  }

  export type fahrzeugWhereInput = {
    AND?: fahrzeugWhereInput | fahrzeugWhereInput[]
    OR?: fahrzeugWhereInput[]
    NOT?: fahrzeugWhereInput | fahrzeugWhereInput[]
    ID?: IntFilter<"fahrzeug"> | number
    Kennzeichen?: StringNullableFilter<"fahrzeug"> | string | null
    Fahrzeugtyp?: StringNullableFilter<"fahrzeug"> | string | null
    Besatzungsstaerke?: StringNullableFilter<"fahrzeug"> | string | null
    Status?: Enumfahrzeug_statusNullableFilter<"fahrzeug"> | $Enums.fahrzeug_status | null
    Erstellt_am?: DateTimeNullableFilter<"fahrzeug"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"fahrzeug"> | Date | string | null
    einteilung?: EinteilungListRelationFilter
  }

  export type fahrzeugOrderByWithRelationInput = {
    ID?: SortOrder
    Kennzeichen?: SortOrderInput | SortOrder
    Fahrzeugtyp?: SortOrderInput | SortOrder
    Besatzungsstaerke?: SortOrderInput | SortOrder
    Status?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    einteilung?: einteilungOrderByRelationAggregateInput
  }

  export type fahrzeugWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: fahrzeugWhereInput | fahrzeugWhereInput[]
    OR?: fahrzeugWhereInput[]
    NOT?: fahrzeugWhereInput | fahrzeugWhereInput[]
    Kennzeichen?: StringNullableFilter<"fahrzeug"> | string | null
    Fahrzeugtyp?: StringNullableFilter<"fahrzeug"> | string | null
    Besatzungsstaerke?: StringNullableFilter<"fahrzeug"> | string | null
    Status?: Enumfahrzeug_statusNullableFilter<"fahrzeug"> | $Enums.fahrzeug_status | null
    Erstellt_am?: DateTimeNullableFilter<"fahrzeug"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"fahrzeug"> | Date | string | null
    einteilung?: EinteilungListRelationFilter
  }, "ID">

  export type fahrzeugOrderByWithAggregationInput = {
    ID?: SortOrder
    Kennzeichen?: SortOrderInput | SortOrder
    Fahrzeugtyp?: SortOrderInput | SortOrder
    Besatzungsstaerke?: SortOrderInput | SortOrder
    Status?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: fahrzeugCountOrderByAggregateInput
    _avg?: fahrzeugAvgOrderByAggregateInput
    _max?: fahrzeugMaxOrderByAggregateInput
    _min?: fahrzeugMinOrderByAggregateInput
    _sum?: fahrzeugSumOrderByAggregateInput
  }

  export type fahrzeugScalarWhereWithAggregatesInput = {
    AND?: fahrzeugScalarWhereWithAggregatesInput | fahrzeugScalarWhereWithAggregatesInput[]
    OR?: fahrzeugScalarWhereWithAggregatesInput[]
    NOT?: fahrzeugScalarWhereWithAggregatesInput | fahrzeugScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"fahrzeug"> | number
    Kennzeichen?: StringNullableWithAggregatesFilter<"fahrzeug"> | string | null
    Fahrzeugtyp?: StringNullableWithAggregatesFilter<"fahrzeug"> | string | null
    Besatzungsstaerke?: StringNullableWithAggregatesFilter<"fahrzeug"> | string | null
    Status?: Enumfahrzeug_statusNullableWithAggregatesFilter<"fahrzeug"> | $Enums.fahrzeug_status | null
    Erstellt_am?: DateTimeNullableWithAggregatesFilter<"fahrzeug"> | Date | string | null
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"fahrzeug"> | Date | string | null
  }

  export type ff_mitgliedWhereInput = {
    AND?: ff_mitgliedWhereInput | ff_mitgliedWhereInput[]
    OR?: ff_mitgliedWhereInput[]
    NOT?: ff_mitgliedWhereInput | ff_mitgliedWhereInput[]
    ID?: IntFilter<"ff_mitglied"> | number
    Person_ID?: IntFilter<"ff_mitglied"> | number
    Eintrittsdatum?: DateTimeFilter<"ff_mitglied"> | Date | string
    Austrittsdatum?: DateTimeNullableFilter<"ff_mitglied"> | Date | string | null
    Aufnahmedatum?: DateTimeNullableFilter<"ff_mitglied"> | Date | string | null
    Status?: Enumff_mitglied_statusNullableFilter<"ff_mitglied"> | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFilter<"ff_mitglied"> | Date | string
    Geaendert_am?: DateTimeNullableFilter<"ff_mitglied"> | Date | string | null
    allergie?: AllergieListRelationFilter
    einteilung?: EinteilungListRelationFilter
    ff_mitglied_lehrgang?: Ff_mitglied_lehrgangListRelationFilter
    mitglied_funktionen?: Mitglied_funktionenListRelationFilter
  }

  export type ff_mitgliedOrderByWithRelationInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
    Eintrittsdatum?: SortOrder
    Austrittsdatum?: SortOrderInput | SortOrder
    Aufnahmedatum?: SortOrderInput | SortOrder
    Status?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    allergie?: allergieOrderByRelationAggregateInput
    einteilung?: einteilungOrderByRelationAggregateInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangOrderByRelationAggregateInput
    mitglied_funktionen?: mitglied_funktionenOrderByRelationAggregateInput
  }

  export type ff_mitgliedWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: ff_mitgliedWhereInput | ff_mitgliedWhereInput[]
    OR?: ff_mitgliedWhereInput[]
    NOT?: ff_mitgliedWhereInput | ff_mitgliedWhereInput[]
    Person_ID?: IntFilter<"ff_mitglied"> | number
    Eintrittsdatum?: DateTimeFilter<"ff_mitglied"> | Date | string
    Austrittsdatum?: DateTimeNullableFilter<"ff_mitglied"> | Date | string | null
    Aufnahmedatum?: DateTimeNullableFilter<"ff_mitglied"> | Date | string | null
    Status?: Enumff_mitglied_statusNullableFilter<"ff_mitglied"> | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFilter<"ff_mitglied"> | Date | string
    Geaendert_am?: DateTimeNullableFilter<"ff_mitglied"> | Date | string | null
    allergie?: AllergieListRelationFilter
    einteilung?: EinteilungListRelationFilter
    ff_mitglied_lehrgang?: Ff_mitglied_lehrgangListRelationFilter
    mitglied_funktionen?: Mitglied_funktionenListRelationFilter
  }, "ID">

  export type ff_mitgliedOrderByWithAggregationInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
    Eintrittsdatum?: SortOrder
    Austrittsdatum?: SortOrderInput | SortOrder
    Aufnahmedatum?: SortOrderInput | SortOrder
    Status?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: ff_mitgliedCountOrderByAggregateInput
    _avg?: ff_mitgliedAvgOrderByAggregateInput
    _max?: ff_mitgliedMaxOrderByAggregateInput
    _min?: ff_mitgliedMinOrderByAggregateInput
    _sum?: ff_mitgliedSumOrderByAggregateInput
  }

  export type ff_mitgliedScalarWhereWithAggregatesInput = {
    AND?: ff_mitgliedScalarWhereWithAggregatesInput | ff_mitgliedScalarWhereWithAggregatesInput[]
    OR?: ff_mitgliedScalarWhereWithAggregatesInput[]
    NOT?: ff_mitgliedScalarWhereWithAggregatesInput | ff_mitgliedScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"ff_mitglied"> | number
    Person_ID?: IntWithAggregatesFilter<"ff_mitglied"> | number
    Eintrittsdatum?: DateTimeWithAggregatesFilter<"ff_mitglied"> | Date | string
    Austrittsdatum?: DateTimeNullableWithAggregatesFilter<"ff_mitglied"> | Date | string | null
    Aufnahmedatum?: DateTimeNullableWithAggregatesFilter<"ff_mitglied"> | Date | string | null
    Status?: Enumff_mitglied_statusNullableWithAggregatesFilter<"ff_mitglied"> | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeWithAggregatesFilter<"ff_mitglied"> | Date | string
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"ff_mitglied"> | Date | string | null
  }

  export type ff_mitglied_lehrgangWhereInput = {
    AND?: ff_mitglied_lehrgangWhereInput | ff_mitglied_lehrgangWhereInput[]
    OR?: ff_mitglied_lehrgangWhereInput[]
    NOT?: ff_mitglied_lehrgangWhereInput | ff_mitglied_lehrgangWhereInput[]
    ID?: IntFilter<"ff_mitglied_lehrgang"> | number
    FF_Mitglied_ID?: IntFilter<"ff_mitglied_lehrgang"> | number
    Lehrgang_ID?: IntFilter<"ff_mitglied_lehrgang"> | number
    Datum_bestanden?: DateTimeNullableFilter<"ff_mitglied_lehrgang"> | Date | string | null
    Erstellt_am?: DateTimeNullableFilter<"ff_mitglied_lehrgang"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"ff_mitglied_lehrgang"> | Date | string | null
    ff_mitglied?: XOR<Ff_mitgliedScalarRelationFilter, ff_mitgliedWhereInput>
    lehrgang?: XOR<LehrgangScalarRelationFilter, lehrgangWhereInput>
  }

  export type ff_mitglied_lehrgangOrderByWithRelationInput = {
    ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Lehrgang_ID?: SortOrder
    Datum_bestanden?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    ff_mitglied?: ff_mitgliedOrderByWithRelationInput
    lehrgang?: lehrgangOrderByWithRelationInput
  }

  export type ff_mitglied_lehrgangWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: ff_mitglied_lehrgangWhereInput | ff_mitglied_lehrgangWhereInput[]
    OR?: ff_mitglied_lehrgangWhereInput[]
    NOT?: ff_mitglied_lehrgangWhereInput | ff_mitglied_lehrgangWhereInput[]
    FF_Mitglied_ID?: IntFilter<"ff_mitglied_lehrgang"> | number
    Lehrgang_ID?: IntFilter<"ff_mitglied_lehrgang"> | number
    Datum_bestanden?: DateTimeNullableFilter<"ff_mitglied_lehrgang"> | Date | string | null
    Erstellt_am?: DateTimeNullableFilter<"ff_mitglied_lehrgang"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"ff_mitglied_lehrgang"> | Date | string | null
    ff_mitglied?: XOR<Ff_mitgliedScalarRelationFilter, ff_mitgliedWhereInput>
    lehrgang?: XOR<LehrgangScalarRelationFilter, lehrgangWhereInput>
  }, "ID">

  export type ff_mitglied_lehrgangOrderByWithAggregationInput = {
    ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Lehrgang_ID?: SortOrder
    Datum_bestanden?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: ff_mitglied_lehrgangCountOrderByAggregateInput
    _avg?: ff_mitglied_lehrgangAvgOrderByAggregateInput
    _max?: ff_mitglied_lehrgangMaxOrderByAggregateInput
    _min?: ff_mitglied_lehrgangMinOrderByAggregateInput
    _sum?: ff_mitglied_lehrgangSumOrderByAggregateInput
  }

  export type ff_mitglied_lehrgangScalarWhereWithAggregatesInput = {
    AND?: ff_mitglied_lehrgangScalarWhereWithAggregatesInput | ff_mitglied_lehrgangScalarWhereWithAggregatesInput[]
    OR?: ff_mitglied_lehrgangScalarWhereWithAggregatesInput[]
    NOT?: ff_mitglied_lehrgangScalarWhereWithAggregatesInput | ff_mitglied_lehrgangScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"ff_mitglied_lehrgang"> | number
    FF_Mitglied_ID?: IntWithAggregatesFilter<"ff_mitglied_lehrgang"> | number
    Lehrgang_ID?: IntWithAggregatesFilter<"ff_mitglied_lehrgang"> | number
    Datum_bestanden?: DateTimeNullableWithAggregatesFilter<"ff_mitglied_lehrgang"> | Date | string | null
    Erstellt_am?: DateTimeNullableWithAggregatesFilter<"ff_mitglied_lehrgang"> | Date | string | null
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"ff_mitglied_lehrgang"> | Date | string | null
  }

  export type funktion_ffWhereInput = {
    AND?: funktion_ffWhereInput | funktion_ffWhereInput[]
    OR?: funktion_ffWhereInput[]
    NOT?: funktion_ffWhereInput | funktion_ffWhereInput[]
    ID?: IntFilter<"funktion_ff"> | number
    Name?: StringFilter<"funktion_ff"> | string
    Ist_Admin?: BoolNullableFilter<"funktion_ff"> | boolean | null
    Erstellt_am?: DateTimeNullableFilter<"funktion_ff"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"funktion_ff"> | Date | string | null
  }

  export type funktion_ffOrderByWithRelationInput = {
    ID?: SortOrder
    Name?: SortOrder
    Ist_Admin?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
  }

  export type funktion_ffWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: funktion_ffWhereInput | funktion_ffWhereInput[]
    OR?: funktion_ffWhereInput[]
    NOT?: funktion_ffWhereInput | funktion_ffWhereInput[]
    Name?: StringFilter<"funktion_ff"> | string
    Ist_Admin?: BoolNullableFilter<"funktion_ff"> | boolean | null
    Erstellt_am?: DateTimeNullableFilter<"funktion_ff"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"funktion_ff"> | Date | string | null
  }, "ID">

  export type funktion_ffOrderByWithAggregationInput = {
    ID?: SortOrder
    Name?: SortOrder
    Ist_Admin?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: funktion_ffCountOrderByAggregateInput
    _avg?: funktion_ffAvgOrderByAggregateInput
    _max?: funktion_ffMaxOrderByAggregateInput
    _min?: funktion_ffMinOrderByAggregateInput
    _sum?: funktion_ffSumOrderByAggregateInput
  }

  export type funktion_ffScalarWhereWithAggregatesInput = {
    AND?: funktion_ffScalarWhereWithAggregatesInput | funktion_ffScalarWhereWithAggregatesInput[]
    OR?: funktion_ffScalarWhereWithAggregatesInput[]
    NOT?: funktion_ffScalarWhereWithAggregatesInput | funktion_ffScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"funktion_ff"> | number
    Name?: StringWithAggregatesFilter<"funktion_ff"> | string
    Ist_Admin?: BoolNullableWithAggregatesFilter<"funktion_ff"> | boolean | null
    Erstellt_am?: DateTimeNullableWithAggregatesFilter<"funktion_ff"> | Date | string | null
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"funktion_ff"> | Date | string | null
  }

  export type funktion_jfWhereInput = {
    AND?: funktion_jfWhereInput | funktion_jfWhereInput[]
    OR?: funktion_jfWhereInput[]
    NOT?: funktion_jfWhereInput | funktion_jfWhereInput[]
    ID?: IntFilter<"funktion_jf"> | number
    Name?: StringFilter<"funktion_jf"> | string
    Ist_Admin?: BoolNullableFilter<"funktion_jf"> | boolean | null
    Erstellt_am?: DateTimeFilter<"funktion_jf"> | Date | string
    Geaendert_am?: DateTimeNullableFilter<"funktion_jf"> | Date | string | null
  }

  export type funktion_jfOrderByWithRelationInput = {
    ID?: SortOrder
    Name?: SortOrder
    Ist_Admin?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
  }

  export type funktion_jfWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: funktion_jfWhereInput | funktion_jfWhereInput[]
    OR?: funktion_jfWhereInput[]
    NOT?: funktion_jfWhereInput | funktion_jfWhereInput[]
    Name?: StringFilter<"funktion_jf"> | string
    Ist_Admin?: BoolNullableFilter<"funktion_jf"> | boolean | null
    Erstellt_am?: DateTimeFilter<"funktion_jf"> | Date | string
    Geaendert_am?: DateTimeNullableFilter<"funktion_jf"> | Date | string | null
  }, "ID">

  export type funktion_jfOrderByWithAggregationInput = {
    ID?: SortOrder
    Name?: SortOrder
    Ist_Admin?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: funktion_jfCountOrderByAggregateInput
    _avg?: funktion_jfAvgOrderByAggregateInput
    _max?: funktion_jfMaxOrderByAggregateInput
    _min?: funktion_jfMinOrderByAggregateInput
    _sum?: funktion_jfSumOrderByAggregateInput
  }

  export type funktion_jfScalarWhereWithAggregatesInput = {
    AND?: funktion_jfScalarWhereWithAggregatesInput | funktion_jfScalarWhereWithAggregatesInput[]
    OR?: funktion_jfScalarWhereWithAggregatesInput[]
    NOT?: funktion_jfScalarWhereWithAggregatesInput | funktion_jfScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"funktion_jf"> | number
    Name?: StringWithAggregatesFilter<"funktion_jf"> | string
    Ist_Admin?: BoolNullableWithAggregatesFilter<"funktion_jf"> | boolean | null
    Erstellt_am?: DateTimeWithAggregatesFilter<"funktion_jf"> | Date | string
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"funktion_jf"> | Date | string | null
  }

  export type jf_erziehungsberechtigterWhereInput = {
    AND?: jf_erziehungsberechtigterWhereInput | jf_erziehungsberechtigterWhereInput[]
    OR?: jf_erziehungsberechtigterWhereInput[]
    NOT?: jf_erziehungsberechtigterWhereInput | jf_erziehungsberechtigterWhereInput[]
    ID?: IntFilter<"jf_erziehungsberechtigter"> | number
    JF_Mitglied_ID?: IntFilter<"jf_erziehungsberechtigter"> | number
    Person_ID?: IntFilter<"jf_erziehungsberechtigter"> | number
    Erstellt_am?: DateTimeNullableFilter<"jf_erziehungsberechtigter"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"jf_erziehungsberechtigter"> | Date | string | null
    jf_mitglied?: XOR<Jf_mitgliedScalarRelationFilter, jf_mitgliedWhereInput>
  }

  export type jf_erziehungsberechtigterOrderByWithRelationInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    Person_ID?: SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    jf_mitglied?: jf_mitgliedOrderByWithRelationInput
  }

  export type jf_erziehungsberechtigterWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: jf_erziehungsberechtigterWhereInput | jf_erziehungsberechtigterWhereInput[]
    OR?: jf_erziehungsberechtigterWhereInput[]
    NOT?: jf_erziehungsberechtigterWhereInput | jf_erziehungsberechtigterWhereInput[]
    JF_Mitglied_ID?: IntFilter<"jf_erziehungsberechtigter"> | number
    Person_ID?: IntFilter<"jf_erziehungsberechtigter"> | number
    Erstellt_am?: DateTimeNullableFilter<"jf_erziehungsberechtigter"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"jf_erziehungsberechtigter"> | Date | string | null
    jf_mitglied?: XOR<Jf_mitgliedScalarRelationFilter, jf_mitgliedWhereInput>
  }, "ID">

  export type jf_erziehungsberechtigterOrderByWithAggregationInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    Person_ID?: SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: jf_erziehungsberechtigterCountOrderByAggregateInput
    _avg?: jf_erziehungsberechtigterAvgOrderByAggregateInput
    _max?: jf_erziehungsberechtigterMaxOrderByAggregateInput
    _min?: jf_erziehungsberechtigterMinOrderByAggregateInput
    _sum?: jf_erziehungsberechtigterSumOrderByAggregateInput
  }

  export type jf_erziehungsberechtigterScalarWhereWithAggregatesInput = {
    AND?: jf_erziehungsberechtigterScalarWhereWithAggregatesInput | jf_erziehungsberechtigterScalarWhereWithAggregatesInput[]
    OR?: jf_erziehungsberechtigterScalarWhereWithAggregatesInput[]
    NOT?: jf_erziehungsberechtigterScalarWhereWithAggregatesInput | jf_erziehungsberechtigterScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"jf_erziehungsberechtigter"> | number
    JF_Mitglied_ID?: IntWithAggregatesFilter<"jf_erziehungsberechtigter"> | number
    Person_ID?: IntWithAggregatesFilter<"jf_erziehungsberechtigter"> | number
    Erstellt_am?: DateTimeNullableWithAggregatesFilter<"jf_erziehungsberechtigter"> | Date | string | null
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"jf_erziehungsberechtigter"> | Date | string | null
  }

  export type jf_mitgliedWhereInput = {
    AND?: jf_mitgliedWhereInput | jf_mitgliedWhereInput[]
    OR?: jf_mitgliedWhereInput[]
    NOT?: jf_mitgliedWhereInput | jf_mitgliedWhereInput[]
    ID?: IntFilter<"jf_mitglied"> | number
    Person_ID?: IntFilter<"jf_mitglied"> | number
    Eintrittsdatum?: DateTimeFilter<"jf_mitglied"> | Date | string
    Austrittsdatum?: DateTimeNullableFilter<"jf_mitglied"> | Date | string | null
    Aufnahmedatum?: DateTimeNullableFilter<"jf_mitglied"> | Date | string | null
    Status?: Enumjf_mitglied_statusNullableFilter<"jf_mitglied"> | $Enums.jf_mitglied_status | null
    Erstellt_am?: DateTimeNullableFilter<"jf_mitglied"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"jf_mitglied"> | Date | string | null
    allergie?: AllergieListRelationFilter
    jf_erziehungsberechtigter?: Jf_erziehungsberechtigterListRelationFilter
  }

  export type jf_mitgliedOrderByWithRelationInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
    Eintrittsdatum?: SortOrder
    Austrittsdatum?: SortOrderInput | SortOrder
    Aufnahmedatum?: SortOrderInput | SortOrder
    Status?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    allergie?: allergieOrderByRelationAggregateInput
    jf_erziehungsberechtigter?: jf_erziehungsberechtigterOrderByRelationAggregateInput
  }

  export type jf_mitgliedWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: jf_mitgliedWhereInput | jf_mitgliedWhereInput[]
    OR?: jf_mitgliedWhereInput[]
    NOT?: jf_mitgliedWhereInput | jf_mitgliedWhereInput[]
    Person_ID?: IntFilter<"jf_mitglied"> | number
    Eintrittsdatum?: DateTimeFilter<"jf_mitglied"> | Date | string
    Austrittsdatum?: DateTimeNullableFilter<"jf_mitglied"> | Date | string | null
    Aufnahmedatum?: DateTimeNullableFilter<"jf_mitglied"> | Date | string | null
    Status?: Enumjf_mitglied_statusNullableFilter<"jf_mitglied"> | $Enums.jf_mitglied_status | null
    Erstellt_am?: DateTimeNullableFilter<"jf_mitglied"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"jf_mitglied"> | Date | string | null
    allergie?: AllergieListRelationFilter
    jf_erziehungsberechtigter?: Jf_erziehungsberechtigterListRelationFilter
  }, "ID">

  export type jf_mitgliedOrderByWithAggregationInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
    Eintrittsdatum?: SortOrder
    Austrittsdatum?: SortOrderInput | SortOrder
    Aufnahmedatum?: SortOrderInput | SortOrder
    Status?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: jf_mitgliedCountOrderByAggregateInput
    _avg?: jf_mitgliedAvgOrderByAggregateInput
    _max?: jf_mitgliedMaxOrderByAggregateInput
    _min?: jf_mitgliedMinOrderByAggregateInput
    _sum?: jf_mitgliedSumOrderByAggregateInput
  }

  export type jf_mitgliedScalarWhereWithAggregatesInput = {
    AND?: jf_mitgliedScalarWhereWithAggregatesInput | jf_mitgliedScalarWhereWithAggregatesInput[]
    OR?: jf_mitgliedScalarWhereWithAggregatesInput[]
    NOT?: jf_mitgliedScalarWhereWithAggregatesInput | jf_mitgliedScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"jf_mitglied"> | number
    Person_ID?: IntWithAggregatesFilter<"jf_mitglied"> | number
    Eintrittsdatum?: DateTimeWithAggregatesFilter<"jf_mitglied"> | Date | string
    Austrittsdatum?: DateTimeNullableWithAggregatesFilter<"jf_mitglied"> | Date | string | null
    Aufnahmedatum?: DateTimeNullableWithAggregatesFilter<"jf_mitglied"> | Date | string | null
    Status?: Enumjf_mitglied_statusNullableWithAggregatesFilter<"jf_mitglied"> | $Enums.jf_mitglied_status | null
    Erstellt_am?: DateTimeNullableWithAggregatesFilter<"jf_mitglied"> | Date | string | null
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"jf_mitglied"> | Date | string | null
  }

  export type lehrgangWhereInput = {
    AND?: lehrgangWhereInput | lehrgangWhereInput[]
    OR?: lehrgangWhereInput[]
    NOT?: lehrgangWhereInput | lehrgangWhereInput[]
    ID?: IntFilter<"lehrgang"> | number
    Abk_rzung?: StringNullableFilter<"lehrgang"> | string | null
    Beschreibung?: StringNullableFilter<"lehrgang"> | string | null
    Reihenfolge?: IntNullableFilter<"lehrgang"> | number | null
    Erstellt_am?: DateTimeNullableFilter<"lehrgang"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"lehrgang"> | Date | string | null
    ff_mitglied_lehrgang?: Ff_mitglied_lehrgangListRelationFilter
  }

  export type lehrgangOrderByWithRelationInput = {
    ID?: SortOrder
    Abk_rzung?: SortOrderInput | SortOrder
    Beschreibung?: SortOrderInput | SortOrder
    Reihenfolge?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangOrderByRelationAggregateInput
  }

  export type lehrgangWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: lehrgangWhereInput | lehrgangWhereInput[]
    OR?: lehrgangWhereInput[]
    NOT?: lehrgangWhereInput | lehrgangWhereInput[]
    Abk_rzung?: StringNullableFilter<"lehrgang"> | string | null
    Beschreibung?: StringNullableFilter<"lehrgang"> | string | null
    Reihenfolge?: IntNullableFilter<"lehrgang"> | number | null
    Erstellt_am?: DateTimeNullableFilter<"lehrgang"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"lehrgang"> | Date | string | null
    ff_mitglied_lehrgang?: Ff_mitglied_lehrgangListRelationFilter
  }, "ID">

  export type lehrgangOrderByWithAggregationInput = {
    ID?: SortOrder
    Abk_rzung?: SortOrderInput | SortOrder
    Beschreibung?: SortOrderInput | SortOrder
    Reihenfolge?: SortOrderInput | SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: lehrgangCountOrderByAggregateInput
    _avg?: lehrgangAvgOrderByAggregateInput
    _max?: lehrgangMaxOrderByAggregateInput
    _min?: lehrgangMinOrderByAggregateInput
    _sum?: lehrgangSumOrderByAggregateInput
  }

  export type lehrgangScalarWhereWithAggregatesInput = {
    AND?: lehrgangScalarWhereWithAggregatesInput | lehrgangScalarWhereWithAggregatesInput[]
    OR?: lehrgangScalarWhereWithAggregatesInput[]
    NOT?: lehrgangScalarWhereWithAggregatesInput | lehrgangScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"lehrgang"> | number
    Abk_rzung?: StringNullableWithAggregatesFilter<"lehrgang"> | string | null
    Beschreibung?: StringNullableWithAggregatesFilter<"lehrgang"> | string | null
    Reihenfolge?: IntNullableWithAggregatesFilter<"lehrgang"> | number | null
    Erstellt_am?: DateTimeNullableWithAggregatesFilter<"lehrgang"> | Date | string | null
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"lehrgang"> | Date | string | null
  }

  export type mitglied_funktionenWhereInput = {
    AND?: mitglied_funktionenWhereInput | mitglied_funktionenWhereInput[]
    OR?: mitglied_funktionenWhereInput[]
    NOT?: mitglied_funktionenWhereInput | mitglied_funktionenWhereInput[]
    ID?: IntFilter<"mitglied_funktionen"> | number
    Mitglied_ID?: IntFilter<"mitglied_funktionen"> | number
    Funktion_ID?: IntFilter<"mitglied_funktionen"> | number
    Typ?: Enummitglied_funktionen_typFilter<"mitglied_funktionen"> | $Enums.mitglied_funktionen_typ
    Erstellt_am?: DateTimeNullableFilter<"mitglied_funktionen"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"mitglied_funktionen"> | Date | string | null
    ff_mitglied?: XOR<Ff_mitgliedScalarRelationFilter, ff_mitgliedWhereInput>
  }

  export type mitglied_funktionenOrderByWithRelationInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Funktion_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    ff_mitglied?: ff_mitgliedOrderByWithRelationInput
  }

  export type mitglied_funktionenWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: mitglied_funktionenWhereInput | mitglied_funktionenWhereInput[]
    OR?: mitglied_funktionenWhereInput[]
    NOT?: mitglied_funktionenWhereInput | mitglied_funktionenWhereInput[]
    Mitglied_ID?: IntFilter<"mitglied_funktionen"> | number
    Funktion_ID?: IntFilter<"mitglied_funktionen"> | number
    Typ?: Enummitglied_funktionen_typFilter<"mitglied_funktionen"> | $Enums.mitglied_funktionen_typ
    Erstellt_am?: DateTimeNullableFilter<"mitglied_funktionen"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"mitglied_funktionen"> | Date | string | null
    ff_mitglied?: XOR<Ff_mitgliedScalarRelationFilter, ff_mitgliedWhereInput>
  }, "ID">

  export type mitglied_funktionenOrderByWithAggregationInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Funktion_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrderInput | SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: mitglied_funktionenCountOrderByAggregateInput
    _avg?: mitglied_funktionenAvgOrderByAggregateInput
    _max?: mitglied_funktionenMaxOrderByAggregateInput
    _min?: mitglied_funktionenMinOrderByAggregateInput
    _sum?: mitglied_funktionenSumOrderByAggregateInput
  }

  export type mitglied_funktionenScalarWhereWithAggregatesInput = {
    AND?: mitglied_funktionenScalarWhereWithAggregatesInput | mitglied_funktionenScalarWhereWithAggregatesInput[]
    OR?: mitglied_funktionenScalarWhereWithAggregatesInput[]
    NOT?: mitglied_funktionenScalarWhereWithAggregatesInput | mitglied_funktionenScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"mitglied_funktionen"> | number
    Mitglied_ID?: IntWithAggregatesFilter<"mitglied_funktionen"> | number
    Funktion_ID?: IntWithAggregatesFilter<"mitglied_funktionen"> | number
    Typ?: Enummitglied_funktionen_typWithAggregatesFilter<"mitglied_funktionen"> | $Enums.mitglied_funktionen_typ
    Erstellt_am?: DateTimeNullableWithAggregatesFilter<"mitglied_funktionen"> | Date | string | null
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"mitglied_funktionen"> | Date | string | null
  }

  export type mitglied_loginWhereInput = {
    AND?: mitglied_loginWhereInput | mitglied_loginWhereInput[]
    OR?: mitglied_loginWhereInput[]
    NOT?: mitglied_loginWhereInput | mitglied_loginWhereInput[]
    ID?: IntFilter<"mitglied_login"> | number
    Benutzer_ID?: IntFilter<"mitglied_login"> | number
    Mitglied_ID?: IntFilter<"mitglied_login"> | number
    Typ?: Enummitglied_login_typFilter<"mitglied_login"> | $Enums.mitglied_login_typ
    Erstellt_am?: DateTimeFilter<"mitglied_login"> | Date | string
    Geaendert_am?: DateTimeNullableFilter<"mitglied_login"> | Date | string | null
  }

  export type mitglied_loginOrderByWithRelationInput = {
    ID?: SortOrder
    Benutzer_ID?: SortOrder
    Mitglied_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
  }

  export type mitglied_loginWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: mitglied_loginWhereInput | mitglied_loginWhereInput[]
    OR?: mitglied_loginWhereInput[]
    NOT?: mitglied_loginWhereInput | mitglied_loginWhereInput[]
    Benutzer_ID?: IntFilter<"mitglied_login"> | number
    Mitglied_ID?: IntFilter<"mitglied_login"> | number
    Typ?: Enummitglied_login_typFilter<"mitglied_login"> | $Enums.mitglied_login_typ
    Erstellt_am?: DateTimeFilter<"mitglied_login"> | Date | string
    Geaendert_am?: DateTimeNullableFilter<"mitglied_login"> | Date | string | null
  }, "ID">

  export type mitglied_loginOrderByWithAggregationInput = {
    ID?: SortOrder
    Benutzer_ID?: SortOrder
    Mitglied_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: mitglied_loginCountOrderByAggregateInput
    _avg?: mitglied_loginAvgOrderByAggregateInput
    _max?: mitglied_loginMaxOrderByAggregateInput
    _min?: mitglied_loginMinOrderByAggregateInput
    _sum?: mitglied_loginSumOrderByAggregateInput
  }

  export type mitglied_loginScalarWhereWithAggregatesInput = {
    AND?: mitglied_loginScalarWhereWithAggregatesInput | mitglied_loginScalarWhereWithAggregatesInput[]
    OR?: mitglied_loginScalarWhereWithAggregatesInput[]
    NOT?: mitglied_loginScalarWhereWithAggregatesInput | mitglied_loginScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"mitglied_login"> | number
    Benutzer_ID?: IntWithAggregatesFilter<"mitglied_login"> | number
    Mitglied_ID?: IntWithAggregatesFilter<"mitglied_login"> | number
    Typ?: Enummitglied_login_typWithAggregatesFilter<"mitglied_login"> | $Enums.mitglied_login_typ
    Erstellt_am?: DateTimeWithAggregatesFilter<"mitglied_login"> | Date | string
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"mitglied_login"> | Date | string | null
  }

  export type teilnahmeWhereInput = {
    AND?: teilnahmeWhereInput | teilnahmeWhereInput[]
    OR?: teilnahmeWhereInput[]
    NOT?: teilnahmeWhereInput | teilnahmeWhereInput[]
    ID?: IntFilter<"teilnahme"> | number
    Mitglied_ID?: IntFilter<"teilnahme"> | number
    Veranstaltung_ID?: IntFilter<"teilnahme"> | number
    Typ?: Enumteilnahme_typFilter<"teilnahme"> | $Enums.teilnahme_typ
    Erstellt_am?: DateTimeFilter<"teilnahme"> | Date | string
    Geaendert_am?: DateTimeNullableFilter<"teilnahme"> | Date | string | null
  }

  export type teilnahmeOrderByWithRelationInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Veranstaltung_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
  }

  export type teilnahmeWhereUniqueInput = Prisma.AtLeast<{
    ID?: number
    AND?: teilnahmeWhereInput | teilnahmeWhereInput[]
    OR?: teilnahmeWhereInput[]
    NOT?: teilnahmeWhereInput | teilnahmeWhereInput[]
    Mitglied_ID?: IntFilter<"teilnahme"> | number
    Veranstaltung_ID?: IntFilter<"teilnahme"> | number
    Typ?: Enumteilnahme_typFilter<"teilnahme"> | $Enums.teilnahme_typ
    Erstellt_am?: DateTimeFilter<"teilnahme"> | Date | string
    Geaendert_am?: DateTimeNullableFilter<"teilnahme"> | Date | string | null
  }, "ID">

  export type teilnahmeOrderByWithAggregationInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Veranstaltung_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrderInput | SortOrder
    _count?: teilnahmeCountOrderByAggregateInput
    _avg?: teilnahmeAvgOrderByAggregateInput
    _max?: teilnahmeMaxOrderByAggregateInput
    _min?: teilnahmeMinOrderByAggregateInput
    _sum?: teilnahmeSumOrderByAggregateInput
  }

  export type teilnahmeScalarWhereWithAggregatesInput = {
    AND?: teilnahmeScalarWhereWithAggregatesInput | teilnahmeScalarWhereWithAggregatesInput[]
    OR?: teilnahmeScalarWhereWithAggregatesInput[]
    NOT?: teilnahmeScalarWhereWithAggregatesInput | teilnahmeScalarWhereWithAggregatesInput[]
    ID?: IntWithAggregatesFilter<"teilnahme"> | number
    Mitglied_ID?: IntWithAggregatesFilter<"teilnahme"> | number
    Veranstaltung_ID?: IntWithAggregatesFilter<"teilnahme"> | number
    Typ?: Enumteilnahme_typWithAggregatesFilter<"teilnahme"> | $Enums.teilnahme_typ
    Erstellt_am?: DateTimeWithAggregatesFilter<"teilnahme"> | Date | string
    Geaendert_am?: DateTimeNullableWithAggregatesFilter<"teilnahme"> | Date | string | null
  }

  export type allergieCreateInput = {
    Allergie: string
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    ff_mitglied: ff_mitgliedCreateNestedOneWithoutAllergieInput
    jf_mitglied: jf_mitgliedCreateNestedOneWithoutAllergieInput
  }

  export type allergieUncheckedCreateInput = {
    ID?: number
    JF_Mitglied_ID: number
    FF_Mitglied_ID: number
    Allergie: string
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type allergieUpdateInput = {
    Allergie?: StringFieldUpdateOperationsInput | string
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ff_mitglied?: ff_mitgliedUpdateOneRequiredWithoutAllergieNestedInput
    jf_mitglied?: jf_mitgliedUpdateOneRequiredWithoutAllergieNestedInput
  }

  export type allergieUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    JF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Allergie?: StringFieldUpdateOperationsInput | string
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type allergieCreateManyInput = {
    ID?: number
    JF_Mitglied_ID: number
    FF_Mitglied_ID: number
    Allergie: string
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type allergieUpdateManyMutationInput = {
    Allergie?: StringFieldUpdateOperationsInput | string
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type allergieUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    JF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Allergie?: StringFieldUpdateOperationsInput | string
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dienstgradCreateInput = {
    Abkuerzung_maennlich?: string | null
    Beschreibung_maennlich?: string | null
    Abkuerzung_weiblich?: string | null
    Beschreibung_weiblich?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type dienstgradUncheckedCreateInput = {
    ID?: number
    Abkuerzung_maennlich?: string | null
    Beschreibung_maennlich?: string | null
    Abkuerzung_weiblich?: string | null
    Beschreibung_weiblich?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type dienstgradUpdateInput = {
    Abkuerzung_maennlich?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung_maennlich?: NullableStringFieldUpdateOperationsInput | string | null
    Abkuerzung_weiblich?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung_weiblich?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dienstgradUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Abkuerzung_maennlich?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung_maennlich?: NullableStringFieldUpdateOperationsInput | string | null
    Abkuerzung_weiblich?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung_weiblich?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dienstgradCreateManyInput = {
    ID?: number
    Abkuerzung_maennlich?: string | null
    Beschreibung_maennlich?: string | null
    Abkuerzung_weiblich?: string | null
    Beschreibung_weiblich?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type dienstgradUpdateManyMutationInput = {
    Abkuerzung_maennlich?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung_maennlich?: NullableStringFieldUpdateOperationsInput | string | null
    Abkuerzung_weiblich?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung_weiblich?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dienstgradUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Abkuerzung_maennlich?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung_maennlich?: NullableStringFieldUpdateOperationsInput | string | null
    Abkuerzung_weiblich?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung_weiblich?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dienstabendCreateInput = {
    Datum?: Date | string | null
    Thema?: string | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
    einteilung?: einteilungCreateNestedManyWithoutDienstabendInput
  }

  export type dienstabendUncheckedCreateInput = {
    ID?: number
    Datum?: Date | string | null
    Thema?: string | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
    einteilung?: einteilungUncheckedCreateNestedManyWithoutDienstabendInput
  }

  export type dienstabendUpdateInput = {
    Datum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Thema?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    einteilung?: einteilungUpdateManyWithoutDienstabendNestedInput
  }

  export type dienstabendUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Datum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Thema?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    einteilung?: einteilungUncheckedUpdateManyWithoutDienstabendNestedInput
  }

  export type dienstabendCreateManyInput = {
    ID?: number
    Datum?: Date | string | null
    Thema?: string | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type dienstabendUpdateManyMutationInput = {
    Datum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Thema?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dienstabendUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Datum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Thema?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type einheitCreateInput = {
    Abkuerzung?: string | null
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    einteilung?: einteilungCreateNestedManyWithoutEinheitInput
  }

  export type einheitUncheckedCreateInput = {
    ID?: number
    Abkuerzung?: string | null
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    einteilung?: einteilungUncheckedCreateNestedManyWithoutEinheitInput
  }

  export type einheitUpdateInput = {
    Abkuerzung?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    einteilung?: einteilungUpdateManyWithoutEinheitNestedInput
  }

  export type einheitUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Abkuerzung?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    einteilung?: einteilungUncheckedUpdateManyWithoutEinheitNestedInput
  }

  export type einheitCreateManyInput = {
    ID?: number
    Abkuerzung?: string | null
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type einheitUpdateManyMutationInput = {
    Abkuerzung?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type einheitUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Abkuerzung?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type einsatzCreateInput = {
    Einsatznummer: number
    Datum_Anfang: Date | string
    Uhrzeit_Anfang: Date | string
    Datum_Ende?: Date | string | null
    Uhrzeit_Ende?: Date | string | null
    Beschreibung?: string | null
    Strasse?: string | null
    Hausnummer?: string | null
    Postleitzahl?: string | null
    Ort?: string | null
    Art: $Enums.einsatz_art
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    einteilung?: einteilungCreateNestedManyWithoutEinsatzInput
  }

  export type einsatzUncheckedCreateInput = {
    ID?: number
    Einsatznummer: number
    Datum_Anfang: Date | string
    Uhrzeit_Anfang: Date | string
    Datum_Ende?: Date | string | null
    Uhrzeit_Ende?: Date | string | null
    Beschreibung?: string | null
    Strasse?: string | null
    Hausnummer?: string | null
    Postleitzahl?: string | null
    Ort?: string | null
    Art: $Enums.einsatz_art
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    einteilung?: einteilungUncheckedCreateNestedManyWithoutEinsatzInput
  }

  export type einsatzUpdateInput = {
    Einsatznummer?: IntFieldUpdateOperationsInput | number
    Datum_Anfang?: DateTimeFieldUpdateOperationsInput | Date | string
    Uhrzeit_Anfang?: DateTimeFieldUpdateOperationsInput | Date | string
    Datum_Ende?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Uhrzeit_Ende?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Strasse?: NullableStringFieldUpdateOperationsInput | string | null
    Hausnummer?: NullableStringFieldUpdateOperationsInput | string | null
    Postleitzahl?: NullableStringFieldUpdateOperationsInput | string | null
    Ort?: NullableStringFieldUpdateOperationsInput | string | null
    Art?: Enumeinsatz_artFieldUpdateOperationsInput | $Enums.einsatz_art
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    einteilung?: einteilungUpdateManyWithoutEinsatzNestedInput
  }

  export type einsatzUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatznummer?: IntFieldUpdateOperationsInput | number
    Datum_Anfang?: DateTimeFieldUpdateOperationsInput | Date | string
    Uhrzeit_Anfang?: DateTimeFieldUpdateOperationsInput | Date | string
    Datum_Ende?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Uhrzeit_Ende?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Strasse?: NullableStringFieldUpdateOperationsInput | string | null
    Hausnummer?: NullableStringFieldUpdateOperationsInput | string | null
    Postleitzahl?: NullableStringFieldUpdateOperationsInput | string | null
    Ort?: NullableStringFieldUpdateOperationsInput | string | null
    Art?: Enumeinsatz_artFieldUpdateOperationsInput | $Enums.einsatz_art
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    einteilung?: einteilungUncheckedUpdateManyWithoutEinsatzNestedInput
  }

  export type einsatzCreateManyInput = {
    ID?: number
    Einsatznummer: number
    Datum_Anfang: Date | string
    Uhrzeit_Anfang: Date | string
    Datum_Ende?: Date | string | null
    Uhrzeit_Ende?: Date | string | null
    Beschreibung?: string | null
    Strasse?: string | null
    Hausnummer?: string | null
    Postleitzahl?: string | null
    Ort?: string | null
    Art: $Enums.einsatz_art
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type einsatzUpdateManyMutationInput = {
    Einsatznummer?: IntFieldUpdateOperationsInput | number
    Datum_Anfang?: DateTimeFieldUpdateOperationsInput | Date | string
    Uhrzeit_Anfang?: DateTimeFieldUpdateOperationsInput | Date | string
    Datum_Ende?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Uhrzeit_Ende?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Strasse?: NullableStringFieldUpdateOperationsInput | string | null
    Hausnummer?: NullableStringFieldUpdateOperationsInput | string | null
    Postleitzahl?: NullableStringFieldUpdateOperationsInput | string | null
    Ort?: NullableStringFieldUpdateOperationsInput | string | null
    Art?: Enumeinsatz_artFieldUpdateOperationsInput | $Enums.einsatz_art
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type einsatzUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatznummer?: IntFieldUpdateOperationsInput | number
    Datum_Anfang?: DateTimeFieldUpdateOperationsInput | Date | string
    Uhrzeit_Anfang?: DateTimeFieldUpdateOperationsInput | Date | string
    Datum_Ende?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Uhrzeit_Ende?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Strasse?: NullableStringFieldUpdateOperationsInput | string | null
    Hausnummer?: NullableStringFieldUpdateOperationsInput | string | null
    Postleitzahl?: NullableStringFieldUpdateOperationsInput | string | null
    Ort?: NullableStringFieldUpdateOperationsInput | string | null
    Art?: Enumeinsatz_artFieldUpdateOperationsInput | $Enums.einsatz_art
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type einteilungCreateInput = {
    dienstabend: dienstabendCreateNestedOneWithoutEinteilungInput
    einheit: einheitCreateNestedOneWithoutEinteilungInput
    einsatz: einsatzCreateNestedOneWithoutEinteilungInput
    fahrzeug: fahrzeugCreateNestedOneWithoutEinteilungInput
    ff_mitglied: ff_mitgliedCreateNestedOneWithoutEinteilungInput
  }

  export type einteilungUncheckedCreateInput = {
    ID?: number
    Einsatz_ID: number
    Dienstabend_ID: number
    Fahrzeug_ID: number
    FF_Mitglied_ID: number
    Einheit_ID: number
  }

  export type einteilungUpdateInput = {
    dienstabend?: dienstabendUpdateOneRequiredWithoutEinteilungNestedInput
    einheit?: einheitUpdateOneRequiredWithoutEinteilungNestedInput
    einsatz?: einsatzUpdateOneRequiredWithoutEinteilungNestedInput
    fahrzeug?: fahrzeugUpdateOneRequiredWithoutEinteilungNestedInput
    ff_mitglied?: ff_mitgliedUpdateOneRequiredWithoutEinteilungNestedInput
  }

  export type einteilungUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatz_ID?: IntFieldUpdateOperationsInput | number
    Dienstabend_ID?: IntFieldUpdateOperationsInput | number
    Fahrzeug_ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Einheit_ID?: IntFieldUpdateOperationsInput | number
  }

  export type einteilungCreateManyInput = {
    ID?: number
    Einsatz_ID: number
    Dienstabend_ID: number
    Fahrzeug_ID: number
    FF_Mitglied_ID: number
    Einheit_ID: number
  }

  export type einteilungUpdateManyMutationInput = {

  }

  export type einteilungUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatz_ID?: IntFieldUpdateOperationsInput | number
    Dienstabend_ID?: IntFieldUpdateOperationsInput | number
    Fahrzeug_ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Einheit_ID?: IntFieldUpdateOperationsInput | number
  }

  export type fahrzeugCreateInput = {
    Kennzeichen?: string | null
    Fahrzeugtyp?: string | null
    Besatzungsstaerke?: string | null
    Status?: $Enums.fahrzeug_status | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    einteilung?: einteilungCreateNestedManyWithoutFahrzeugInput
  }

  export type fahrzeugUncheckedCreateInput = {
    ID?: number
    Kennzeichen?: string | null
    Fahrzeugtyp?: string | null
    Besatzungsstaerke?: string | null
    Status?: $Enums.fahrzeug_status | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    einteilung?: einteilungUncheckedCreateNestedManyWithoutFahrzeugInput
  }

  export type fahrzeugUpdateInput = {
    Kennzeichen?: NullableStringFieldUpdateOperationsInput | string | null
    Fahrzeugtyp?: NullableStringFieldUpdateOperationsInput | string | null
    Besatzungsstaerke?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: NullableEnumfahrzeug_statusFieldUpdateOperationsInput | $Enums.fahrzeug_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    einteilung?: einteilungUpdateManyWithoutFahrzeugNestedInput
  }

  export type fahrzeugUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Kennzeichen?: NullableStringFieldUpdateOperationsInput | string | null
    Fahrzeugtyp?: NullableStringFieldUpdateOperationsInput | string | null
    Besatzungsstaerke?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: NullableEnumfahrzeug_statusFieldUpdateOperationsInput | $Enums.fahrzeug_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    einteilung?: einteilungUncheckedUpdateManyWithoutFahrzeugNestedInput
  }

  export type fahrzeugCreateManyInput = {
    ID?: number
    Kennzeichen?: string | null
    Fahrzeugtyp?: string | null
    Besatzungsstaerke?: string | null
    Status?: $Enums.fahrzeug_status | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type fahrzeugUpdateManyMutationInput = {
    Kennzeichen?: NullableStringFieldUpdateOperationsInput | string | null
    Fahrzeugtyp?: NullableStringFieldUpdateOperationsInput | string | null
    Besatzungsstaerke?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: NullableEnumfahrzeug_statusFieldUpdateOperationsInput | $Enums.fahrzeug_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type fahrzeugUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Kennzeichen?: NullableStringFieldUpdateOperationsInput | string | null
    Fahrzeugtyp?: NullableStringFieldUpdateOperationsInput | string | null
    Besatzungsstaerke?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: NullableEnumfahrzeug_statusFieldUpdateOperationsInput | $Enums.fahrzeug_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ff_mitgliedCreateInput = {
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
    allergie?: allergieCreateNestedManyWithoutFf_mitgliedInput
    einteilung?: einteilungCreateNestedManyWithoutFf_mitgliedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangCreateNestedManyWithoutFf_mitgliedInput
    mitglied_funktionen?: mitglied_funktionenCreateNestedManyWithoutFf_mitgliedInput
  }

  export type ff_mitgliedUncheckedCreateInput = {
    ID?: number
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
    allergie?: allergieUncheckedCreateNestedManyWithoutFf_mitgliedInput
    einteilung?: einteilungUncheckedCreateNestedManyWithoutFf_mitgliedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUncheckedCreateNestedManyWithoutFf_mitgliedInput
    mitglied_funktionen?: mitglied_funktionenUncheckedCreateNestedManyWithoutFf_mitgliedInput
  }

  export type ff_mitgliedUpdateInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumff_mitglied_statusFieldUpdateOperationsInput | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergieUpdateManyWithoutFf_mitgliedNestedInput
    einteilung?: einteilungUpdateManyWithoutFf_mitgliedNestedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUpdateManyWithoutFf_mitgliedNestedInput
    mitglied_funktionen?: mitglied_funktionenUpdateManyWithoutFf_mitgliedNestedInput
  }

  export type ff_mitgliedUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumff_mitglied_statusFieldUpdateOperationsInput | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergieUncheckedUpdateManyWithoutFf_mitgliedNestedInput
    einteilung?: einteilungUncheckedUpdateManyWithoutFf_mitgliedNestedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUncheckedUpdateManyWithoutFf_mitgliedNestedInput
    mitglied_funktionen?: mitglied_funktionenUncheckedUpdateManyWithoutFf_mitgliedNestedInput
  }

  export type ff_mitgliedCreateManyInput = {
    ID?: number
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type ff_mitgliedUpdateManyMutationInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumff_mitglied_statusFieldUpdateOperationsInput | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ff_mitgliedUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumff_mitglied_statusFieldUpdateOperationsInput | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ff_mitglied_lehrgangCreateInput = {
    Datum_bestanden?: Date | string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    ff_mitglied: ff_mitgliedCreateNestedOneWithoutFf_mitglied_lehrgangInput
    lehrgang: lehrgangCreateNestedOneWithoutFf_mitglied_lehrgangInput
  }

  export type ff_mitglied_lehrgangUncheckedCreateInput = {
    ID?: number
    FF_Mitglied_ID: number
    Lehrgang_ID: number
    Datum_bestanden?: Date | string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type ff_mitglied_lehrgangUpdateInput = {
    Datum_bestanden?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ff_mitglied?: ff_mitgliedUpdateOneRequiredWithoutFf_mitglied_lehrgangNestedInput
    lehrgang?: lehrgangUpdateOneRequiredWithoutFf_mitglied_lehrgangNestedInput
  }

  export type ff_mitglied_lehrgangUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Lehrgang_ID?: IntFieldUpdateOperationsInput | number
    Datum_bestanden?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ff_mitglied_lehrgangCreateManyInput = {
    ID?: number
    FF_Mitglied_ID: number
    Lehrgang_ID: number
    Datum_bestanden?: Date | string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type ff_mitglied_lehrgangUpdateManyMutationInput = {
    Datum_bestanden?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ff_mitglied_lehrgangUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Lehrgang_ID?: IntFieldUpdateOperationsInput | number
    Datum_bestanden?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type funktion_ffCreateInput = {
    Name: string
    Ist_Admin?: boolean | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type funktion_ffUncheckedCreateInput = {
    ID?: number
    Name: string
    Ist_Admin?: boolean | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type funktion_ffUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Ist_Admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type funktion_ffUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Ist_Admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type funktion_ffCreateManyInput = {
    ID?: number
    Name: string
    Ist_Admin?: boolean | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type funktion_ffUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Ist_Admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type funktion_ffUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Ist_Admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type funktion_jfCreateInput = {
    Name: string
    Ist_Admin?: boolean | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type funktion_jfUncheckedCreateInput = {
    ID?: number
    Name: string
    Ist_Admin?: boolean | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type funktion_jfUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Ist_Admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type funktion_jfUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Ist_Admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type funktion_jfCreateManyInput = {
    ID?: number
    Name: string
    Ist_Admin?: boolean | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type funktion_jfUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Ist_Admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type funktion_jfUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Ist_Admin?: NullableBoolFieldUpdateOperationsInput | boolean | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jf_erziehungsberechtigterCreateInput = {
    Person_ID: number
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    jf_mitglied: jf_mitgliedCreateNestedOneWithoutJf_erziehungsberechtigterInput
  }

  export type jf_erziehungsberechtigterUncheckedCreateInput = {
    ID?: number
    JF_Mitglied_ID: number
    Person_ID: number
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type jf_erziehungsberechtigterUpdateInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jf_mitglied?: jf_mitgliedUpdateOneRequiredWithoutJf_erziehungsberechtigterNestedInput
  }

  export type jf_erziehungsberechtigterUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    JF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jf_erziehungsberechtigterCreateManyInput = {
    ID?: number
    JF_Mitglied_ID: number
    Person_ID: number
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type jf_erziehungsberechtigterUpdateManyMutationInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jf_erziehungsberechtigterUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    JF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jf_mitgliedCreateInput = {
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.jf_mitglied_status | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    allergie?: allergieCreateNestedManyWithoutJf_mitgliedInput
    jf_erziehungsberechtigter?: jf_erziehungsberechtigterCreateNestedManyWithoutJf_mitgliedInput
  }

  export type jf_mitgliedUncheckedCreateInput = {
    ID?: number
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.jf_mitglied_status | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    allergie?: allergieUncheckedCreateNestedManyWithoutJf_mitgliedInput
    jf_erziehungsberechtigter?: jf_erziehungsberechtigterUncheckedCreateNestedManyWithoutJf_mitgliedInput
  }

  export type jf_mitgliedUpdateInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumjf_mitglied_statusFieldUpdateOperationsInput | $Enums.jf_mitglied_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergieUpdateManyWithoutJf_mitgliedNestedInput
    jf_erziehungsberechtigter?: jf_erziehungsberechtigterUpdateManyWithoutJf_mitgliedNestedInput
  }

  export type jf_mitgliedUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumjf_mitglied_statusFieldUpdateOperationsInput | $Enums.jf_mitglied_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergieUncheckedUpdateManyWithoutJf_mitgliedNestedInput
    jf_erziehungsberechtigter?: jf_erziehungsberechtigterUncheckedUpdateManyWithoutJf_mitgliedNestedInput
  }

  export type jf_mitgliedCreateManyInput = {
    ID?: number
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.jf_mitglied_status | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type jf_mitgliedUpdateManyMutationInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumjf_mitglied_statusFieldUpdateOperationsInput | $Enums.jf_mitglied_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jf_mitgliedUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumjf_mitglied_statusFieldUpdateOperationsInput | $Enums.jf_mitglied_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type lehrgangCreateInput = {
    Abk_rzung?: string | null
    Beschreibung?: string | null
    Reihenfolge?: number | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangCreateNestedManyWithoutLehrgangInput
  }

  export type lehrgangUncheckedCreateInput = {
    ID?: number
    Abk_rzung?: string | null
    Beschreibung?: string | null
    Reihenfolge?: number | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUncheckedCreateNestedManyWithoutLehrgangInput
  }

  export type lehrgangUpdateInput = {
    Abk_rzung?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Reihenfolge?: NullableIntFieldUpdateOperationsInput | number | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUpdateManyWithoutLehrgangNestedInput
  }

  export type lehrgangUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Abk_rzung?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Reihenfolge?: NullableIntFieldUpdateOperationsInput | number | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUncheckedUpdateManyWithoutLehrgangNestedInput
  }

  export type lehrgangCreateManyInput = {
    ID?: number
    Abk_rzung?: string | null
    Beschreibung?: string | null
    Reihenfolge?: number | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type lehrgangUpdateManyMutationInput = {
    Abk_rzung?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Reihenfolge?: NullableIntFieldUpdateOperationsInput | number | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type lehrgangUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Abk_rzung?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Reihenfolge?: NullableIntFieldUpdateOperationsInput | number | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mitglied_funktionenCreateInput = {
    Funktion_ID: number
    Typ: $Enums.mitglied_funktionen_typ
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    ff_mitglied: ff_mitgliedCreateNestedOneWithoutMitglied_funktionenInput
  }

  export type mitglied_funktionenUncheckedCreateInput = {
    ID?: number
    Mitglied_ID: number
    Funktion_ID: number
    Typ: $Enums.mitglied_funktionen_typ
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type mitglied_funktionenUpdateInput = {
    Funktion_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enummitglied_funktionen_typFieldUpdateOperationsInput | $Enums.mitglied_funktionen_typ
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ff_mitglied?: ff_mitgliedUpdateOneRequiredWithoutMitglied_funktionenNestedInput
  }

  export type mitglied_funktionenUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Funktion_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enummitglied_funktionen_typFieldUpdateOperationsInput | $Enums.mitglied_funktionen_typ
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mitglied_funktionenCreateManyInput = {
    ID?: number
    Mitglied_ID: number
    Funktion_ID: number
    Typ: $Enums.mitglied_funktionen_typ
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type mitglied_funktionenUpdateManyMutationInput = {
    Funktion_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enummitglied_funktionen_typFieldUpdateOperationsInput | $Enums.mitglied_funktionen_typ
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mitglied_funktionenUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Funktion_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enummitglied_funktionen_typFieldUpdateOperationsInput | $Enums.mitglied_funktionen_typ
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mitglied_loginCreateInput = {
    Benutzer_ID: number
    Mitglied_ID: number
    Typ: $Enums.mitglied_login_typ
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type mitglied_loginUncheckedCreateInput = {
    ID?: number
    Benutzer_ID: number
    Mitglied_ID: number
    Typ: $Enums.mitglied_login_typ
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type mitglied_loginUpdateInput = {
    Benutzer_ID?: IntFieldUpdateOperationsInput | number
    Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enummitglied_login_typFieldUpdateOperationsInput | $Enums.mitglied_login_typ
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mitglied_loginUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Benutzer_ID?: IntFieldUpdateOperationsInput | number
    Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enummitglied_login_typFieldUpdateOperationsInput | $Enums.mitglied_login_typ
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mitglied_loginCreateManyInput = {
    ID?: number
    Benutzer_ID: number
    Mitglied_ID: number
    Typ: $Enums.mitglied_login_typ
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type mitglied_loginUpdateManyMutationInput = {
    Benutzer_ID?: IntFieldUpdateOperationsInput | number
    Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enummitglied_login_typFieldUpdateOperationsInput | $Enums.mitglied_login_typ
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mitglied_loginUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Benutzer_ID?: IntFieldUpdateOperationsInput | number
    Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enummitglied_login_typFieldUpdateOperationsInput | $Enums.mitglied_login_typ
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teilnahmeCreateInput = {
    Mitglied_ID: number
    Veranstaltung_ID: number
    Typ: $Enums.teilnahme_typ
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type teilnahmeUncheckedCreateInput = {
    ID?: number
    Mitglied_ID: number
    Veranstaltung_ID: number
    Typ: $Enums.teilnahme_typ
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type teilnahmeUpdateInput = {
    Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Veranstaltung_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enumteilnahme_typFieldUpdateOperationsInput | $Enums.teilnahme_typ
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teilnahmeUncheckedUpdateInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Veranstaltung_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enumteilnahme_typFieldUpdateOperationsInput | $Enums.teilnahme_typ
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teilnahmeCreateManyInput = {
    ID?: number
    Mitglied_ID: number
    Veranstaltung_ID: number
    Typ: $Enums.teilnahme_typ
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type teilnahmeUpdateManyMutationInput = {
    Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Veranstaltung_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enumteilnahme_typFieldUpdateOperationsInput | $Enums.teilnahme_typ
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type teilnahmeUncheckedUpdateManyInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Veranstaltung_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enumteilnahme_typFieldUpdateOperationsInput | $Enums.teilnahme_typ
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type Ff_mitgliedScalarRelationFilter = {
    is?: ff_mitgliedWhereInput
    isNot?: ff_mitgliedWhereInput
  }

  export type Jf_mitgliedScalarRelationFilter = {
    is?: jf_mitgliedWhereInput
    isNot?: jf_mitgliedWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type allergieCountOrderByAggregateInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Allergie?: SortOrder
    Beschreibung?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type allergieAvgOrderByAggregateInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
  }

  export type allergieMaxOrderByAggregateInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Allergie?: SortOrder
    Beschreibung?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type allergieMinOrderByAggregateInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Allergie?: SortOrder
    Beschreibung?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type allergieSumOrderByAggregateInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type dienstgradCountOrderByAggregateInput = {
    ID?: SortOrder
    Abkuerzung_maennlich?: SortOrder
    Beschreibung_maennlich?: SortOrder
    Abkuerzung_weiblich?: SortOrder
    Beschreibung_weiblich?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type dienstgradAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type dienstgradMaxOrderByAggregateInput = {
    ID?: SortOrder
    Abkuerzung_maennlich?: SortOrder
    Beschreibung_maennlich?: SortOrder
    Abkuerzung_weiblich?: SortOrder
    Beschreibung_weiblich?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type dienstgradMinOrderByAggregateInput = {
    ID?: SortOrder
    Abkuerzung_maennlich?: SortOrder
    Beschreibung_maennlich?: SortOrder
    Abkuerzung_weiblich?: SortOrder
    Beschreibung_weiblich?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type dienstgradSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EinteilungListRelationFilter = {
    every?: einteilungWhereInput
    some?: einteilungWhereInput
    none?: einteilungWhereInput
  }

  export type einteilungOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type dienstabendCountOrderByAggregateInput = {
    ID?: SortOrder
    Datum?: SortOrder
    Thema?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type dienstabendAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type dienstabendMaxOrderByAggregateInput = {
    ID?: SortOrder
    Datum?: SortOrder
    Thema?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type dienstabendMinOrderByAggregateInput = {
    ID?: SortOrder
    Datum?: SortOrder
    Thema?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type dienstabendSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type einheitCountOrderByAggregateInput = {
    ID?: SortOrder
    Abkuerzung?: SortOrder
    Beschreibung?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type einheitAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type einheitMaxOrderByAggregateInput = {
    ID?: SortOrder
    Abkuerzung?: SortOrder
    Beschreibung?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type einheitMinOrderByAggregateInput = {
    ID?: SortOrder
    Abkuerzung?: SortOrder
    Beschreibung?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type einheitSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type Enumeinsatz_artFilter<$PrismaModel = never> = {
    equals?: $Enums.einsatz_art | Enumeinsatz_artFieldRefInput<$PrismaModel>
    in?: $Enums.einsatz_art[] | ListEnumeinsatz_artFieldRefInput<$PrismaModel>
    notIn?: $Enums.einsatz_art[] | ListEnumeinsatz_artFieldRefInput<$PrismaModel>
    not?: NestedEnumeinsatz_artFilter<$PrismaModel> | $Enums.einsatz_art
  }

  export type einsatzCountOrderByAggregateInput = {
    ID?: SortOrder
    Einsatznummer?: SortOrder
    Datum_Anfang?: SortOrder
    Uhrzeit_Anfang?: SortOrder
    Datum_Ende?: SortOrder
    Uhrzeit_Ende?: SortOrder
    Beschreibung?: SortOrder
    Strasse?: SortOrder
    Hausnummer?: SortOrder
    Postleitzahl?: SortOrder
    Ort?: SortOrder
    Art?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type einsatzAvgOrderByAggregateInput = {
    ID?: SortOrder
    Einsatznummer?: SortOrder
  }

  export type einsatzMaxOrderByAggregateInput = {
    ID?: SortOrder
    Einsatznummer?: SortOrder
    Datum_Anfang?: SortOrder
    Uhrzeit_Anfang?: SortOrder
    Datum_Ende?: SortOrder
    Uhrzeit_Ende?: SortOrder
    Beschreibung?: SortOrder
    Strasse?: SortOrder
    Hausnummer?: SortOrder
    Postleitzahl?: SortOrder
    Ort?: SortOrder
    Art?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type einsatzMinOrderByAggregateInput = {
    ID?: SortOrder
    Einsatznummer?: SortOrder
    Datum_Anfang?: SortOrder
    Uhrzeit_Anfang?: SortOrder
    Datum_Ende?: SortOrder
    Uhrzeit_Ende?: SortOrder
    Beschreibung?: SortOrder
    Strasse?: SortOrder
    Hausnummer?: SortOrder
    Postleitzahl?: SortOrder
    Ort?: SortOrder
    Art?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type einsatzSumOrderByAggregateInput = {
    ID?: SortOrder
    Einsatznummer?: SortOrder
  }

  export type Enumeinsatz_artWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.einsatz_art | Enumeinsatz_artFieldRefInput<$PrismaModel>
    in?: $Enums.einsatz_art[] | ListEnumeinsatz_artFieldRefInput<$PrismaModel>
    notIn?: $Enums.einsatz_art[] | ListEnumeinsatz_artFieldRefInput<$PrismaModel>
    not?: NestedEnumeinsatz_artWithAggregatesFilter<$PrismaModel> | $Enums.einsatz_art
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumeinsatz_artFilter<$PrismaModel>
    _max?: NestedEnumeinsatz_artFilter<$PrismaModel>
  }

  export type DienstabendScalarRelationFilter = {
    is?: dienstabendWhereInput
    isNot?: dienstabendWhereInput
  }

  export type EinheitScalarRelationFilter = {
    is?: einheitWhereInput
    isNot?: einheitWhereInput
  }

  export type EinsatzScalarRelationFilter = {
    is?: einsatzWhereInput
    isNot?: einsatzWhereInput
  }

  export type FahrzeugScalarRelationFilter = {
    is?: fahrzeugWhereInput
    isNot?: fahrzeugWhereInput
  }

  export type einteilungCountOrderByAggregateInput = {
    ID?: SortOrder
    Einsatz_ID?: SortOrder
    Dienstabend_ID?: SortOrder
    Fahrzeug_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Einheit_ID?: SortOrder
  }

  export type einteilungAvgOrderByAggregateInput = {
    ID?: SortOrder
    Einsatz_ID?: SortOrder
    Dienstabend_ID?: SortOrder
    Fahrzeug_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Einheit_ID?: SortOrder
  }

  export type einteilungMaxOrderByAggregateInput = {
    ID?: SortOrder
    Einsatz_ID?: SortOrder
    Dienstabend_ID?: SortOrder
    Fahrzeug_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Einheit_ID?: SortOrder
  }

  export type einteilungMinOrderByAggregateInput = {
    ID?: SortOrder
    Einsatz_ID?: SortOrder
    Dienstabend_ID?: SortOrder
    Fahrzeug_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Einheit_ID?: SortOrder
  }

  export type einteilungSumOrderByAggregateInput = {
    ID?: SortOrder
    Einsatz_ID?: SortOrder
    Dienstabend_ID?: SortOrder
    Fahrzeug_ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Einheit_ID?: SortOrder
  }

  export type Enumfahrzeug_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.fahrzeug_status | Enumfahrzeug_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.fahrzeug_status[] | ListEnumfahrzeug_statusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.fahrzeug_status[] | ListEnumfahrzeug_statusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumfahrzeug_statusNullableFilter<$PrismaModel> | $Enums.fahrzeug_status | null
  }

  export type fahrzeugCountOrderByAggregateInput = {
    ID?: SortOrder
    Kennzeichen?: SortOrder
    Fahrzeugtyp?: SortOrder
    Besatzungsstaerke?: SortOrder
    Status?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type fahrzeugAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type fahrzeugMaxOrderByAggregateInput = {
    ID?: SortOrder
    Kennzeichen?: SortOrder
    Fahrzeugtyp?: SortOrder
    Besatzungsstaerke?: SortOrder
    Status?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type fahrzeugMinOrderByAggregateInput = {
    ID?: SortOrder
    Kennzeichen?: SortOrder
    Fahrzeugtyp?: SortOrder
    Besatzungsstaerke?: SortOrder
    Status?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type fahrzeugSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type Enumfahrzeug_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.fahrzeug_status | Enumfahrzeug_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.fahrzeug_status[] | ListEnumfahrzeug_statusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.fahrzeug_status[] | ListEnumfahrzeug_statusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumfahrzeug_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.fahrzeug_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumfahrzeug_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumfahrzeug_statusNullableFilter<$PrismaModel>
  }

  export type Enumff_mitglied_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ff_mitglied_status | Enumff_mitglied_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ff_mitglied_status[] | ListEnumff_mitglied_statusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ff_mitglied_status[] | ListEnumff_mitglied_statusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumff_mitglied_statusNullableFilter<$PrismaModel> | $Enums.ff_mitglied_status | null
  }

  export type AllergieListRelationFilter = {
    every?: allergieWhereInput
    some?: allergieWhereInput
    none?: allergieWhereInput
  }

  export type Ff_mitglied_lehrgangListRelationFilter = {
    every?: ff_mitglied_lehrgangWhereInput
    some?: ff_mitglied_lehrgangWhereInput
    none?: ff_mitglied_lehrgangWhereInput
  }

  export type Mitglied_funktionenListRelationFilter = {
    every?: mitglied_funktionenWhereInput
    some?: mitglied_funktionenWhereInput
    none?: mitglied_funktionenWhereInput
  }

  export type allergieOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ff_mitglied_lehrgangOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type mitglied_funktionenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ff_mitgliedCountOrderByAggregateInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
    Eintrittsdatum?: SortOrder
    Austrittsdatum?: SortOrder
    Aufnahmedatum?: SortOrder
    Status?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type ff_mitgliedAvgOrderByAggregateInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
  }

  export type ff_mitgliedMaxOrderByAggregateInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
    Eintrittsdatum?: SortOrder
    Austrittsdatum?: SortOrder
    Aufnahmedatum?: SortOrder
    Status?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type ff_mitgliedMinOrderByAggregateInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
    Eintrittsdatum?: SortOrder
    Austrittsdatum?: SortOrder
    Aufnahmedatum?: SortOrder
    Status?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type ff_mitgliedSumOrderByAggregateInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
  }

  export type Enumff_mitglied_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ff_mitglied_status | Enumff_mitglied_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ff_mitglied_status[] | ListEnumff_mitglied_statusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ff_mitglied_status[] | ListEnumff_mitglied_statusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumff_mitglied_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.ff_mitglied_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumff_mitglied_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumff_mitglied_statusNullableFilter<$PrismaModel>
  }

  export type LehrgangScalarRelationFilter = {
    is?: lehrgangWhereInput
    isNot?: lehrgangWhereInput
  }

  export type ff_mitglied_lehrgangCountOrderByAggregateInput = {
    ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Lehrgang_ID?: SortOrder
    Datum_bestanden?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type ff_mitglied_lehrgangAvgOrderByAggregateInput = {
    ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Lehrgang_ID?: SortOrder
  }

  export type ff_mitglied_lehrgangMaxOrderByAggregateInput = {
    ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Lehrgang_ID?: SortOrder
    Datum_bestanden?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type ff_mitglied_lehrgangMinOrderByAggregateInput = {
    ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Lehrgang_ID?: SortOrder
    Datum_bestanden?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type ff_mitglied_lehrgangSumOrderByAggregateInput = {
    ID?: SortOrder
    FF_Mitglied_ID?: SortOrder
    Lehrgang_ID?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type funktion_ffCountOrderByAggregateInput = {
    ID?: SortOrder
    Name?: SortOrder
    Ist_Admin?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type funktion_ffAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type funktion_ffMaxOrderByAggregateInput = {
    ID?: SortOrder
    Name?: SortOrder
    Ist_Admin?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type funktion_ffMinOrderByAggregateInput = {
    ID?: SortOrder
    Name?: SortOrder
    Ist_Admin?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type funktion_ffSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type funktion_jfCountOrderByAggregateInput = {
    ID?: SortOrder
    Name?: SortOrder
    Ist_Admin?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type funktion_jfAvgOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type funktion_jfMaxOrderByAggregateInput = {
    ID?: SortOrder
    Name?: SortOrder
    Ist_Admin?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type funktion_jfMinOrderByAggregateInput = {
    ID?: SortOrder
    Name?: SortOrder
    Ist_Admin?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type funktion_jfSumOrderByAggregateInput = {
    ID?: SortOrder
  }

  export type jf_erziehungsberechtigterCountOrderByAggregateInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    Person_ID?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type jf_erziehungsberechtigterAvgOrderByAggregateInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    Person_ID?: SortOrder
  }

  export type jf_erziehungsberechtigterMaxOrderByAggregateInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    Person_ID?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type jf_erziehungsberechtigterMinOrderByAggregateInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    Person_ID?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type jf_erziehungsberechtigterSumOrderByAggregateInput = {
    ID?: SortOrder
    JF_Mitglied_ID?: SortOrder
    Person_ID?: SortOrder
  }

  export type Enumjf_mitglied_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.jf_mitglied_status | Enumjf_mitglied_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.jf_mitglied_status[] | ListEnumjf_mitglied_statusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.jf_mitglied_status[] | ListEnumjf_mitglied_statusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumjf_mitglied_statusNullableFilter<$PrismaModel> | $Enums.jf_mitglied_status | null
  }

  export type Jf_erziehungsberechtigterListRelationFilter = {
    every?: jf_erziehungsberechtigterWhereInput
    some?: jf_erziehungsberechtigterWhereInput
    none?: jf_erziehungsberechtigterWhereInput
  }

  export type jf_erziehungsberechtigterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type jf_mitgliedCountOrderByAggregateInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
    Eintrittsdatum?: SortOrder
    Austrittsdatum?: SortOrder
    Aufnahmedatum?: SortOrder
    Status?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type jf_mitgliedAvgOrderByAggregateInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
  }

  export type jf_mitgliedMaxOrderByAggregateInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
    Eintrittsdatum?: SortOrder
    Austrittsdatum?: SortOrder
    Aufnahmedatum?: SortOrder
    Status?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type jf_mitgliedMinOrderByAggregateInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
    Eintrittsdatum?: SortOrder
    Austrittsdatum?: SortOrder
    Aufnahmedatum?: SortOrder
    Status?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type jf_mitgliedSumOrderByAggregateInput = {
    ID?: SortOrder
    Person_ID?: SortOrder
  }

  export type Enumjf_mitglied_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.jf_mitglied_status | Enumjf_mitglied_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.jf_mitglied_status[] | ListEnumjf_mitglied_statusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.jf_mitglied_status[] | ListEnumjf_mitglied_statusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumjf_mitglied_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.jf_mitglied_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumjf_mitglied_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumjf_mitglied_statusNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type lehrgangCountOrderByAggregateInput = {
    ID?: SortOrder
    Abk_rzung?: SortOrder
    Beschreibung?: SortOrder
    Reihenfolge?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type lehrgangAvgOrderByAggregateInput = {
    ID?: SortOrder
    Reihenfolge?: SortOrder
  }

  export type lehrgangMaxOrderByAggregateInput = {
    ID?: SortOrder
    Abk_rzung?: SortOrder
    Beschreibung?: SortOrder
    Reihenfolge?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type lehrgangMinOrderByAggregateInput = {
    ID?: SortOrder
    Abk_rzung?: SortOrder
    Beschreibung?: SortOrder
    Reihenfolge?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type lehrgangSumOrderByAggregateInput = {
    ID?: SortOrder
    Reihenfolge?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type Enummitglied_funktionen_typFilter<$PrismaModel = never> = {
    equals?: $Enums.mitglied_funktionen_typ | Enummitglied_funktionen_typFieldRefInput<$PrismaModel>
    in?: $Enums.mitglied_funktionen_typ[] | ListEnummitglied_funktionen_typFieldRefInput<$PrismaModel>
    notIn?: $Enums.mitglied_funktionen_typ[] | ListEnummitglied_funktionen_typFieldRefInput<$PrismaModel>
    not?: NestedEnummitglied_funktionen_typFilter<$PrismaModel> | $Enums.mitglied_funktionen_typ
  }

  export type mitglied_funktionenCountOrderByAggregateInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Funktion_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type mitglied_funktionenAvgOrderByAggregateInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Funktion_ID?: SortOrder
  }

  export type mitglied_funktionenMaxOrderByAggregateInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Funktion_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type mitglied_funktionenMinOrderByAggregateInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Funktion_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type mitglied_funktionenSumOrderByAggregateInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Funktion_ID?: SortOrder
  }

  export type Enummitglied_funktionen_typWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.mitglied_funktionen_typ | Enummitglied_funktionen_typFieldRefInput<$PrismaModel>
    in?: $Enums.mitglied_funktionen_typ[] | ListEnummitglied_funktionen_typFieldRefInput<$PrismaModel>
    notIn?: $Enums.mitglied_funktionen_typ[] | ListEnummitglied_funktionen_typFieldRefInput<$PrismaModel>
    not?: NestedEnummitglied_funktionen_typWithAggregatesFilter<$PrismaModel> | $Enums.mitglied_funktionen_typ
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnummitglied_funktionen_typFilter<$PrismaModel>
    _max?: NestedEnummitglied_funktionen_typFilter<$PrismaModel>
  }

  export type Enummitglied_login_typFilter<$PrismaModel = never> = {
    equals?: $Enums.mitglied_login_typ | Enummitglied_login_typFieldRefInput<$PrismaModel>
    in?: $Enums.mitglied_login_typ[] | ListEnummitglied_login_typFieldRefInput<$PrismaModel>
    notIn?: $Enums.mitglied_login_typ[] | ListEnummitglied_login_typFieldRefInput<$PrismaModel>
    not?: NestedEnummitglied_login_typFilter<$PrismaModel> | $Enums.mitglied_login_typ
  }

  export type mitglied_loginCountOrderByAggregateInput = {
    ID?: SortOrder
    Benutzer_ID?: SortOrder
    Mitglied_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type mitglied_loginAvgOrderByAggregateInput = {
    ID?: SortOrder
    Benutzer_ID?: SortOrder
    Mitglied_ID?: SortOrder
  }

  export type mitglied_loginMaxOrderByAggregateInput = {
    ID?: SortOrder
    Benutzer_ID?: SortOrder
    Mitglied_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type mitglied_loginMinOrderByAggregateInput = {
    ID?: SortOrder
    Benutzer_ID?: SortOrder
    Mitglied_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type mitglied_loginSumOrderByAggregateInput = {
    ID?: SortOrder
    Benutzer_ID?: SortOrder
    Mitglied_ID?: SortOrder
  }

  export type Enummitglied_login_typWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.mitglied_login_typ | Enummitglied_login_typFieldRefInput<$PrismaModel>
    in?: $Enums.mitglied_login_typ[] | ListEnummitglied_login_typFieldRefInput<$PrismaModel>
    notIn?: $Enums.mitglied_login_typ[] | ListEnummitglied_login_typFieldRefInput<$PrismaModel>
    not?: NestedEnummitglied_login_typWithAggregatesFilter<$PrismaModel> | $Enums.mitglied_login_typ
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnummitglied_login_typFilter<$PrismaModel>
    _max?: NestedEnummitglied_login_typFilter<$PrismaModel>
  }

  export type Enumteilnahme_typFilter<$PrismaModel = never> = {
    equals?: $Enums.teilnahme_typ | Enumteilnahme_typFieldRefInput<$PrismaModel>
    in?: $Enums.teilnahme_typ[] | ListEnumteilnahme_typFieldRefInput<$PrismaModel>
    notIn?: $Enums.teilnahme_typ[] | ListEnumteilnahme_typFieldRefInput<$PrismaModel>
    not?: NestedEnumteilnahme_typFilter<$PrismaModel> | $Enums.teilnahme_typ
  }

  export type teilnahmeCountOrderByAggregateInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Veranstaltung_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type teilnahmeAvgOrderByAggregateInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Veranstaltung_ID?: SortOrder
  }

  export type teilnahmeMaxOrderByAggregateInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Veranstaltung_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type teilnahmeMinOrderByAggregateInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Veranstaltung_ID?: SortOrder
    Typ?: SortOrder
    Erstellt_am?: SortOrder
    Geaendert_am?: SortOrder
  }

  export type teilnahmeSumOrderByAggregateInput = {
    ID?: SortOrder
    Mitglied_ID?: SortOrder
    Veranstaltung_ID?: SortOrder
  }

  export type Enumteilnahme_typWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.teilnahme_typ | Enumteilnahme_typFieldRefInput<$PrismaModel>
    in?: $Enums.teilnahme_typ[] | ListEnumteilnahme_typFieldRefInput<$PrismaModel>
    notIn?: $Enums.teilnahme_typ[] | ListEnumteilnahme_typFieldRefInput<$PrismaModel>
    not?: NestedEnumteilnahme_typWithAggregatesFilter<$PrismaModel> | $Enums.teilnahme_typ
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumteilnahme_typFilter<$PrismaModel>
    _max?: NestedEnumteilnahme_typFilter<$PrismaModel>
  }

  export type ff_mitgliedCreateNestedOneWithoutAllergieInput = {
    create?: XOR<ff_mitgliedCreateWithoutAllergieInput, ff_mitgliedUncheckedCreateWithoutAllergieInput>
    connectOrCreate?: ff_mitgliedCreateOrConnectWithoutAllergieInput
    connect?: ff_mitgliedWhereUniqueInput
  }

  export type jf_mitgliedCreateNestedOneWithoutAllergieInput = {
    create?: XOR<jf_mitgliedCreateWithoutAllergieInput, jf_mitgliedUncheckedCreateWithoutAllergieInput>
    connectOrCreate?: jf_mitgliedCreateOrConnectWithoutAllergieInput
    connect?: jf_mitgliedWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ff_mitgliedUpdateOneRequiredWithoutAllergieNestedInput = {
    create?: XOR<ff_mitgliedCreateWithoutAllergieInput, ff_mitgliedUncheckedCreateWithoutAllergieInput>
    connectOrCreate?: ff_mitgliedCreateOrConnectWithoutAllergieInput
    upsert?: ff_mitgliedUpsertWithoutAllergieInput
    connect?: ff_mitgliedWhereUniqueInput
    update?: XOR<XOR<ff_mitgliedUpdateToOneWithWhereWithoutAllergieInput, ff_mitgliedUpdateWithoutAllergieInput>, ff_mitgliedUncheckedUpdateWithoutAllergieInput>
  }

  export type jf_mitgliedUpdateOneRequiredWithoutAllergieNestedInput = {
    create?: XOR<jf_mitgliedCreateWithoutAllergieInput, jf_mitgliedUncheckedCreateWithoutAllergieInput>
    connectOrCreate?: jf_mitgliedCreateOrConnectWithoutAllergieInput
    upsert?: jf_mitgliedUpsertWithoutAllergieInput
    connect?: jf_mitgliedWhereUniqueInput
    update?: XOR<XOR<jf_mitgliedUpdateToOneWithWhereWithoutAllergieInput, jf_mitgliedUpdateWithoutAllergieInput>, jf_mitgliedUncheckedUpdateWithoutAllergieInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type einteilungCreateNestedManyWithoutDienstabendInput = {
    create?: XOR<einteilungCreateWithoutDienstabendInput, einteilungUncheckedCreateWithoutDienstabendInput> | einteilungCreateWithoutDienstabendInput[] | einteilungUncheckedCreateWithoutDienstabendInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutDienstabendInput | einteilungCreateOrConnectWithoutDienstabendInput[]
    createMany?: einteilungCreateManyDienstabendInputEnvelope
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
  }

  export type einteilungUncheckedCreateNestedManyWithoutDienstabendInput = {
    create?: XOR<einteilungCreateWithoutDienstabendInput, einteilungUncheckedCreateWithoutDienstabendInput> | einteilungCreateWithoutDienstabendInput[] | einteilungUncheckedCreateWithoutDienstabendInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutDienstabendInput | einteilungCreateOrConnectWithoutDienstabendInput[]
    createMany?: einteilungCreateManyDienstabendInputEnvelope
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type einteilungUpdateManyWithoutDienstabendNestedInput = {
    create?: XOR<einteilungCreateWithoutDienstabendInput, einteilungUncheckedCreateWithoutDienstabendInput> | einteilungCreateWithoutDienstabendInput[] | einteilungUncheckedCreateWithoutDienstabendInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutDienstabendInput | einteilungCreateOrConnectWithoutDienstabendInput[]
    upsert?: einteilungUpsertWithWhereUniqueWithoutDienstabendInput | einteilungUpsertWithWhereUniqueWithoutDienstabendInput[]
    createMany?: einteilungCreateManyDienstabendInputEnvelope
    set?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    disconnect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    delete?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    update?: einteilungUpdateWithWhereUniqueWithoutDienstabendInput | einteilungUpdateWithWhereUniqueWithoutDienstabendInput[]
    updateMany?: einteilungUpdateManyWithWhereWithoutDienstabendInput | einteilungUpdateManyWithWhereWithoutDienstabendInput[]
    deleteMany?: einteilungScalarWhereInput | einteilungScalarWhereInput[]
  }

  export type einteilungUncheckedUpdateManyWithoutDienstabendNestedInput = {
    create?: XOR<einteilungCreateWithoutDienstabendInput, einteilungUncheckedCreateWithoutDienstabendInput> | einteilungCreateWithoutDienstabendInput[] | einteilungUncheckedCreateWithoutDienstabendInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutDienstabendInput | einteilungCreateOrConnectWithoutDienstabendInput[]
    upsert?: einteilungUpsertWithWhereUniqueWithoutDienstabendInput | einteilungUpsertWithWhereUniqueWithoutDienstabendInput[]
    createMany?: einteilungCreateManyDienstabendInputEnvelope
    set?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    disconnect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    delete?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    update?: einteilungUpdateWithWhereUniqueWithoutDienstabendInput | einteilungUpdateWithWhereUniqueWithoutDienstabendInput[]
    updateMany?: einteilungUpdateManyWithWhereWithoutDienstabendInput | einteilungUpdateManyWithWhereWithoutDienstabendInput[]
    deleteMany?: einteilungScalarWhereInput | einteilungScalarWhereInput[]
  }

  export type einteilungCreateNestedManyWithoutEinheitInput = {
    create?: XOR<einteilungCreateWithoutEinheitInput, einteilungUncheckedCreateWithoutEinheitInput> | einteilungCreateWithoutEinheitInput[] | einteilungUncheckedCreateWithoutEinheitInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutEinheitInput | einteilungCreateOrConnectWithoutEinheitInput[]
    createMany?: einteilungCreateManyEinheitInputEnvelope
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
  }

  export type einteilungUncheckedCreateNestedManyWithoutEinheitInput = {
    create?: XOR<einteilungCreateWithoutEinheitInput, einteilungUncheckedCreateWithoutEinheitInput> | einteilungCreateWithoutEinheitInput[] | einteilungUncheckedCreateWithoutEinheitInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutEinheitInput | einteilungCreateOrConnectWithoutEinheitInput[]
    createMany?: einteilungCreateManyEinheitInputEnvelope
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
  }

  export type einteilungUpdateManyWithoutEinheitNestedInput = {
    create?: XOR<einteilungCreateWithoutEinheitInput, einteilungUncheckedCreateWithoutEinheitInput> | einteilungCreateWithoutEinheitInput[] | einteilungUncheckedCreateWithoutEinheitInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutEinheitInput | einteilungCreateOrConnectWithoutEinheitInput[]
    upsert?: einteilungUpsertWithWhereUniqueWithoutEinheitInput | einteilungUpsertWithWhereUniqueWithoutEinheitInput[]
    createMany?: einteilungCreateManyEinheitInputEnvelope
    set?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    disconnect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    delete?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    update?: einteilungUpdateWithWhereUniqueWithoutEinheitInput | einteilungUpdateWithWhereUniqueWithoutEinheitInput[]
    updateMany?: einteilungUpdateManyWithWhereWithoutEinheitInput | einteilungUpdateManyWithWhereWithoutEinheitInput[]
    deleteMany?: einteilungScalarWhereInput | einteilungScalarWhereInput[]
  }

  export type einteilungUncheckedUpdateManyWithoutEinheitNestedInput = {
    create?: XOR<einteilungCreateWithoutEinheitInput, einteilungUncheckedCreateWithoutEinheitInput> | einteilungCreateWithoutEinheitInput[] | einteilungUncheckedCreateWithoutEinheitInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutEinheitInput | einteilungCreateOrConnectWithoutEinheitInput[]
    upsert?: einteilungUpsertWithWhereUniqueWithoutEinheitInput | einteilungUpsertWithWhereUniqueWithoutEinheitInput[]
    createMany?: einteilungCreateManyEinheitInputEnvelope
    set?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    disconnect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    delete?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    update?: einteilungUpdateWithWhereUniqueWithoutEinheitInput | einteilungUpdateWithWhereUniqueWithoutEinheitInput[]
    updateMany?: einteilungUpdateManyWithWhereWithoutEinheitInput | einteilungUpdateManyWithWhereWithoutEinheitInput[]
    deleteMany?: einteilungScalarWhereInput | einteilungScalarWhereInput[]
  }

  export type einteilungCreateNestedManyWithoutEinsatzInput = {
    create?: XOR<einteilungCreateWithoutEinsatzInput, einteilungUncheckedCreateWithoutEinsatzInput> | einteilungCreateWithoutEinsatzInput[] | einteilungUncheckedCreateWithoutEinsatzInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutEinsatzInput | einteilungCreateOrConnectWithoutEinsatzInput[]
    createMany?: einteilungCreateManyEinsatzInputEnvelope
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
  }

  export type einteilungUncheckedCreateNestedManyWithoutEinsatzInput = {
    create?: XOR<einteilungCreateWithoutEinsatzInput, einteilungUncheckedCreateWithoutEinsatzInput> | einteilungCreateWithoutEinsatzInput[] | einteilungUncheckedCreateWithoutEinsatzInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutEinsatzInput | einteilungCreateOrConnectWithoutEinsatzInput[]
    createMany?: einteilungCreateManyEinsatzInputEnvelope
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
  }

  export type Enumeinsatz_artFieldUpdateOperationsInput = {
    set?: $Enums.einsatz_art
  }

  export type einteilungUpdateManyWithoutEinsatzNestedInput = {
    create?: XOR<einteilungCreateWithoutEinsatzInput, einteilungUncheckedCreateWithoutEinsatzInput> | einteilungCreateWithoutEinsatzInput[] | einteilungUncheckedCreateWithoutEinsatzInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutEinsatzInput | einteilungCreateOrConnectWithoutEinsatzInput[]
    upsert?: einteilungUpsertWithWhereUniqueWithoutEinsatzInput | einteilungUpsertWithWhereUniqueWithoutEinsatzInput[]
    createMany?: einteilungCreateManyEinsatzInputEnvelope
    set?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    disconnect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    delete?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    update?: einteilungUpdateWithWhereUniqueWithoutEinsatzInput | einteilungUpdateWithWhereUniqueWithoutEinsatzInput[]
    updateMany?: einteilungUpdateManyWithWhereWithoutEinsatzInput | einteilungUpdateManyWithWhereWithoutEinsatzInput[]
    deleteMany?: einteilungScalarWhereInput | einteilungScalarWhereInput[]
  }

  export type einteilungUncheckedUpdateManyWithoutEinsatzNestedInput = {
    create?: XOR<einteilungCreateWithoutEinsatzInput, einteilungUncheckedCreateWithoutEinsatzInput> | einteilungCreateWithoutEinsatzInput[] | einteilungUncheckedCreateWithoutEinsatzInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutEinsatzInput | einteilungCreateOrConnectWithoutEinsatzInput[]
    upsert?: einteilungUpsertWithWhereUniqueWithoutEinsatzInput | einteilungUpsertWithWhereUniqueWithoutEinsatzInput[]
    createMany?: einteilungCreateManyEinsatzInputEnvelope
    set?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    disconnect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    delete?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    update?: einteilungUpdateWithWhereUniqueWithoutEinsatzInput | einteilungUpdateWithWhereUniqueWithoutEinsatzInput[]
    updateMany?: einteilungUpdateManyWithWhereWithoutEinsatzInput | einteilungUpdateManyWithWhereWithoutEinsatzInput[]
    deleteMany?: einteilungScalarWhereInput | einteilungScalarWhereInput[]
  }

  export type dienstabendCreateNestedOneWithoutEinteilungInput = {
    create?: XOR<dienstabendCreateWithoutEinteilungInput, dienstabendUncheckedCreateWithoutEinteilungInput>
    connectOrCreate?: dienstabendCreateOrConnectWithoutEinteilungInput
    connect?: dienstabendWhereUniqueInput
  }

  export type einheitCreateNestedOneWithoutEinteilungInput = {
    create?: XOR<einheitCreateWithoutEinteilungInput, einheitUncheckedCreateWithoutEinteilungInput>
    connectOrCreate?: einheitCreateOrConnectWithoutEinteilungInput
    connect?: einheitWhereUniqueInput
  }

  export type einsatzCreateNestedOneWithoutEinteilungInput = {
    create?: XOR<einsatzCreateWithoutEinteilungInput, einsatzUncheckedCreateWithoutEinteilungInput>
    connectOrCreate?: einsatzCreateOrConnectWithoutEinteilungInput
    connect?: einsatzWhereUniqueInput
  }

  export type fahrzeugCreateNestedOneWithoutEinteilungInput = {
    create?: XOR<fahrzeugCreateWithoutEinteilungInput, fahrzeugUncheckedCreateWithoutEinteilungInput>
    connectOrCreate?: fahrzeugCreateOrConnectWithoutEinteilungInput
    connect?: fahrzeugWhereUniqueInput
  }

  export type ff_mitgliedCreateNestedOneWithoutEinteilungInput = {
    create?: XOR<ff_mitgliedCreateWithoutEinteilungInput, ff_mitgliedUncheckedCreateWithoutEinteilungInput>
    connectOrCreate?: ff_mitgliedCreateOrConnectWithoutEinteilungInput
    connect?: ff_mitgliedWhereUniqueInput
  }

  export type dienstabendUpdateOneRequiredWithoutEinteilungNestedInput = {
    create?: XOR<dienstabendCreateWithoutEinteilungInput, dienstabendUncheckedCreateWithoutEinteilungInput>
    connectOrCreate?: dienstabendCreateOrConnectWithoutEinteilungInput
    upsert?: dienstabendUpsertWithoutEinteilungInput
    connect?: dienstabendWhereUniqueInput
    update?: XOR<XOR<dienstabendUpdateToOneWithWhereWithoutEinteilungInput, dienstabendUpdateWithoutEinteilungInput>, dienstabendUncheckedUpdateWithoutEinteilungInput>
  }

  export type einheitUpdateOneRequiredWithoutEinteilungNestedInput = {
    create?: XOR<einheitCreateWithoutEinteilungInput, einheitUncheckedCreateWithoutEinteilungInput>
    connectOrCreate?: einheitCreateOrConnectWithoutEinteilungInput
    upsert?: einheitUpsertWithoutEinteilungInput
    connect?: einheitWhereUniqueInput
    update?: XOR<XOR<einheitUpdateToOneWithWhereWithoutEinteilungInput, einheitUpdateWithoutEinteilungInput>, einheitUncheckedUpdateWithoutEinteilungInput>
  }

  export type einsatzUpdateOneRequiredWithoutEinteilungNestedInput = {
    create?: XOR<einsatzCreateWithoutEinteilungInput, einsatzUncheckedCreateWithoutEinteilungInput>
    connectOrCreate?: einsatzCreateOrConnectWithoutEinteilungInput
    upsert?: einsatzUpsertWithoutEinteilungInput
    connect?: einsatzWhereUniqueInput
    update?: XOR<XOR<einsatzUpdateToOneWithWhereWithoutEinteilungInput, einsatzUpdateWithoutEinteilungInput>, einsatzUncheckedUpdateWithoutEinteilungInput>
  }

  export type fahrzeugUpdateOneRequiredWithoutEinteilungNestedInput = {
    create?: XOR<fahrzeugCreateWithoutEinteilungInput, fahrzeugUncheckedCreateWithoutEinteilungInput>
    connectOrCreate?: fahrzeugCreateOrConnectWithoutEinteilungInput
    upsert?: fahrzeugUpsertWithoutEinteilungInput
    connect?: fahrzeugWhereUniqueInput
    update?: XOR<XOR<fahrzeugUpdateToOneWithWhereWithoutEinteilungInput, fahrzeugUpdateWithoutEinteilungInput>, fahrzeugUncheckedUpdateWithoutEinteilungInput>
  }

  export type ff_mitgliedUpdateOneRequiredWithoutEinteilungNestedInput = {
    create?: XOR<ff_mitgliedCreateWithoutEinteilungInput, ff_mitgliedUncheckedCreateWithoutEinteilungInput>
    connectOrCreate?: ff_mitgliedCreateOrConnectWithoutEinteilungInput
    upsert?: ff_mitgliedUpsertWithoutEinteilungInput
    connect?: ff_mitgliedWhereUniqueInput
    update?: XOR<XOR<ff_mitgliedUpdateToOneWithWhereWithoutEinteilungInput, ff_mitgliedUpdateWithoutEinteilungInput>, ff_mitgliedUncheckedUpdateWithoutEinteilungInput>
  }

  export type einteilungCreateNestedManyWithoutFahrzeugInput = {
    create?: XOR<einteilungCreateWithoutFahrzeugInput, einteilungUncheckedCreateWithoutFahrzeugInput> | einteilungCreateWithoutFahrzeugInput[] | einteilungUncheckedCreateWithoutFahrzeugInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutFahrzeugInput | einteilungCreateOrConnectWithoutFahrzeugInput[]
    createMany?: einteilungCreateManyFahrzeugInputEnvelope
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
  }

  export type einteilungUncheckedCreateNestedManyWithoutFahrzeugInput = {
    create?: XOR<einteilungCreateWithoutFahrzeugInput, einteilungUncheckedCreateWithoutFahrzeugInput> | einteilungCreateWithoutFahrzeugInput[] | einteilungUncheckedCreateWithoutFahrzeugInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutFahrzeugInput | einteilungCreateOrConnectWithoutFahrzeugInput[]
    createMany?: einteilungCreateManyFahrzeugInputEnvelope
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
  }

  export type NullableEnumfahrzeug_statusFieldUpdateOperationsInput = {
    set?: $Enums.fahrzeug_status | null
  }

  export type einteilungUpdateManyWithoutFahrzeugNestedInput = {
    create?: XOR<einteilungCreateWithoutFahrzeugInput, einteilungUncheckedCreateWithoutFahrzeugInput> | einteilungCreateWithoutFahrzeugInput[] | einteilungUncheckedCreateWithoutFahrzeugInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutFahrzeugInput | einteilungCreateOrConnectWithoutFahrzeugInput[]
    upsert?: einteilungUpsertWithWhereUniqueWithoutFahrzeugInput | einteilungUpsertWithWhereUniqueWithoutFahrzeugInput[]
    createMany?: einteilungCreateManyFahrzeugInputEnvelope
    set?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    disconnect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    delete?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    update?: einteilungUpdateWithWhereUniqueWithoutFahrzeugInput | einteilungUpdateWithWhereUniqueWithoutFahrzeugInput[]
    updateMany?: einteilungUpdateManyWithWhereWithoutFahrzeugInput | einteilungUpdateManyWithWhereWithoutFahrzeugInput[]
    deleteMany?: einteilungScalarWhereInput | einteilungScalarWhereInput[]
  }

  export type einteilungUncheckedUpdateManyWithoutFahrzeugNestedInput = {
    create?: XOR<einteilungCreateWithoutFahrzeugInput, einteilungUncheckedCreateWithoutFahrzeugInput> | einteilungCreateWithoutFahrzeugInput[] | einteilungUncheckedCreateWithoutFahrzeugInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutFahrzeugInput | einteilungCreateOrConnectWithoutFahrzeugInput[]
    upsert?: einteilungUpsertWithWhereUniqueWithoutFahrzeugInput | einteilungUpsertWithWhereUniqueWithoutFahrzeugInput[]
    createMany?: einteilungCreateManyFahrzeugInputEnvelope
    set?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    disconnect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    delete?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    update?: einteilungUpdateWithWhereUniqueWithoutFahrzeugInput | einteilungUpdateWithWhereUniqueWithoutFahrzeugInput[]
    updateMany?: einteilungUpdateManyWithWhereWithoutFahrzeugInput | einteilungUpdateManyWithWhereWithoutFahrzeugInput[]
    deleteMany?: einteilungScalarWhereInput | einteilungScalarWhereInput[]
  }

  export type allergieCreateNestedManyWithoutFf_mitgliedInput = {
    create?: XOR<allergieCreateWithoutFf_mitgliedInput, allergieUncheckedCreateWithoutFf_mitgliedInput> | allergieCreateWithoutFf_mitgliedInput[] | allergieUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: allergieCreateOrConnectWithoutFf_mitgliedInput | allergieCreateOrConnectWithoutFf_mitgliedInput[]
    createMany?: allergieCreateManyFf_mitgliedInputEnvelope
    connect?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
  }

  export type einteilungCreateNestedManyWithoutFf_mitgliedInput = {
    create?: XOR<einteilungCreateWithoutFf_mitgliedInput, einteilungUncheckedCreateWithoutFf_mitgliedInput> | einteilungCreateWithoutFf_mitgliedInput[] | einteilungUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutFf_mitgliedInput | einteilungCreateOrConnectWithoutFf_mitgliedInput[]
    createMany?: einteilungCreateManyFf_mitgliedInputEnvelope
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
  }

  export type ff_mitglied_lehrgangCreateNestedManyWithoutFf_mitgliedInput = {
    create?: XOR<ff_mitglied_lehrgangCreateWithoutFf_mitgliedInput, ff_mitglied_lehrgangUncheckedCreateWithoutFf_mitgliedInput> | ff_mitglied_lehrgangCreateWithoutFf_mitgliedInput[] | ff_mitglied_lehrgangUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: ff_mitglied_lehrgangCreateOrConnectWithoutFf_mitgliedInput | ff_mitglied_lehrgangCreateOrConnectWithoutFf_mitgliedInput[]
    createMany?: ff_mitglied_lehrgangCreateManyFf_mitgliedInputEnvelope
    connect?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
  }

  export type mitglied_funktionenCreateNestedManyWithoutFf_mitgliedInput = {
    create?: XOR<mitglied_funktionenCreateWithoutFf_mitgliedInput, mitglied_funktionenUncheckedCreateWithoutFf_mitgliedInput> | mitglied_funktionenCreateWithoutFf_mitgliedInput[] | mitglied_funktionenUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: mitglied_funktionenCreateOrConnectWithoutFf_mitgliedInput | mitglied_funktionenCreateOrConnectWithoutFf_mitgliedInput[]
    createMany?: mitglied_funktionenCreateManyFf_mitgliedInputEnvelope
    connect?: mitglied_funktionenWhereUniqueInput | mitglied_funktionenWhereUniqueInput[]
  }

  export type allergieUncheckedCreateNestedManyWithoutFf_mitgliedInput = {
    create?: XOR<allergieCreateWithoutFf_mitgliedInput, allergieUncheckedCreateWithoutFf_mitgliedInput> | allergieCreateWithoutFf_mitgliedInput[] | allergieUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: allergieCreateOrConnectWithoutFf_mitgliedInput | allergieCreateOrConnectWithoutFf_mitgliedInput[]
    createMany?: allergieCreateManyFf_mitgliedInputEnvelope
    connect?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
  }

  export type einteilungUncheckedCreateNestedManyWithoutFf_mitgliedInput = {
    create?: XOR<einteilungCreateWithoutFf_mitgliedInput, einteilungUncheckedCreateWithoutFf_mitgliedInput> | einteilungCreateWithoutFf_mitgliedInput[] | einteilungUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutFf_mitgliedInput | einteilungCreateOrConnectWithoutFf_mitgliedInput[]
    createMany?: einteilungCreateManyFf_mitgliedInputEnvelope
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
  }

  export type ff_mitglied_lehrgangUncheckedCreateNestedManyWithoutFf_mitgliedInput = {
    create?: XOR<ff_mitglied_lehrgangCreateWithoutFf_mitgliedInput, ff_mitglied_lehrgangUncheckedCreateWithoutFf_mitgliedInput> | ff_mitglied_lehrgangCreateWithoutFf_mitgliedInput[] | ff_mitglied_lehrgangUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: ff_mitglied_lehrgangCreateOrConnectWithoutFf_mitgliedInput | ff_mitglied_lehrgangCreateOrConnectWithoutFf_mitgliedInput[]
    createMany?: ff_mitglied_lehrgangCreateManyFf_mitgliedInputEnvelope
    connect?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
  }

  export type mitglied_funktionenUncheckedCreateNestedManyWithoutFf_mitgliedInput = {
    create?: XOR<mitglied_funktionenCreateWithoutFf_mitgliedInput, mitglied_funktionenUncheckedCreateWithoutFf_mitgliedInput> | mitglied_funktionenCreateWithoutFf_mitgliedInput[] | mitglied_funktionenUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: mitglied_funktionenCreateOrConnectWithoutFf_mitgliedInput | mitglied_funktionenCreateOrConnectWithoutFf_mitgliedInput[]
    createMany?: mitglied_funktionenCreateManyFf_mitgliedInputEnvelope
    connect?: mitglied_funktionenWhereUniqueInput | mitglied_funktionenWhereUniqueInput[]
  }

  export type NullableEnumff_mitglied_statusFieldUpdateOperationsInput = {
    set?: $Enums.ff_mitglied_status | null
  }

  export type allergieUpdateManyWithoutFf_mitgliedNestedInput = {
    create?: XOR<allergieCreateWithoutFf_mitgliedInput, allergieUncheckedCreateWithoutFf_mitgliedInput> | allergieCreateWithoutFf_mitgliedInput[] | allergieUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: allergieCreateOrConnectWithoutFf_mitgliedInput | allergieCreateOrConnectWithoutFf_mitgliedInput[]
    upsert?: allergieUpsertWithWhereUniqueWithoutFf_mitgliedInput | allergieUpsertWithWhereUniqueWithoutFf_mitgliedInput[]
    createMany?: allergieCreateManyFf_mitgliedInputEnvelope
    set?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    disconnect?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    delete?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    connect?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    update?: allergieUpdateWithWhereUniqueWithoutFf_mitgliedInput | allergieUpdateWithWhereUniqueWithoutFf_mitgliedInput[]
    updateMany?: allergieUpdateManyWithWhereWithoutFf_mitgliedInput | allergieUpdateManyWithWhereWithoutFf_mitgliedInput[]
    deleteMany?: allergieScalarWhereInput | allergieScalarWhereInput[]
  }

  export type einteilungUpdateManyWithoutFf_mitgliedNestedInput = {
    create?: XOR<einteilungCreateWithoutFf_mitgliedInput, einteilungUncheckedCreateWithoutFf_mitgliedInput> | einteilungCreateWithoutFf_mitgliedInput[] | einteilungUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutFf_mitgliedInput | einteilungCreateOrConnectWithoutFf_mitgliedInput[]
    upsert?: einteilungUpsertWithWhereUniqueWithoutFf_mitgliedInput | einteilungUpsertWithWhereUniqueWithoutFf_mitgliedInput[]
    createMany?: einteilungCreateManyFf_mitgliedInputEnvelope
    set?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    disconnect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    delete?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    update?: einteilungUpdateWithWhereUniqueWithoutFf_mitgliedInput | einteilungUpdateWithWhereUniqueWithoutFf_mitgliedInput[]
    updateMany?: einteilungUpdateManyWithWhereWithoutFf_mitgliedInput | einteilungUpdateManyWithWhereWithoutFf_mitgliedInput[]
    deleteMany?: einteilungScalarWhereInput | einteilungScalarWhereInput[]
  }

  export type ff_mitglied_lehrgangUpdateManyWithoutFf_mitgliedNestedInput = {
    create?: XOR<ff_mitglied_lehrgangCreateWithoutFf_mitgliedInput, ff_mitglied_lehrgangUncheckedCreateWithoutFf_mitgliedInput> | ff_mitglied_lehrgangCreateWithoutFf_mitgliedInput[] | ff_mitglied_lehrgangUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: ff_mitglied_lehrgangCreateOrConnectWithoutFf_mitgliedInput | ff_mitglied_lehrgangCreateOrConnectWithoutFf_mitgliedInput[]
    upsert?: ff_mitglied_lehrgangUpsertWithWhereUniqueWithoutFf_mitgliedInput | ff_mitglied_lehrgangUpsertWithWhereUniqueWithoutFf_mitgliedInput[]
    createMany?: ff_mitglied_lehrgangCreateManyFf_mitgliedInputEnvelope
    set?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    disconnect?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    delete?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    connect?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    update?: ff_mitglied_lehrgangUpdateWithWhereUniqueWithoutFf_mitgliedInput | ff_mitglied_lehrgangUpdateWithWhereUniqueWithoutFf_mitgliedInput[]
    updateMany?: ff_mitglied_lehrgangUpdateManyWithWhereWithoutFf_mitgliedInput | ff_mitglied_lehrgangUpdateManyWithWhereWithoutFf_mitgliedInput[]
    deleteMany?: ff_mitglied_lehrgangScalarWhereInput | ff_mitglied_lehrgangScalarWhereInput[]
  }

  export type mitglied_funktionenUpdateManyWithoutFf_mitgliedNestedInput = {
    create?: XOR<mitglied_funktionenCreateWithoutFf_mitgliedInput, mitglied_funktionenUncheckedCreateWithoutFf_mitgliedInput> | mitglied_funktionenCreateWithoutFf_mitgliedInput[] | mitglied_funktionenUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: mitglied_funktionenCreateOrConnectWithoutFf_mitgliedInput | mitglied_funktionenCreateOrConnectWithoutFf_mitgliedInput[]
    upsert?: mitglied_funktionenUpsertWithWhereUniqueWithoutFf_mitgliedInput | mitglied_funktionenUpsertWithWhereUniqueWithoutFf_mitgliedInput[]
    createMany?: mitglied_funktionenCreateManyFf_mitgliedInputEnvelope
    set?: mitglied_funktionenWhereUniqueInput | mitglied_funktionenWhereUniqueInput[]
    disconnect?: mitglied_funktionenWhereUniqueInput | mitglied_funktionenWhereUniqueInput[]
    delete?: mitglied_funktionenWhereUniqueInput | mitglied_funktionenWhereUniqueInput[]
    connect?: mitglied_funktionenWhereUniqueInput | mitglied_funktionenWhereUniqueInput[]
    update?: mitglied_funktionenUpdateWithWhereUniqueWithoutFf_mitgliedInput | mitglied_funktionenUpdateWithWhereUniqueWithoutFf_mitgliedInput[]
    updateMany?: mitglied_funktionenUpdateManyWithWhereWithoutFf_mitgliedInput | mitglied_funktionenUpdateManyWithWhereWithoutFf_mitgliedInput[]
    deleteMany?: mitglied_funktionenScalarWhereInput | mitglied_funktionenScalarWhereInput[]
  }

  export type allergieUncheckedUpdateManyWithoutFf_mitgliedNestedInput = {
    create?: XOR<allergieCreateWithoutFf_mitgliedInput, allergieUncheckedCreateWithoutFf_mitgliedInput> | allergieCreateWithoutFf_mitgliedInput[] | allergieUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: allergieCreateOrConnectWithoutFf_mitgliedInput | allergieCreateOrConnectWithoutFf_mitgliedInput[]
    upsert?: allergieUpsertWithWhereUniqueWithoutFf_mitgliedInput | allergieUpsertWithWhereUniqueWithoutFf_mitgliedInput[]
    createMany?: allergieCreateManyFf_mitgliedInputEnvelope
    set?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    disconnect?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    delete?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    connect?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    update?: allergieUpdateWithWhereUniqueWithoutFf_mitgliedInput | allergieUpdateWithWhereUniqueWithoutFf_mitgliedInput[]
    updateMany?: allergieUpdateManyWithWhereWithoutFf_mitgliedInput | allergieUpdateManyWithWhereWithoutFf_mitgliedInput[]
    deleteMany?: allergieScalarWhereInput | allergieScalarWhereInput[]
  }

  export type einteilungUncheckedUpdateManyWithoutFf_mitgliedNestedInput = {
    create?: XOR<einteilungCreateWithoutFf_mitgliedInput, einteilungUncheckedCreateWithoutFf_mitgliedInput> | einteilungCreateWithoutFf_mitgliedInput[] | einteilungUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: einteilungCreateOrConnectWithoutFf_mitgliedInput | einteilungCreateOrConnectWithoutFf_mitgliedInput[]
    upsert?: einteilungUpsertWithWhereUniqueWithoutFf_mitgliedInput | einteilungUpsertWithWhereUniqueWithoutFf_mitgliedInput[]
    createMany?: einteilungCreateManyFf_mitgliedInputEnvelope
    set?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    disconnect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    delete?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    connect?: einteilungWhereUniqueInput | einteilungWhereUniqueInput[]
    update?: einteilungUpdateWithWhereUniqueWithoutFf_mitgliedInput | einteilungUpdateWithWhereUniqueWithoutFf_mitgliedInput[]
    updateMany?: einteilungUpdateManyWithWhereWithoutFf_mitgliedInput | einteilungUpdateManyWithWhereWithoutFf_mitgliedInput[]
    deleteMany?: einteilungScalarWhereInput | einteilungScalarWhereInput[]
  }

  export type ff_mitglied_lehrgangUncheckedUpdateManyWithoutFf_mitgliedNestedInput = {
    create?: XOR<ff_mitglied_lehrgangCreateWithoutFf_mitgliedInput, ff_mitglied_lehrgangUncheckedCreateWithoutFf_mitgliedInput> | ff_mitglied_lehrgangCreateWithoutFf_mitgliedInput[] | ff_mitglied_lehrgangUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: ff_mitglied_lehrgangCreateOrConnectWithoutFf_mitgliedInput | ff_mitglied_lehrgangCreateOrConnectWithoutFf_mitgliedInput[]
    upsert?: ff_mitglied_lehrgangUpsertWithWhereUniqueWithoutFf_mitgliedInput | ff_mitglied_lehrgangUpsertWithWhereUniqueWithoutFf_mitgliedInput[]
    createMany?: ff_mitglied_lehrgangCreateManyFf_mitgliedInputEnvelope
    set?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    disconnect?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    delete?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    connect?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    update?: ff_mitglied_lehrgangUpdateWithWhereUniqueWithoutFf_mitgliedInput | ff_mitglied_lehrgangUpdateWithWhereUniqueWithoutFf_mitgliedInput[]
    updateMany?: ff_mitglied_lehrgangUpdateManyWithWhereWithoutFf_mitgliedInput | ff_mitglied_lehrgangUpdateManyWithWhereWithoutFf_mitgliedInput[]
    deleteMany?: ff_mitglied_lehrgangScalarWhereInput | ff_mitglied_lehrgangScalarWhereInput[]
  }

  export type mitglied_funktionenUncheckedUpdateManyWithoutFf_mitgliedNestedInput = {
    create?: XOR<mitglied_funktionenCreateWithoutFf_mitgliedInput, mitglied_funktionenUncheckedCreateWithoutFf_mitgliedInput> | mitglied_funktionenCreateWithoutFf_mitgliedInput[] | mitglied_funktionenUncheckedCreateWithoutFf_mitgliedInput[]
    connectOrCreate?: mitglied_funktionenCreateOrConnectWithoutFf_mitgliedInput | mitglied_funktionenCreateOrConnectWithoutFf_mitgliedInput[]
    upsert?: mitglied_funktionenUpsertWithWhereUniqueWithoutFf_mitgliedInput | mitglied_funktionenUpsertWithWhereUniqueWithoutFf_mitgliedInput[]
    createMany?: mitglied_funktionenCreateManyFf_mitgliedInputEnvelope
    set?: mitglied_funktionenWhereUniqueInput | mitglied_funktionenWhereUniqueInput[]
    disconnect?: mitglied_funktionenWhereUniqueInput | mitglied_funktionenWhereUniqueInput[]
    delete?: mitglied_funktionenWhereUniqueInput | mitglied_funktionenWhereUniqueInput[]
    connect?: mitglied_funktionenWhereUniqueInput | mitglied_funktionenWhereUniqueInput[]
    update?: mitglied_funktionenUpdateWithWhereUniqueWithoutFf_mitgliedInput | mitglied_funktionenUpdateWithWhereUniqueWithoutFf_mitgliedInput[]
    updateMany?: mitglied_funktionenUpdateManyWithWhereWithoutFf_mitgliedInput | mitglied_funktionenUpdateManyWithWhereWithoutFf_mitgliedInput[]
    deleteMany?: mitglied_funktionenScalarWhereInput | mitglied_funktionenScalarWhereInput[]
  }

  export type ff_mitgliedCreateNestedOneWithoutFf_mitglied_lehrgangInput = {
    create?: XOR<ff_mitgliedCreateWithoutFf_mitglied_lehrgangInput, ff_mitgliedUncheckedCreateWithoutFf_mitglied_lehrgangInput>
    connectOrCreate?: ff_mitgliedCreateOrConnectWithoutFf_mitglied_lehrgangInput
    connect?: ff_mitgliedWhereUniqueInput
  }

  export type lehrgangCreateNestedOneWithoutFf_mitglied_lehrgangInput = {
    create?: XOR<lehrgangCreateWithoutFf_mitglied_lehrgangInput, lehrgangUncheckedCreateWithoutFf_mitglied_lehrgangInput>
    connectOrCreate?: lehrgangCreateOrConnectWithoutFf_mitglied_lehrgangInput
    connect?: lehrgangWhereUniqueInput
  }

  export type ff_mitgliedUpdateOneRequiredWithoutFf_mitglied_lehrgangNestedInput = {
    create?: XOR<ff_mitgliedCreateWithoutFf_mitglied_lehrgangInput, ff_mitgliedUncheckedCreateWithoutFf_mitglied_lehrgangInput>
    connectOrCreate?: ff_mitgliedCreateOrConnectWithoutFf_mitglied_lehrgangInput
    upsert?: ff_mitgliedUpsertWithoutFf_mitglied_lehrgangInput
    connect?: ff_mitgliedWhereUniqueInput
    update?: XOR<XOR<ff_mitgliedUpdateToOneWithWhereWithoutFf_mitglied_lehrgangInput, ff_mitgliedUpdateWithoutFf_mitglied_lehrgangInput>, ff_mitgliedUncheckedUpdateWithoutFf_mitglied_lehrgangInput>
  }

  export type lehrgangUpdateOneRequiredWithoutFf_mitglied_lehrgangNestedInput = {
    create?: XOR<lehrgangCreateWithoutFf_mitglied_lehrgangInput, lehrgangUncheckedCreateWithoutFf_mitglied_lehrgangInput>
    connectOrCreate?: lehrgangCreateOrConnectWithoutFf_mitglied_lehrgangInput
    upsert?: lehrgangUpsertWithoutFf_mitglied_lehrgangInput
    connect?: lehrgangWhereUniqueInput
    update?: XOR<XOR<lehrgangUpdateToOneWithWhereWithoutFf_mitglied_lehrgangInput, lehrgangUpdateWithoutFf_mitglied_lehrgangInput>, lehrgangUncheckedUpdateWithoutFf_mitglied_lehrgangInput>
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type jf_mitgliedCreateNestedOneWithoutJf_erziehungsberechtigterInput = {
    create?: XOR<jf_mitgliedCreateWithoutJf_erziehungsberechtigterInput, jf_mitgliedUncheckedCreateWithoutJf_erziehungsberechtigterInput>
    connectOrCreate?: jf_mitgliedCreateOrConnectWithoutJf_erziehungsberechtigterInput
    connect?: jf_mitgliedWhereUniqueInput
  }

  export type jf_mitgliedUpdateOneRequiredWithoutJf_erziehungsberechtigterNestedInput = {
    create?: XOR<jf_mitgliedCreateWithoutJf_erziehungsberechtigterInput, jf_mitgliedUncheckedCreateWithoutJf_erziehungsberechtigterInput>
    connectOrCreate?: jf_mitgliedCreateOrConnectWithoutJf_erziehungsberechtigterInput
    upsert?: jf_mitgliedUpsertWithoutJf_erziehungsberechtigterInput
    connect?: jf_mitgliedWhereUniqueInput
    update?: XOR<XOR<jf_mitgliedUpdateToOneWithWhereWithoutJf_erziehungsberechtigterInput, jf_mitgliedUpdateWithoutJf_erziehungsberechtigterInput>, jf_mitgliedUncheckedUpdateWithoutJf_erziehungsberechtigterInput>
  }

  export type allergieCreateNestedManyWithoutJf_mitgliedInput = {
    create?: XOR<allergieCreateWithoutJf_mitgliedInput, allergieUncheckedCreateWithoutJf_mitgliedInput> | allergieCreateWithoutJf_mitgliedInput[] | allergieUncheckedCreateWithoutJf_mitgliedInput[]
    connectOrCreate?: allergieCreateOrConnectWithoutJf_mitgliedInput | allergieCreateOrConnectWithoutJf_mitgliedInput[]
    createMany?: allergieCreateManyJf_mitgliedInputEnvelope
    connect?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
  }

  export type jf_erziehungsberechtigterCreateNestedManyWithoutJf_mitgliedInput = {
    create?: XOR<jf_erziehungsberechtigterCreateWithoutJf_mitgliedInput, jf_erziehungsberechtigterUncheckedCreateWithoutJf_mitgliedInput> | jf_erziehungsberechtigterCreateWithoutJf_mitgliedInput[] | jf_erziehungsberechtigterUncheckedCreateWithoutJf_mitgliedInput[]
    connectOrCreate?: jf_erziehungsberechtigterCreateOrConnectWithoutJf_mitgliedInput | jf_erziehungsberechtigterCreateOrConnectWithoutJf_mitgliedInput[]
    createMany?: jf_erziehungsberechtigterCreateManyJf_mitgliedInputEnvelope
    connect?: jf_erziehungsberechtigterWhereUniqueInput | jf_erziehungsberechtigterWhereUniqueInput[]
  }

  export type allergieUncheckedCreateNestedManyWithoutJf_mitgliedInput = {
    create?: XOR<allergieCreateWithoutJf_mitgliedInput, allergieUncheckedCreateWithoutJf_mitgliedInput> | allergieCreateWithoutJf_mitgliedInput[] | allergieUncheckedCreateWithoutJf_mitgliedInput[]
    connectOrCreate?: allergieCreateOrConnectWithoutJf_mitgliedInput | allergieCreateOrConnectWithoutJf_mitgliedInput[]
    createMany?: allergieCreateManyJf_mitgliedInputEnvelope
    connect?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
  }

  export type jf_erziehungsberechtigterUncheckedCreateNestedManyWithoutJf_mitgliedInput = {
    create?: XOR<jf_erziehungsberechtigterCreateWithoutJf_mitgliedInput, jf_erziehungsberechtigterUncheckedCreateWithoutJf_mitgliedInput> | jf_erziehungsberechtigterCreateWithoutJf_mitgliedInput[] | jf_erziehungsberechtigterUncheckedCreateWithoutJf_mitgliedInput[]
    connectOrCreate?: jf_erziehungsberechtigterCreateOrConnectWithoutJf_mitgliedInput | jf_erziehungsberechtigterCreateOrConnectWithoutJf_mitgliedInput[]
    createMany?: jf_erziehungsberechtigterCreateManyJf_mitgliedInputEnvelope
    connect?: jf_erziehungsberechtigterWhereUniqueInput | jf_erziehungsberechtigterWhereUniqueInput[]
  }

  export type NullableEnumjf_mitglied_statusFieldUpdateOperationsInput = {
    set?: $Enums.jf_mitglied_status | null
  }

  export type allergieUpdateManyWithoutJf_mitgliedNestedInput = {
    create?: XOR<allergieCreateWithoutJf_mitgliedInput, allergieUncheckedCreateWithoutJf_mitgliedInput> | allergieCreateWithoutJf_mitgliedInput[] | allergieUncheckedCreateWithoutJf_mitgliedInput[]
    connectOrCreate?: allergieCreateOrConnectWithoutJf_mitgliedInput | allergieCreateOrConnectWithoutJf_mitgliedInput[]
    upsert?: allergieUpsertWithWhereUniqueWithoutJf_mitgliedInput | allergieUpsertWithWhereUniqueWithoutJf_mitgliedInput[]
    createMany?: allergieCreateManyJf_mitgliedInputEnvelope
    set?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    disconnect?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    delete?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    connect?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    update?: allergieUpdateWithWhereUniqueWithoutJf_mitgliedInput | allergieUpdateWithWhereUniqueWithoutJf_mitgliedInput[]
    updateMany?: allergieUpdateManyWithWhereWithoutJf_mitgliedInput | allergieUpdateManyWithWhereWithoutJf_mitgliedInput[]
    deleteMany?: allergieScalarWhereInput | allergieScalarWhereInput[]
  }

  export type jf_erziehungsberechtigterUpdateManyWithoutJf_mitgliedNestedInput = {
    create?: XOR<jf_erziehungsberechtigterCreateWithoutJf_mitgliedInput, jf_erziehungsberechtigterUncheckedCreateWithoutJf_mitgliedInput> | jf_erziehungsberechtigterCreateWithoutJf_mitgliedInput[] | jf_erziehungsberechtigterUncheckedCreateWithoutJf_mitgliedInput[]
    connectOrCreate?: jf_erziehungsberechtigterCreateOrConnectWithoutJf_mitgliedInput | jf_erziehungsberechtigterCreateOrConnectWithoutJf_mitgliedInput[]
    upsert?: jf_erziehungsberechtigterUpsertWithWhereUniqueWithoutJf_mitgliedInput | jf_erziehungsberechtigterUpsertWithWhereUniqueWithoutJf_mitgliedInput[]
    createMany?: jf_erziehungsberechtigterCreateManyJf_mitgliedInputEnvelope
    set?: jf_erziehungsberechtigterWhereUniqueInput | jf_erziehungsberechtigterWhereUniqueInput[]
    disconnect?: jf_erziehungsberechtigterWhereUniqueInput | jf_erziehungsberechtigterWhereUniqueInput[]
    delete?: jf_erziehungsberechtigterWhereUniqueInput | jf_erziehungsberechtigterWhereUniqueInput[]
    connect?: jf_erziehungsberechtigterWhereUniqueInput | jf_erziehungsberechtigterWhereUniqueInput[]
    update?: jf_erziehungsberechtigterUpdateWithWhereUniqueWithoutJf_mitgliedInput | jf_erziehungsberechtigterUpdateWithWhereUniqueWithoutJf_mitgliedInput[]
    updateMany?: jf_erziehungsberechtigterUpdateManyWithWhereWithoutJf_mitgliedInput | jf_erziehungsberechtigterUpdateManyWithWhereWithoutJf_mitgliedInput[]
    deleteMany?: jf_erziehungsberechtigterScalarWhereInput | jf_erziehungsberechtigterScalarWhereInput[]
  }

  export type allergieUncheckedUpdateManyWithoutJf_mitgliedNestedInput = {
    create?: XOR<allergieCreateWithoutJf_mitgliedInput, allergieUncheckedCreateWithoutJf_mitgliedInput> | allergieCreateWithoutJf_mitgliedInput[] | allergieUncheckedCreateWithoutJf_mitgliedInput[]
    connectOrCreate?: allergieCreateOrConnectWithoutJf_mitgliedInput | allergieCreateOrConnectWithoutJf_mitgliedInput[]
    upsert?: allergieUpsertWithWhereUniqueWithoutJf_mitgliedInput | allergieUpsertWithWhereUniqueWithoutJf_mitgliedInput[]
    createMany?: allergieCreateManyJf_mitgliedInputEnvelope
    set?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    disconnect?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    delete?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    connect?: allergieWhereUniqueInput | allergieWhereUniqueInput[]
    update?: allergieUpdateWithWhereUniqueWithoutJf_mitgliedInput | allergieUpdateWithWhereUniqueWithoutJf_mitgliedInput[]
    updateMany?: allergieUpdateManyWithWhereWithoutJf_mitgliedInput | allergieUpdateManyWithWhereWithoutJf_mitgliedInput[]
    deleteMany?: allergieScalarWhereInput | allergieScalarWhereInput[]
  }

  export type jf_erziehungsberechtigterUncheckedUpdateManyWithoutJf_mitgliedNestedInput = {
    create?: XOR<jf_erziehungsberechtigterCreateWithoutJf_mitgliedInput, jf_erziehungsberechtigterUncheckedCreateWithoutJf_mitgliedInput> | jf_erziehungsberechtigterCreateWithoutJf_mitgliedInput[] | jf_erziehungsberechtigterUncheckedCreateWithoutJf_mitgliedInput[]
    connectOrCreate?: jf_erziehungsberechtigterCreateOrConnectWithoutJf_mitgliedInput | jf_erziehungsberechtigterCreateOrConnectWithoutJf_mitgliedInput[]
    upsert?: jf_erziehungsberechtigterUpsertWithWhereUniqueWithoutJf_mitgliedInput | jf_erziehungsberechtigterUpsertWithWhereUniqueWithoutJf_mitgliedInput[]
    createMany?: jf_erziehungsberechtigterCreateManyJf_mitgliedInputEnvelope
    set?: jf_erziehungsberechtigterWhereUniqueInput | jf_erziehungsberechtigterWhereUniqueInput[]
    disconnect?: jf_erziehungsberechtigterWhereUniqueInput | jf_erziehungsberechtigterWhereUniqueInput[]
    delete?: jf_erziehungsberechtigterWhereUniqueInput | jf_erziehungsberechtigterWhereUniqueInput[]
    connect?: jf_erziehungsberechtigterWhereUniqueInput | jf_erziehungsberechtigterWhereUniqueInput[]
    update?: jf_erziehungsberechtigterUpdateWithWhereUniqueWithoutJf_mitgliedInput | jf_erziehungsberechtigterUpdateWithWhereUniqueWithoutJf_mitgliedInput[]
    updateMany?: jf_erziehungsberechtigterUpdateManyWithWhereWithoutJf_mitgliedInput | jf_erziehungsberechtigterUpdateManyWithWhereWithoutJf_mitgliedInput[]
    deleteMany?: jf_erziehungsberechtigterScalarWhereInput | jf_erziehungsberechtigterScalarWhereInput[]
  }

  export type ff_mitglied_lehrgangCreateNestedManyWithoutLehrgangInput = {
    create?: XOR<ff_mitglied_lehrgangCreateWithoutLehrgangInput, ff_mitglied_lehrgangUncheckedCreateWithoutLehrgangInput> | ff_mitglied_lehrgangCreateWithoutLehrgangInput[] | ff_mitglied_lehrgangUncheckedCreateWithoutLehrgangInput[]
    connectOrCreate?: ff_mitglied_lehrgangCreateOrConnectWithoutLehrgangInput | ff_mitglied_lehrgangCreateOrConnectWithoutLehrgangInput[]
    createMany?: ff_mitglied_lehrgangCreateManyLehrgangInputEnvelope
    connect?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
  }

  export type ff_mitglied_lehrgangUncheckedCreateNestedManyWithoutLehrgangInput = {
    create?: XOR<ff_mitglied_lehrgangCreateWithoutLehrgangInput, ff_mitglied_lehrgangUncheckedCreateWithoutLehrgangInput> | ff_mitglied_lehrgangCreateWithoutLehrgangInput[] | ff_mitglied_lehrgangUncheckedCreateWithoutLehrgangInput[]
    connectOrCreate?: ff_mitglied_lehrgangCreateOrConnectWithoutLehrgangInput | ff_mitglied_lehrgangCreateOrConnectWithoutLehrgangInput[]
    createMany?: ff_mitglied_lehrgangCreateManyLehrgangInputEnvelope
    connect?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ff_mitglied_lehrgangUpdateManyWithoutLehrgangNestedInput = {
    create?: XOR<ff_mitglied_lehrgangCreateWithoutLehrgangInput, ff_mitglied_lehrgangUncheckedCreateWithoutLehrgangInput> | ff_mitglied_lehrgangCreateWithoutLehrgangInput[] | ff_mitglied_lehrgangUncheckedCreateWithoutLehrgangInput[]
    connectOrCreate?: ff_mitglied_lehrgangCreateOrConnectWithoutLehrgangInput | ff_mitglied_lehrgangCreateOrConnectWithoutLehrgangInput[]
    upsert?: ff_mitglied_lehrgangUpsertWithWhereUniqueWithoutLehrgangInput | ff_mitglied_lehrgangUpsertWithWhereUniqueWithoutLehrgangInput[]
    createMany?: ff_mitglied_lehrgangCreateManyLehrgangInputEnvelope
    set?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    disconnect?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    delete?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    connect?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    update?: ff_mitglied_lehrgangUpdateWithWhereUniqueWithoutLehrgangInput | ff_mitglied_lehrgangUpdateWithWhereUniqueWithoutLehrgangInput[]
    updateMany?: ff_mitglied_lehrgangUpdateManyWithWhereWithoutLehrgangInput | ff_mitglied_lehrgangUpdateManyWithWhereWithoutLehrgangInput[]
    deleteMany?: ff_mitglied_lehrgangScalarWhereInput | ff_mitglied_lehrgangScalarWhereInput[]
  }

  export type ff_mitglied_lehrgangUncheckedUpdateManyWithoutLehrgangNestedInput = {
    create?: XOR<ff_mitglied_lehrgangCreateWithoutLehrgangInput, ff_mitglied_lehrgangUncheckedCreateWithoutLehrgangInput> | ff_mitglied_lehrgangCreateWithoutLehrgangInput[] | ff_mitglied_lehrgangUncheckedCreateWithoutLehrgangInput[]
    connectOrCreate?: ff_mitglied_lehrgangCreateOrConnectWithoutLehrgangInput | ff_mitglied_lehrgangCreateOrConnectWithoutLehrgangInput[]
    upsert?: ff_mitglied_lehrgangUpsertWithWhereUniqueWithoutLehrgangInput | ff_mitglied_lehrgangUpsertWithWhereUniqueWithoutLehrgangInput[]
    createMany?: ff_mitglied_lehrgangCreateManyLehrgangInputEnvelope
    set?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    disconnect?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    delete?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    connect?: ff_mitglied_lehrgangWhereUniqueInput | ff_mitglied_lehrgangWhereUniqueInput[]
    update?: ff_mitglied_lehrgangUpdateWithWhereUniqueWithoutLehrgangInput | ff_mitglied_lehrgangUpdateWithWhereUniqueWithoutLehrgangInput[]
    updateMany?: ff_mitglied_lehrgangUpdateManyWithWhereWithoutLehrgangInput | ff_mitglied_lehrgangUpdateManyWithWhereWithoutLehrgangInput[]
    deleteMany?: ff_mitglied_lehrgangScalarWhereInput | ff_mitglied_lehrgangScalarWhereInput[]
  }

  export type ff_mitgliedCreateNestedOneWithoutMitglied_funktionenInput = {
    create?: XOR<ff_mitgliedCreateWithoutMitglied_funktionenInput, ff_mitgliedUncheckedCreateWithoutMitglied_funktionenInput>
    connectOrCreate?: ff_mitgliedCreateOrConnectWithoutMitglied_funktionenInput
    connect?: ff_mitgliedWhereUniqueInput
  }

  export type Enummitglied_funktionen_typFieldUpdateOperationsInput = {
    set?: $Enums.mitglied_funktionen_typ
  }

  export type ff_mitgliedUpdateOneRequiredWithoutMitglied_funktionenNestedInput = {
    create?: XOR<ff_mitgliedCreateWithoutMitglied_funktionenInput, ff_mitgliedUncheckedCreateWithoutMitglied_funktionenInput>
    connectOrCreate?: ff_mitgliedCreateOrConnectWithoutMitglied_funktionenInput
    upsert?: ff_mitgliedUpsertWithoutMitglied_funktionenInput
    connect?: ff_mitgliedWhereUniqueInput
    update?: XOR<XOR<ff_mitgliedUpdateToOneWithWhereWithoutMitglied_funktionenInput, ff_mitgliedUpdateWithoutMitglied_funktionenInput>, ff_mitgliedUncheckedUpdateWithoutMitglied_funktionenInput>
  }

  export type Enummitglied_login_typFieldUpdateOperationsInput = {
    set?: $Enums.mitglied_login_typ
  }

  export type Enumteilnahme_typFieldUpdateOperationsInput = {
    set?: $Enums.teilnahme_typ
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumeinsatz_artFilter<$PrismaModel = never> = {
    equals?: $Enums.einsatz_art | Enumeinsatz_artFieldRefInput<$PrismaModel>
    in?: $Enums.einsatz_art[] | ListEnumeinsatz_artFieldRefInput<$PrismaModel>
    notIn?: $Enums.einsatz_art[] | ListEnumeinsatz_artFieldRefInput<$PrismaModel>
    not?: NestedEnumeinsatz_artFilter<$PrismaModel> | $Enums.einsatz_art
  }

  export type NestedEnumeinsatz_artWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.einsatz_art | Enumeinsatz_artFieldRefInput<$PrismaModel>
    in?: $Enums.einsatz_art[] | ListEnumeinsatz_artFieldRefInput<$PrismaModel>
    notIn?: $Enums.einsatz_art[] | ListEnumeinsatz_artFieldRefInput<$PrismaModel>
    not?: NestedEnumeinsatz_artWithAggregatesFilter<$PrismaModel> | $Enums.einsatz_art
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumeinsatz_artFilter<$PrismaModel>
    _max?: NestedEnumeinsatz_artFilter<$PrismaModel>
  }

  export type NestedEnumfahrzeug_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.fahrzeug_status | Enumfahrzeug_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.fahrzeug_status[] | ListEnumfahrzeug_statusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.fahrzeug_status[] | ListEnumfahrzeug_statusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumfahrzeug_statusNullableFilter<$PrismaModel> | $Enums.fahrzeug_status | null
  }

  export type NestedEnumfahrzeug_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.fahrzeug_status | Enumfahrzeug_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.fahrzeug_status[] | ListEnumfahrzeug_statusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.fahrzeug_status[] | ListEnumfahrzeug_statusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumfahrzeug_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.fahrzeug_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumfahrzeug_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumfahrzeug_statusNullableFilter<$PrismaModel>
  }

  export type NestedEnumff_mitglied_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ff_mitglied_status | Enumff_mitglied_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ff_mitglied_status[] | ListEnumff_mitglied_statusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ff_mitglied_status[] | ListEnumff_mitglied_statusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumff_mitglied_statusNullableFilter<$PrismaModel> | $Enums.ff_mitglied_status | null
  }

  export type NestedEnumff_mitglied_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ff_mitglied_status | Enumff_mitglied_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.ff_mitglied_status[] | ListEnumff_mitglied_statusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ff_mitglied_status[] | ListEnumff_mitglied_statusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumff_mitglied_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.ff_mitglied_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumff_mitglied_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumff_mitglied_statusNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumjf_mitglied_statusNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.jf_mitglied_status | Enumjf_mitglied_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.jf_mitglied_status[] | ListEnumjf_mitglied_statusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.jf_mitglied_status[] | ListEnumjf_mitglied_statusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumjf_mitglied_statusNullableFilter<$PrismaModel> | $Enums.jf_mitglied_status | null
  }

  export type NestedEnumjf_mitglied_statusNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.jf_mitglied_status | Enumjf_mitglied_statusFieldRefInput<$PrismaModel> | null
    in?: $Enums.jf_mitglied_status[] | ListEnumjf_mitglied_statusFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.jf_mitglied_status[] | ListEnumjf_mitglied_statusFieldRefInput<$PrismaModel> | null
    not?: NestedEnumjf_mitglied_statusNullableWithAggregatesFilter<$PrismaModel> | $Enums.jf_mitglied_status | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumjf_mitglied_statusNullableFilter<$PrismaModel>
    _max?: NestedEnumjf_mitglied_statusNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnummitglied_funktionen_typFilter<$PrismaModel = never> = {
    equals?: $Enums.mitglied_funktionen_typ | Enummitglied_funktionen_typFieldRefInput<$PrismaModel>
    in?: $Enums.mitglied_funktionen_typ[] | ListEnummitglied_funktionen_typFieldRefInput<$PrismaModel>
    notIn?: $Enums.mitglied_funktionen_typ[] | ListEnummitglied_funktionen_typFieldRefInput<$PrismaModel>
    not?: NestedEnummitglied_funktionen_typFilter<$PrismaModel> | $Enums.mitglied_funktionen_typ
  }

  export type NestedEnummitglied_funktionen_typWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.mitglied_funktionen_typ | Enummitglied_funktionen_typFieldRefInput<$PrismaModel>
    in?: $Enums.mitglied_funktionen_typ[] | ListEnummitglied_funktionen_typFieldRefInput<$PrismaModel>
    notIn?: $Enums.mitglied_funktionen_typ[] | ListEnummitglied_funktionen_typFieldRefInput<$PrismaModel>
    not?: NestedEnummitglied_funktionen_typWithAggregatesFilter<$PrismaModel> | $Enums.mitglied_funktionen_typ
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnummitglied_funktionen_typFilter<$PrismaModel>
    _max?: NestedEnummitglied_funktionen_typFilter<$PrismaModel>
  }

  export type NestedEnummitglied_login_typFilter<$PrismaModel = never> = {
    equals?: $Enums.mitglied_login_typ | Enummitglied_login_typFieldRefInput<$PrismaModel>
    in?: $Enums.mitglied_login_typ[] | ListEnummitglied_login_typFieldRefInput<$PrismaModel>
    notIn?: $Enums.mitglied_login_typ[] | ListEnummitglied_login_typFieldRefInput<$PrismaModel>
    not?: NestedEnummitglied_login_typFilter<$PrismaModel> | $Enums.mitglied_login_typ
  }

  export type NestedEnummitglied_login_typWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.mitglied_login_typ | Enummitglied_login_typFieldRefInput<$PrismaModel>
    in?: $Enums.mitglied_login_typ[] | ListEnummitglied_login_typFieldRefInput<$PrismaModel>
    notIn?: $Enums.mitglied_login_typ[] | ListEnummitglied_login_typFieldRefInput<$PrismaModel>
    not?: NestedEnummitglied_login_typWithAggregatesFilter<$PrismaModel> | $Enums.mitglied_login_typ
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnummitglied_login_typFilter<$PrismaModel>
    _max?: NestedEnummitglied_login_typFilter<$PrismaModel>
  }

  export type NestedEnumteilnahme_typFilter<$PrismaModel = never> = {
    equals?: $Enums.teilnahme_typ | Enumteilnahme_typFieldRefInput<$PrismaModel>
    in?: $Enums.teilnahme_typ[] | ListEnumteilnahme_typFieldRefInput<$PrismaModel>
    notIn?: $Enums.teilnahme_typ[] | ListEnumteilnahme_typFieldRefInput<$PrismaModel>
    not?: NestedEnumteilnahme_typFilter<$PrismaModel> | $Enums.teilnahme_typ
  }

  export type NestedEnumteilnahme_typWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.teilnahme_typ | Enumteilnahme_typFieldRefInput<$PrismaModel>
    in?: $Enums.teilnahme_typ[] | ListEnumteilnahme_typFieldRefInput<$PrismaModel>
    notIn?: $Enums.teilnahme_typ[] | ListEnumteilnahme_typFieldRefInput<$PrismaModel>
    not?: NestedEnumteilnahme_typWithAggregatesFilter<$PrismaModel> | $Enums.teilnahme_typ
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumteilnahme_typFilter<$PrismaModel>
    _max?: NestedEnumteilnahme_typFilter<$PrismaModel>
  }

  export type ff_mitgliedCreateWithoutAllergieInput = {
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
    einteilung?: einteilungCreateNestedManyWithoutFf_mitgliedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangCreateNestedManyWithoutFf_mitgliedInput
    mitglied_funktionen?: mitglied_funktionenCreateNestedManyWithoutFf_mitgliedInput
  }

  export type ff_mitgliedUncheckedCreateWithoutAllergieInput = {
    ID?: number
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
    einteilung?: einteilungUncheckedCreateNestedManyWithoutFf_mitgliedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUncheckedCreateNestedManyWithoutFf_mitgliedInput
    mitglied_funktionen?: mitglied_funktionenUncheckedCreateNestedManyWithoutFf_mitgliedInput
  }

  export type ff_mitgliedCreateOrConnectWithoutAllergieInput = {
    where: ff_mitgliedWhereUniqueInput
    create: XOR<ff_mitgliedCreateWithoutAllergieInput, ff_mitgliedUncheckedCreateWithoutAllergieInput>
  }

  export type jf_mitgliedCreateWithoutAllergieInput = {
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.jf_mitglied_status | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    jf_erziehungsberechtigter?: jf_erziehungsberechtigterCreateNestedManyWithoutJf_mitgliedInput
  }

  export type jf_mitgliedUncheckedCreateWithoutAllergieInput = {
    ID?: number
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.jf_mitglied_status | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    jf_erziehungsberechtigter?: jf_erziehungsberechtigterUncheckedCreateNestedManyWithoutJf_mitgliedInput
  }

  export type jf_mitgliedCreateOrConnectWithoutAllergieInput = {
    where: jf_mitgliedWhereUniqueInput
    create: XOR<jf_mitgliedCreateWithoutAllergieInput, jf_mitgliedUncheckedCreateWithoutAllergieInput>
  }

  export type ff_mitgliedUpsertWithoutAllergieInput = {
    update: XOR<ff_mitgliedUpdateWithoutAllergieInput, ff_mitgliedUncheckedUpdateWithoutAllergieInput>
    create: XOR<ff_mitgliedCreateWithoutAllergieInput, ff_mitgliedUncheckedCreateWithoutAllergieInput>
    where?: ff_mitgliedWhereInput
  }

  export type ff_mitgliedUpdateToOneWithWhereWithoutAllergieInput = {
    where?: ff_mitgliedWhereInput
    data: XOR<ff_mitgliedUpdateWithoutAllergieInput, ff_mitgliedUncheckedUpdateWithoutAllergieInput>
  }

  export type ff_mitgliedUpdateWithoutAllergieInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumff_mitglied_statusFieldUpdateOperationsInput | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    einteilung?: einteilungUpdateManyWithoutFf_mitgliedNestedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUpdateManyWithoutFf_mitgliedNestedInput
    mitglied_funktionen?: mitglied_funktionenUpdateManyWithoutFf_mitgliedNestedInput
  }

  export type ff_mitgliedUncheckedUpdateWithoutAllergieInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumff_mitglied_statusFieldUpdateOperationsInput | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    einteilung?: einteilungUncheckedUpdateManyWithoutFf_mitgliedNestedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUncheckedUpdateManyWithoutFf_mitgliedNestedInput
    mitglied_funktionen?: mitglied_funktionenUncheckedUpdateManyWithoutFf_mitgliedNestedInput
  }

  export type jf_mitgliedUpsertWithoutAllergieInput = {
    update: XOR<jf_mitgliedUpdateWithoutAllergieInput, jf_mitgliedUncheckedUpdateWithoutAllergieInput>
    create: XOR<jf_mitgliedCreateWithoutAllergieInput, jf_mitgliedUncheckedCreateWithoutAllergieInput>
    where?: jf_mitgliedWhereInput
  }

  export type jf_mitgliedUpdateToOneWithWhereWithoutAllergieInput = {
    where?: jf_mitgliedWhereInput
    data: XOR<jf_mitgliedUpdateWithoutAllergieInput, jf_mitgliedUncheckedUpdateWithoutAllergieInput>
  }

  export type jf_mitgliedUpdateWithoutAllergieInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumjf_mitglied_statusFieldUpdateOperationsInput | $Enums.jf_mitglied_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jf_erziehungsberechtigter?: jf_erziehungsberechtigterUpdateManyWithoutJf_mitgliedNestedInput
  }

  export type jf_mitgliedUncheckedUpdateWithoutAllergieInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumjf_mitglied_statusFieldUpdateOperationsInput | $Enums.jf_mitglied_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jf_erziehungsberechtigter?: jf_erziehungsberechtigterUncheckedUpdateManyWithoutJf_mitgliedNestedInput
  }

  export type einteilungCreateWithoutDienstabendInput = {
    einheit: einheitCreateNestedOneWithoutEinteilungInput
    einsatz: einsatzCreateNestedOneWithoutEinteilungInput
    fahrzeug: fahrzeugCreateNestedOneWithoutEinteilungInput
    ff_mitglied: ff_mitgliedCreateNestedOneWithoutEinteilungInput
  }

  export type einteilungUncheckedCreateWithoutDienstabendInput = {
    ID?: number
    Einsatz_ID: number
    Fahrzeug_ID: number
    FF_Mitglied_ID: number
    Einheit_ID: number
  }

  export type einteilungCreateOrConnectWithoutDienstabendInput = {
    where: einteilungWhereUniqueInput
    create: XOR<einteilungCreateWithoutDienstabendInput, einteilungUncheckedCreateWithoutDienstabendInput>
  }

  export type einteilungCreateManyDienstabendInputEnvelope = {
    data: einteilungCreateManyDienstabendInput | einteilungCreateManyDienstabendInput[]
    skipDuplicates?: boolean
  }

  export type einteilungUpsertWithWhereUniqueWithoutDienstabendInput = {
    where: einteilungWhereUniqueInput
    update: XOR<einteilungUpdateWithoutDienstabendInput, einteilungUncheckedUpdateWithoutDienstabendInput>
    create: XOR<einteilungCreateWithoutDienstabendInput, einteilungUncheckedCreateWithoutDienstabendInput>
  }

  export type einteilungUpdateWithWhereUniqueWithoutDienstabendInput = {
    where: einteilungWhereUniqueInput
    data: XOR<einteilungUpdateWithoutDienstabendInput, einteilungUncheckedUpdateWithoutDienstabendInput>
  }

  export type einteilungUpdateManyWithWhereWithoutDienstabendInput = {
    where: einteilungScalarWhereInput
    data: XOR<einteilungUpdateManyMutationInput, einteilungUncheckedUpdateManyWithoutDienstabendInput>
  }

  export type einteilungScalarWhereInput = {
    AND?: einteilungScalarWhereInput | einteilungScalarWhereInput[]
    OR?: einteilungScalarWhereInput[]
    NOT?: einteilungScalarWhereInput | einteilungScalarWhereInput[]
    ID?: IntFilter<"einteilung"> | number
    Einsatz_ID?: IntFilter<"einteilung"> | number
    Dienstabend_ID?: IntFilter<"einteilung"> | number
    Fahrzeug_ID?: IntFilter<"einteilung"> | number
    FF_Mitglied_ID?: IntFilter<"einteilung"> | number
    Einheit_ID?: IntFilter<"einteilung"> | number
  }

  export type einteilungCreateWithoutEinheitInput = {
    dienstabend: dienstabendCreateNestedOneWithoutEinteilungInput
    einsatz: einsatzCreateNestedOneWithoutEinteilungInput
    fahrzeug: fahrzeugCreateNestedOneWithoutEinteilungInput
    ff_mitglied: ff_mitgliedCreateNestedOneWithoutEinteilungInput
  }

  export type einteilungUncheckedCreateWithoutEinheitInput = {
    ID?: number
    Einsatz_ID: number
    Dienstabend_ID: number
    Fahrzeug_ID: number
    FF_Mitglied_ID: number
  }

  export type einteilungCreateOrConnectWithoutEinheitInput = {
    where: einteilungWhereUniqueInput
    create: XOR<einteilungCreateWithoutEinheitInput, einteilungUncheckedCreateWithoutEinheitInput>
  }

  export type einteilungCreateManyEinheitInputEnvelope = {
    data: einteilungCreateManyEinheitInput | einteilungCreateManyEinheitInput[]
    skipDuplicates?: boolean
  }

  export type einteilungUpsertWithWhereUniqueWithoutEinheitInput = {
    where: einteilungWhereUniqueInput
    update: XOR<einteilungUpdateWithoutEinheitInput, einteilungUncheckedUpdateWithoutEinheitInput>
    create: XOR<einteilungCreateWithoutEinheitInput, einteilungUncheckedCreateWithoutEinheitInput>
  }

  export type einteilungUpdateWithWhereUniqueWithoutEinheitInput = {
    where: einteilungWhereUniqueInput
    data: XOR<einteilungUpdateWithoutEinheitInput, einteilungUncheckedUpdateWithoutEinheitInput>
  }

  export type einteilungUpdateManyWithWhereWithoutEinheitInput = {
    where: einteilungScalarWhereInput
    data: XOR<einteilungUpdateManyMutationInput, einteilungUncheckedUpdateManyWithoutEinheitInput>
  }

  export type einteilungCreateWithoutEinsatzInput = {
    dienstabend: dienstabendCreateNestedOneWithoutEinteilungInput
    einheit: einheitCreateNestedOneWithoutEinteilungInput
    fahrzeug: fahrzeugCreateNestedOneWithoutEinteilungInput
    ff_mitglied: ff_mitgliedCreateNestedOneWithoutEinteilungInput
  }

  export type einteilungUncheckedCreateWithoutEinsatzInput = {
    ID?: number
    Dienstabend_ID: number
    Fahrzeug_ID: number
    FF_Mitglied_ID: number
    Einheit_ID: number
  }

  export type einteilungCreateOrConnectWithoutEinsatzInput = {
    where: einteilungWhereUniqueInput
    create: XOR<einteilungCreateWithoutEinsatzInput, einteilungUncheckedCreateWithoutEinsatzInput>
  }

  export type einteilungCreateManyEinsatzInputEnvelope = {
    data: einteilungCreateManyEinsatzInput | einteilungCreateManyEinsatzInput[]
    skipDuplicates?: boolean
  }

  export type einteilungUpsertWithWhereUniqueWithoutEinsatzInput = {
    where: einteilungWhereUniqueInput
    update: XOR<einteilungUpdateWithoutEinsatzInput, einteilungUncheckedUpdateWithoutEinsatzInput>
    create: XOR<einteilungCreateWithoutEinsatzInput, einteilungUncheckedCreateWithoutEinsatzInput>
  }

  export type einteilungUpdateWithWhereUniqueWithoutEinsatzInput = {
    where: einteilungWhereUniqueInput
    data: XOR<einteilungUpdateWithoutEinsatzInput, einteilungUncheckedUpdateWithoutEinsatzInput>
  }

  export type einteilungUpdateManyWithWhereWithoutEinsatzInput = {
    where: einteilungScalarWhereInput
    data: XOR<einteilungUpdateManyMutationInput, einteilungUncheckedUpdateManyWithoutEinsatzInput>
  }

  export type dienstabendCreateWithoutEinteilungInput = {
    Datum?: Date | string | null
    Thema?: string | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type dienstabendUncheckedCreateWithoutEinteilungInput = {
    ID?: number
    Datum?: Date | string | null
    Thema?: string | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
  }

  export type dienstabendCreateOrConnectWithoutEinteilungInput = {
    where: dienstabendWhereUniqueInput
    create: XOR<dienstabendCreateWithoutEinteilungInput, dienstabendUncheckedCreateWithoutEinteilungInput>
  }

  export type einheitCreateWithoutEinteilungInput = {
    Abkuerzung?: string | null
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type einheitUncheckedCreateWithoutEinteilungInput = {
    ID?: number
    Abkuerzung?: string | null
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type einheitCreateOrConnectWithoutEinteilungInput = {
    where: einheitWhereUniqueInput
    create: XOR<einheitCreateWithoutEinteilungInput, einheitUncheckedCreateWithoutEinteilungInput>
  }

  export type einsatzCreateWithoutEinteilungInput = {
    Einsatznummer: number
    Datum_Anfang: Date | string
    Uhrzeit_Anfang: Date | string
    Datum_Ende?: Date | string | null
    Uhrzeit_Ende?: Date | string | null
    Beschreibung?: string | null
    Strasse?: string | null
    Hausnummer?: string | null
    Postleitzahl?: string | null
    Ort?: string | null
    Art: $Enums.einsatz_art
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type einsatzUncheckedCreateWithoutEinteilungInput = {
    ID?: number
    Einsatznummer: number
    Datum_Anfang: Date | string
    Uhrzeit_Anfang: Date | string
    Datum_Ende?: Date | string | null
    Uhrzeit_Ende?: Date | string | null
    Beschreibung?: string | null
    Strasse?: string | null
    Hausnummer?: string | null
    Postleitzahl?: string | null
    Ort?: string | null
    Art: $Enums.einsatz_art
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type einsatzCreateOrConnectWithoutEinteilungInput = {
    where: einsatzWhereUniqueInput
    create: XOR<einsatzCreateWithoutEinteilungInput, einsatzUncheckedCreateWithoutEinteilungInput>
  }

  export type fahrzeugCreateWithoutEinteilungInput = {
    Kennzeichen?: string | null
    Fahrzeugtyp?: string | null
    Besatzungsstaerke?: string | null
    Status?: $Enums.fahrzeug_status | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type fahrzeugUncheckedCreateWithoutEinteilungInput = {
    ID?: number
    Kennzeichen?: string | null
    Fahrzeugtyp?: string | null
    Besatzungsstaerke?: string | null
    Status?: $Enums.fahrzeug_status | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type fahrzeugCreateOrConnectWithoutEinteilungInput = {
    where: fahrzeugWhereUniqueInput
    create: XOR<fahrzeugCreateWithoutEinteilungInput, fahrzeugUncheckedCreateWithoutEinteilungInput>
  }

  export type ff_mitgliedCreateWithoutEinteilungInput = {
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
    allergie?: allergieCreateNestedManyWithoutFf_mitgliedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangCreateNestedManyWithoutFf_mitgliedInput
    mitglied_funktionen?: mitglied_funktionenCreateNestedManyWithoutFf_mitgliedInput
  }

  export type ff_mitgliedUncheckedCreateWithoutEinteilungInput = {
    ID?: number
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
    allergie?: allergieUncheckedCreateNestedManyWithoutFf_mitgliedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUncheckedCreateNestedManyWithoutFf_mitgliedInput
    mitglied_funktionen?: mitglied_funktionenUncheckedCreateNestedManyWithoutFf_mitgliedInput
  }

  export type ff_mitgliedCreateOrConnectWithoutEinteilungInput = {
    where: ff_mitgliedWhereUniqueInput
    create: XOR<ff_mitgliedCreateWithoutEinteilungInput, ff_mitgliedUncheckedCreateWithoutEinteilungInput>
  }

  export type dienstabendUpsertWithoutEinteilungInput = {
    update: XOR<dienstabendUpdateWithoutEinteilungInput, dienstabendUncheckedUpdateWithoutEinteilungInput>
    create: XOR<dienstabendCreateWithoutEinteilungInput, dienstabendUncheckedCreateWithoutEinteilungInput>
    where?: dienstabendWhereInput
  }

  export type dienstabendUpdateToOneWithWhereWithoutEinteilungInput = {
    where?: dienstabendWhereInput
    data: XOR<dienstabendUpdateWithoutEinteilungInput, dienstabendUncheckedUpdateWithoutEinteilungInput>
  }

  export type dienstabendUpdateWithoutEinteilungInput = {
    Datum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Thema?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type dienstabendUncheckedUpdateWithoutEinteilungInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Datum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Thema?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type einheitUpsertWithoutEinteilungInput = {
    update: XOR<einheitUpdateWithoutEinteilungInput, einheitUncheckedUpdateWithoutEinteilungInput>
    create: XOR<einheitCreateWithoutEinteilungInput, einheitUncheckedCreateWithoutEinteilungInput>
    where?: einheitWhereInput
  }

  export type einheitUpdateToOneWithWhereWithoutEinteilungInput = {
    where?: einheitWhereInput
    data: XOR<einheitUpdateWithoutEinteilungInput, einheitUncheckedUpdateWithoutEinteilungInput>
  }

  export type einheitUpdateWithoutEinteilungInput = {
    Abkuerzung?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type einheitUncheckedUpdateWithoutEinteilungInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Abkuerzung?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type einsatzUpsertWithoutEinteilungInput = {
    update: XOR<einsatzUpdateWithoutEinteilungInput, einsatzUncheckedUpdateWithoutEinteilungInput>
    create: XOR<einsatzCreateWithoutEinteilungInput, einsatzUncheckedCreateWithoutEinteilungInput>
    where?: einsatzWhereInput
  }

  export type einsatzUpdateToOneWithWhereWithoutEinteilungInput = {
    where?: einsatzWhereInput
    data: XOR<einsatzUpdateWithoutEinteilungInput, einsatzUncheckedUpdateWithoutEinteilungInput>
  }

  export type einsatzUpdateWithoutEinteilungInput = {
    Einsatznummer?: IntFieldUpdateOperationsInput | number
    Datum_Anfang?: DateTimeFieldUpdateOperationsInput | Date | string
    Uhrzeit_Anfang?: DateTimeFieldUpdateOperationsInput | Date | string
    Datum_Ende?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Uhrzeit_Ende?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Strasse?: NullableStringFieldUpdateOperationsInput | string | null
    Hausnummer?: NullableStringFieldUpdateOperationsInput | string | null
    Postleitzahl?: NullableStringFieldUpdateOperationsInput | string | null
    Ort?: NullableStringFieldUpdateOperationsInput | string | null
    Art?: Enumeinsatz_artFieldUpdateOperationsInput | $Enums.einsatz_art
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type einsatzUncheckedUpdateWithoutEinteilungInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatznummer?: IntFieldUpdateOperationsInput | number
    Datum_Anfang?: DateTimeFieldUpdateOperationsInput | Date | string
    Uhrzeit_Anfang?: DateTimeFieldUpdateOperationsInput | Date | string
    Datum_Ende?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Uhrzeit_Ende?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Strasse?: NullableStringFieldUpdateOperationsInput | string | null
    Hausnummer?: NullableStringFieldUpdateOperationsInput | string | null
    Postleitzahl?: NullableStringFieldUpdateOperationsInput | string | null
    Ort?: NullableStringFieldUpdateOperationsInput | string | null
    Art?: Enumeinsatz_artFieldUpdateOperationsInput | $Enums.einsatz_art
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type fahrzeugUpsertWithoutEinteilungInput = {
    update: XOR<fahrzeugUpdateWithoutEinteilungInput, fahrzeugUncheckedUpdateWithoutEinteilungInput>
    create: XOR<fahrzeugCreateWithoutEinteilungInput, fahrzeugUncheckedCreateWithoutEinteilungInput>
    where?: fahrzeugWhereInput
  }

  export type fahrzeugUpdateToOneWithWhereWithoutEinteilungInput = {
    where?: fahrzeugWhereInput
    data: XOR<fahrzeugUpdateWithoutEinteilungInput, fahrzeugUncheckedUpdateWithoutEinteilungInput>
  }

  export type fahrzeugUpdateWithoutEinteilungInput = {
    Kennzeichen?: NullableStringFieldUpdateOperationsInput | string | null
    Fahrzeugtyp?: NullableStringFieldUpdateOperationsInput | string | null
    Besatzungsstaerke?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: NullableEnumfahrzeug_statusFieldUpdateOperationsInput | $Enums.fahrzeug_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type fahrzeugUncheckedUpdateWithoutEinteilungInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Kennzeichen?: NullableStringFieldUpdateOperationsInput | string | null
    Fahrzeugtyp?: NullableStringFieldUpdateOperationsInput | string | null
    Besatzungsstaerke?: NullableStringFieldUpdateOperationsInput | string | null
    Status?: NullableEnumfahrzeug_statusFieldUpdateOperationsInput | $Enums.fahrzeug_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ff_mitgliedUpsertWithoutEinteilungInput = {
    update: XOR<ff_mitgliedUpdateWithoutEinteilungInput, ff_mitgliedUncheckedUpdateWithoutEinteilungInput>
    create: XOR<ff_mitgliedCreateWithoutEinteilungInput, ff_mitgliedUncheckedCreateWithoutEinteilungInput>
    where?: ff_mitgliedWhereInput
  }

  export type ff_mitgliedUpdateToOneWithWhereWithoutEinteilungInput = {
    where?: ff_mitgliedWhereInput
    data: XOR<ff_mitgliedUpdateWithoutEinteilungInput, ff_mitgliedUncheckedUpdateWithoutEinteilungInput>
  }

  export type ff_mitgliedUpdateWithoutEinteilungInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumff_mitglied_statusFieldUpdateOperationsInput | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergieUpdateManyWithoutFf_mitgliedNestedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUpdateManyWithoutFf_mitgliedNestedInput
    mitglied_funktionen?: mitglied_funktionenUpdateManyWithoutFf_mitgliedNestedInput
  }

  export type ff_mitgliedUncheckedUpdateWithoutEinteilungInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumff_mitglied_statusFieldUpdateOperationsInput | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergieUncheckedUpdateManyWithoutFf_mitgliedNestedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUncheckedUpdateManyWithoutFf_mitgliedNestedInput
    mitglied_funktionen?: mitglied_funktionenUncheckedUpdateManyWithoutFf_mitgliedNestedInput
  }

  export type einteilungCreateWithoutFahrzeugInput = {
    dienstabend: dienstabendCreateNestedOneWithoutEinteilungInput
    einheit: einheitCreateNestedOneWithoutEinteilungInput
    einsatz: einsatzCreateNestedOneWithoutEinteilungInput
    ff_mitglied: ff_mitgliedCreateNestedOneWithoutEinteilungInput
  }

  export type einteilungUncheckedCreateWithoutFahrzeugInput = {
    ID?: number
    Einsatz_ID: number
    Dienstabend_ID: number
    FF_Mitglied_ID: number
    Einheit_ID: number
  }

  export type einteilungCreateOrConnectWithoutFahrzeugInput = {
    where: einteilungWhereUniqueInput
    create: XOR<einteilungCreateWithoutFahrzeugInput, einteilungUncheckedCreateWithoutFahrzeugInput>
  }

  export type einteilungCreateManyFahrzeugInputEnvelope = {
    data: einteilungCreateManyFahrzeugInput | einteilungCreateManyFahrzeugInput[]
    skipDuplicates?: boolean
  }

  export type einteilungUpsertWithWhereUniqueWithoutFahrzeugInput = {
    where: einteilungWhereUniqueInput
    update: XOR<einteilungUpdateWithoutFahrzeugInput, einteilungUncheckedUpdateWithoutFahrzeugInput>
    create: XOR<einteilungCreateWithoutFahrzeugInput, einteilungUncheckedCreateWithoutFahrzeugInput>
  }

  export type einteilungUpdateWithWhereUniqueWithoutFahrzeugInput = {
    where: einteilungWhereUniqueInput
    data: XOR<einteilungUpdateWithoutFahrzeugInput, einteilungUncheckedUpdateWithoutFahrzeugInput>
  }

  export type einteilungUpdateManyWithWhereWithoutFahrzeugInput = {
    where: einteilungScalarWhereInput
    data: XOR<einteilungUpdateManyMutationInput, einteilungUncheckedUpdateManyWithoutFahrzeugInput>
  }

  export type allergieCreateWithoutFf_mitgliedInput = {
    Allergie: string
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    jf_mitglied: jf_mitgliedCreateNestedOneWithoutAllergieInput
  }

  export type allergieUncheckedCreateWithoutFf_mitgliedInput = {
    ID?: number
    JF_Mitglied_ID: number
    Allergie: string
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type allergieCreateOrConnectWithoutFf_mitgliedInput = {
    where: allergieWhereUniqueInput
    create: XOR<allergieCreateWithoutFf_mitgliedInput, allergieUncheckedCreateWithoutFf_mitgliedInput>
  }

  export type allergieCreateManyFf_mitgliedInputEnvelope = {
    data: allergieCreateManyFf_mitgliedInput | allergieCreateManyFf_mitgliedInput[]
    skipDuplicates?: boolean
  }

  export type einteilungCreateWithoutFf_mitgliedInput = {
    dienstabend: dienstabendCreateNestedOneWithoutEinteilungInput
    einheit: einheitCreateNestedOneWithoutEinteilungInput
    einsatz: einsatzCreateNestedOneWithoutEinteilungInput
    fahrzeug: fahrzeugCreateNestedOneWithoutEinteilungInput
  }

  export type einteilungUncheckedCreateWithoutFf_mitgliedInput = {
    ID?: number
    Einsatz_ID: number
    Dienstabend_ID: number
    Fahrzeug_ID: number
    Einheit_ID: number
  }

  export type einteilungCreateOrConnectWithoutFf_mitgliedInput = {
    where: einteilungWhereUniqueInput
    create: XOR<einteilungCreateWithoutFf_mitgliedInput, einteilungUncheckedCreateWithoutFf_mitgliedInput>
  }

  export type einteilungCreateManyFf_mitgliedInputEnvelope = {
    data: einteilungCreateManyFf_mitgliedInput | einteilungCreateManyFf_mitgliedInput[]
    skipDuplicates?: boolean
  }

  export type ff_mitglied_lehrgangCreateWithoutFf_mitgliedInput = {
    Datum_bestanden?: Date | string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    lehrgang: lehrgangCreateNestedOneWithoutFf_mitglied_lehrgangInput
  }

  export type ff_mitglied_lehrgangUncheckedCreateWithoutFf_mitgliedInput = {
    ID?: number
    Lehrgang_ID: number
    Datum_bestanden?: Date | string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type ff_mitglied_lehrgangCreateOrConnectWithoutFf_mitgliedInput = {
    where: ff_mitglied_lehrgangWhereUniqueInput
    create: XOR<ff_mitglied_lehrgangCreateWithoutFf_mitgliedInput, ff_mitglied_lehrgangUncheckedCreateWithoutFf_mitgliedInput>
  }

  export type ff_mitglied_lehrgangCreateManyFf_mitgliedInputEnvelope = {
    data: ff_mitglied_lehrgangCreateManyFf_mitgliedInput | ff_mitglied_lehrgangCreateManyFf_mitgliedInput[]
    skipDuplicates?: boolean
  }

  export type mitglied_funktionenCreateWithoutFf_mitgliedInput = {
    Funktion_ID: number
    Typ: $Enums.mitglied_funktionen_typ
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type mitglied_funktionenUncheckedCreateWithoutFf_mitgliedInput = {
    ID?: number
    Funktion_ID: number
    Typ: $Enums.mitglied_funktionen_typ
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type mitglied_funktionenCreateOrConnectWithoutFf_mitgliedInput = {
    where: mitglied_funktionenWhereUniqueInput
    create: XOR<mitglied_funktionenCreateWithoutFf_mitgliedInput, mitglied_funktionenUncheckedCreateWithoutFf_mitgliedInput>
  }

  export type mitglied_funktionenCreateManyFf_mitgliedInputEnvelope = {
    data: mitglied_funktionenCreateManyFf_mitgliedInput | mitglied_funktionenCreateManyFf_mitgliedInput[]
    skipDuplicates?: boolean
  }

  export type allergieUpsertWithWhereUniqueWithoutFf_mitgliedInput = {
    where: allergieWhereUniqueInput
    update: XOR<allergieUpdateWithoutFf_mitgliedInput, allergieUncheckedUpdateWithoutFf_mitgliedInput>
    create: XOR<allergieCreateWithoutFf_mitgliedInput, allergieUncheckedCreateWithoutFf_mitgliedInput>
  }

  export type allergieUpdateWithWhereUniqueWithoutFf_mitgliedInput = {
    where: allergieWhereUniqueInput
    data: XOR<allergieUpdateWithoutFf_mitgliedInput, allergieUncheckedUpdateWithoutFf_mitgliedInput>
  }

  export type allergieUpdateManyWithWhereWithoutFf_mitgliedInput = {
    where: allergieScalarWhereInput
    data: XOR<allergieUpdateManyMutationInput, allergieUncheckedUpdateManyWithoutFf_mitgliedInput>
  }

  export type allergieScalarWhereInput = {
    AND?: allergieScalarWhereInput | allergieScalarWhereInput[]
    OR?: allergieScalarWhereInput[]
    NOT?: allergieScalarWhereInput | allergieScalarWhereInput[]
    ID?: IntFilter<"allergie"> | number
    JF_Mitglied_ID?: IntFilter<"allergie"> | number
    FF_Mitglied_ID?: IntFilter<"allergie"> | number
    Allergie?: StringFilter<"allergie"> | string
    Beschreibung?: StringNullableFilter<"allergie"> | string | null
    Erstellt_am?: DateTimeNullableFilter<"allergie"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"allergie"> | Date | string | null
  }

  export type einteilungUpsertWithWhereUniqueWithoutFf_mitgliedInput = {
    where: einteilungWhereUniqueInput
    update: XOR<einteilungUpdateWithoutFf_mitgliedInput, einteilungUncheckedUpdateWithoutFf_mitgliedInput>
    create: XOR<einteilungCreateWithoutFf_mitgliedInput, einteilungUncheckedCreateWithoutFf_mitgliedInput>
  }

  export type einteilungUpdateWithWhereUniqueWithoutFf_mitgliedInput = {
    where: einteilungWhereUniqueInput
    data: XOR<einteilungUpdateWithoutFf_mitgliedInput, einteilungUncheckedUpdateWithoutFf_mitgliedInput>
  }

  export type einteilungUpdateManyWithWhereWithoutFf_mitgliedInput = {
    where: einteilungScalarWhereInput
    data: XOR<einteilungUpdateManyMutationInput, einteilungUncheckedUpdateManyWithoutFf_mitgliedInput>
  }

  export type ff_mitglied_lehrgangUpsertWithWhereUniqueWithoutFf_mitgliedInput = {
    where: ff_mitglied_lehrgangWhereUniqueInput
    update: XOR<ff_mitglied_lehrgangUpdateWithoutFf_mitgliedInput, ff_mitglied_lehrgangUncheckedUpdateWithoutFf_mitgliedInput>
    create: XOR<ff_mitglied_lehrgangCreateWithoutFf_mitgliedInput, ff_mitglied_lehrgangUncheckedCreateWithoutFf_mitgliedInput>
  }

  export type ff_mitglied_lehrgangUpdateWithWhereUniqueWithoutFf_mitgliedInput = {
    where: ff_mitglied_lehrgangWhereUniqueInput
    data: XOR<ff_mitglied_lehrgangUpdateWithoutFf_mitgliedInput, ff_mitglied_lehrgangUncheckedUpdateWithoutFf_mitgliedInput>
  }

  export type ff_mitglied_lehrgangUpdateManyWithWhereWithoutFf_mitgliedInput = {
    where: ff_mitglied_lehrgangScalarWhereInput
    data: XOR<ff_mitglied_lehrgangUpdateManyMutationInput, ff_mitglied_lehrgangUncheckedUpdateManyWithoutFf_mitgliedInput>
  }

  export type ff_mitglied_lehrgangScalarWhereInput = {
    AND?: ff_mitglied_lehrgangScalarWhereInput | ff_mitglied_lehrgangScalarWhereInput[]
    OR?: ff_mitglied_lehrgangScalarWhereInput[]
    NOT?: ff_mitglied_lehrgangScalarWhereInput | ff_mitglied_lehrgangScalarWhereInput[]
    ID?: IntFilter<"ff_mitglied_lehrgang"> | number
    FF_Mitglied_ID?: IntFilter<"ff_mitglied_lehrgang"> | number
    Lehrgang_ID?: IntFilter<"ff_mitglied_lehrgang"> | number
    Datum_bestanden?: DateTimeNullableFilter<"ff_mitglied_lehrgang"> | Date | string | null
    Erstellt_am?: DateTimeNullableFilter<"ff_mitglied_lehrgang"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"ff_mitglied_lehrgang"> | Date | string | null
  }

  export type mitglied_funktionenUpsertWithWhereUniqueWithoutFf_mitgliedInput = {
    where: mitglied_funktionenWhereUniqueInput
    update: XOR<mitglied_funktionenUpdateWithoutFf_mitgliedInput, mitglied_funktionenUncheckedUpdateWithoutFf_mitgliedInput>
    create: XOR<mitglied_funktionenCreateWithoutFf_mitgliedInput, mitglied_funktionenUncheckedCreateWithoutFf_mitgliedInput>
  }

  export type mitglied_funktionenUpdateWithWhereUniqueWithoutFf_mitgliedInput = {
    where: mitglied_funktionenWhereUniqueInput
    data: XOR<mitglied_funktionenUpdateWithoutFf_mitgliedInput, mitglied_funktionenUncheckedUpdateWithoutFf_mitgliedInput>
  }

  export type mitglied_funktionenUpdateManyWithWhereWithoutFf_mitgliedInput = {
    where: mitglied_funktionenScalarWhereInput
    data: XOR<mitglied_funktionenUpdateManyMutationInput, mitglied_funktionenUncheckedUpdateManyWithoutFf_mitgliedInput>
  }

  export type mitglied_funktionenScalarWhereInput = {
    AND?: mitglied_funktionenScalarWhereInput | mitglied_funktionenScalarWhereInput[]
    OR?: mitglied_funktionenScalarWhereInput[]
    NOT?: mitglied_funktionenScalarWhereInput | mitglied_funktionenScalarWhereInput[]
    ID?: IntFilter<"mitglied_funktionen"> | number
    Mitglied_ID?: IntFilter<"mitglied_funktionen"> | number
    Funktion_ID?: IntFilter<"mitglied_funktionen"> | number
    Typ?: Enummitglied_funktionen_typFilter<"mitglied_funktionen"> | $Enums.mitglied_funktionen_typ
    Erstellt_am?: DateTimeNullableFilter<"mitglied_funktionen"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"mitglied_funktionen"> | Date | string | null
  }

  export type ff_mitgliedCreateWithoutFf_mitglied_lehrgangInput = {
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
    allergie?: allergieCreateNestedManyWithoutFf_mitgliedInput
    einteilung?: einteilungCreateNestedManyWithoutFf_mitgliedInput
    mitglied_funktionen?: mitglied_funktionenCreateNestedManyWithoutFf_mitgliedInput
  }

  export type ff_mitgliedUncheckedCreateWithoutFf_mitglied_lehrgangInput = {
    ID?: number
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
    allergie?: allergieUncheckedCreateNestedManyWithoutFf_mitgliedInput
    einteilung?: einteilungUncheckedCreateNestedManyWithoutFf_mitgliedInput
    mitglied_funktionen?: mitglied_funktionenUncheckedCreateNestedManyWithoutFf_mitgliedInput
  }

  export type ff_mitgliedCreateOrConnectWithoutFf_mitglied_lehrgangInput = {
    where: ff_mitgliedWhereUniqueInput
    create: XOR<ff_mitgliedCreateWithoutFf_mitglied_lehrgangInput, ff_mitgliedUncheckedCreateWithoutFf_mitglied_lehrgangInput>
  }

  export type lehrgangCreateWithoutFf_mitglied_lehrgangInput = {
    Abk_rzung?: string | null
    Beschreibung?: string | null
    Reihenfolge?: number | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type lehrgangUncheckedCreateWithoutFf_mitglied_lehrgangInput = {
    ID?: number
    Abk_rzung?: string | null
    Beschreibung?: string | null
    Reihenfolge?: number | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type lehrgangCreateOrConnectWithoutFf_mitglied_lehrgangInput = {
    where: lehrgangWhereUniqueInput
    create: XOR<lehrgangCreateWithoutFf_mitglied_lehrgangInput, lehrgangUncheckedCreateWithoutFf_mitglied_lehrgangInput>
  }

  export type ff_mitgliedUpsertWithoutFf_mitglied_lehrgangInput = {
    update: XOR<ff_mitgliedUpdateWithoutFf_mitglied_lehrgangInput, ff_mitgliedUncheckedUpdateWithoutFf_mitglied_lehrgangInput>
    create: XOR<ff_mitgliedCreateWithoutFf_mitglied_lehrgangInput, ff_mitgliedUncheckedCreateWithoutFf_mitglied_lehrgangInput>
    where?: ff_mitgliedWhereInput
  }

  export type ff_mitgliedUpdateToOneWithWhereWithoutFf_mitglied_lehrgangInput = {
    where?: ff_mitgliedWhereInput
    data: XOR<ff_mitgliedUpdateWithoutFf_mitglied_lehrgangInput, ff_mitgliedUncheckedUpdateWithoutFf_mitglied_lehrgangInput>
  }

  export type ff_mitgliedUpdateWithoutFf_mitglied_lehrgangInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumff_mitglied_statusFieldUpdateOperationsInput | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergieUpdateManyWithoutFf_mitgliedNestedInput
    einteilung?: einteilungUpdateManyWithoutFf_mitgliedNestedInput
    mitglied_funktionen?: mitglied_funktionenUpdateManyWithoutFf_mitgliedNestedInput
  }

  export type ff_mitgliedUncheckedUpdateWithoutFf_mitglied_lehrgangInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumff_mitglied_statusFieldUpdateOperationsInput | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergieUncheckedUpdateManyWithoutFf_mitgliedNestedInput
    einteilung?: einteilungUncheckedUpdateManyWithoutFf_mitgliedNestedInput
    mitglied_funktionen?: mitglied_funktionenUncheckedUpdateManyWithoutFf_mitgliedNestedInput
  }

  export type lehrgangUpsertWithoutFf_mitglied_lehrgangInput = {
    update: XOR<lehrgangUpdateWithoutFf_mitglied_lehrgangInput, lehrgangUncheckedUpdateWithoutFf_mitglied_lehrgangInput>
    create: XOR<lehrgangCreateWithoutFf_mitglied_lehrgangInput, lehrgangUncheckedCreateWithoutFf_mitglied_lehrgangInput>
    where?: lehrgangWhereInput
  }

  export type lehrgangUpdateToOneWithWhereWithoutFf_mitglied_lehrgangInput = {
    where?: lehrgangWhereInput
    data: XOR<lehrgangUpdateWithoutFf_mitglied_lehrgangInput, lehrgangUncheckedUpdateWithoutFf_mitglied_lehrgangInput>
  }

  export type lehrgangUpdateWithoutFf_mitglied_lehrgangInput = {
    Abk_rzung?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Reihenfolge?: NullableIntFieldUpdateOperationsInput | number | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type lehrgangUncheckedUpdateWithoutFf_mitglied_lehrgangInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Abk_rzung?: NullableStringFieldUpdateOperationsInput | string | null
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Reihenfolge?: NullableIntFieldUpdateOperationsInput | number | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jf_mitgliedCreateWithoutJf_erziehungsberechtigterInput = {
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.jf_mitglied_status | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    allergie?: allergieCreateNestedManyWithoutJf_mitgliedInput
  }

  export type jf_mitgliedUncheckedCreateWithoutJf_erziehungsberechtigterInput = {
    ID?: number
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.jf_mitglied_status | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    allergie?: allergieUncheckedCreateNestedManyWithoutJf_mitgliedInput
  }

  export type jf_mitgliedCreateOrConnectWithoutJf_erziehungsberechtigterInput = {
    where: jf_mitgliedWhereUniqueInput
    create: XOR<jf_mitgliedCreateWithoutJf_erziehungsberechtigterInput, jf_mitgliedUncheckedCreateWithoutJf_erziehungsberechtigterInput>
  }

  export type jf_mitgliedUpsertWithoutJf_erziehungsberechtigterInput = {
    update: XOR<jf_mitgliedUpdateWithoutJf_erziehungsberechtigterInput, jf_mitgliedUncheckedUpdateWithoutJf_erziehungsberechtigterInput>
    create: XOR<jf_mitgliedCreateWithoutJf_erziehungsberechtigterInput, jf_mitgliedUncheckedCreateWithoutJf_erziehungsberechtigterInput>
    where?: jf_mitgliedWhereInput
  }

  export type jf_mitgliedUpdateToOneWithWhereWithoutJf_erziehungsberechtigterInput = {
    where?: jf_mitgliedWhereInput
    data: XOR<jf_mitgliedUpdateWithoutJf_erziehungsberechtigterInput, jf_mitgliedUncheckedUpdateWithoutJf_erziehungsberechtigterInput>
  }

  export type jf_mitgliedUpdateWithoutJf_erziehungsberechtigterInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumjf_mitglied_statusFieldUpdateOperationsInput | $Enums.jf_mitglied_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergieUpdateManyWithoutJf_mitgliedNestedInput
  }

  export type jf_mitgliedUncheckedUpdateWithoutJf_erziehungsberechtigterInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumjf_mitglied_statusFieldUpdateOperationsInput | $Enums.jf_mitglied_status | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergieUncheckedUpdateManyWithoutJf_mitgliedNestedInput
  }

  export type allergieCreateWithoutJf_mitgliedInput = {
    Allergie: string
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    ff_mitglied: ff_mitgliedCreateNestedOneWithoutAllergieInput
  }

  export type allergieUncheckedCreateWithoutJf_mitgliedInput = {
    ID?: number
    FF_Mitglied_ID: number
    Allergie: string
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type allergieCreateOrConnectWithoutJf_mitgliedInput = {
    where: allergieWhereUniqueInput
    create: XOR<allergieCreateWithoutJf_mitgliedInput, allergieUncheckedCreateWithoutJf_mitgliedInput>
  }

  export type allergieCreateManyJf_mitgliedInputEnvelope = {
    data: allergieCreateManyJf_mitgliedInput | allergieCreateManyJf_mitgliedInput[]
    skipDuplicates?: boolean
  }

  export type jf_erziehungsberechtigterCreateWithoutJf_mitgliedInput = {
    Person_ID: number
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type jf_erziehungsberechtigterUncheckedCreateWithoutJf_mitgliedInput = {
    ID?: number
    Person_ID: number
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type jf_erziehungsberechtigterCreateOrConnectWithoutJf_mitgliedInput = {
    where: jf_erziehungsberechtigterWhereUniqueInput
    create: XOR<jf_erziehungsberechtigterCreateWithoutJf_mitgliedInput, jf_erziehungsberechtigterUncheckedCreateWithoutJf_mitgliedInput>
  }

  export type jf_erziehungsberechtigterCreateManyJf_mitgliedInputEnvelope = {
    data: jf_erziehungsberechtigterCreateManyJf_mitgliedInput | jf_erziehungsberechtigterCreateManyJf_mitgliedInput[]
    skipDuplicates?: boolean
  }

  export type allergieUpsertWithWhereUniqueWithoutJf_mitgliedInput = {
    where: allergieWhereUniqueInput
    update: XOR<allergieUpdateWithoutJf_mitgliedInput, allergieUncheckedUpdateWithoutJf_mitgliedInput>
    create: XOR<allergieCreateWithoutJf_mitgliedInput, allergieUncheckedCreateWithoutJf_mitgliedInput>
  }

  export type allergieUpdateWithWhereUniqueWithoutJf_mitgliedInput = {
    where: allergieWhereUniqueInput
    data: XOR<allergieUpdateWithoutJf_mitgliedInput, allergieUncheckedUpdateWithoutJf_mitgliedInput>
  }

  export type allergieUpdateManyWithWhereWithoutJf_mitgliedInput = {
    where: allergieScalarWhereInput
    data: XOR<allergieUpdateManyMutationInput, allergieUncheckedUpdateManyWithoutJf_mitgliedInput>
  }

  export type jf_erziehungsberechtigterUpsertWithWhereUniqueWithoutJf_mitgliedInput = {
    where: jf_erziehungsberechtigterWhereUniqueInput
    update: XOR<jf_erziehungsberechtigterUpdateWithoutJf_mitgliedInput, jf_erziehungsberechtigterUncheckedUpdateWithoutJf_mitgliedInput>
    create: XOR<jf_erziehungsberechtigterCreateWithoutJf_mitgliedInput, jf_erziehungsberechtigterUncheckedCreateWithoutJf_mitgliedInput>
  }

  export type jf_erziehungsberechtigterUpdateWithWhereUniqueWithoutJf_mitgliedInput = {
    where: jf_erziehungsberechtigterWhereUniqueInput
    data: XOR<jf_erziehungsberechtigterUpdateWithoutJf_mitgliedInput, jf_erziehungsberechtigterUncheckedUpdateWithoutJf_mitgliedInput>
  }

  export type jf_erziehungsberechtigterUpdateManyWithWhereWithoutJf_mitgliedInput = {
    where: jf_erziehungsberechtigterScalarWhereInput
    data: XOR<jf_erziehungsberechtigterUpdateManyMutationInput, jf_erziehungsberechtigterUncheckedUpdateManyWithoutJf_mitgliedInput>
  }

  export type jf_erziehungsberechtigterScalarWhereInput = {
    AND?: jf_erziehungsberechtigterScalarWhereInput | jf_erziehungsberechtigterScalarWhereInput[]
    OR?: jf_erziehungsberechtigterScalarWhereInput[]
    NOT?: jf_erziehungsberechtigterScalarWhereInput | jf_erziehungsberechtigterScalarWhereInput[]
    ID?: IntFilter<"jf_erziehungsberechtigter"> | number
    JF_Mitglied_ID?: IntFilter<"jf_erziehungsberechtigter"> | number
    Person_ID?: IntFilter<"jf_erziehungsberechtigter"> | number
    Erstellt_am?: DateTimeNullableFilter<"jf_erziehungsberechtigter"> | Date | string | null
    Geaendert_am?: DateTimeNullableFilter<"jf_erziehungsberechtigter"> | Date | string | null
  }

  export type ff_mitglied_lehrgangCreateWithoutLehrgangInput = {
    Datum_bestanden?: Date | string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
    ff_mitglied: ff_mitgliedCreateNestedOneWithoutFf_mitglied_lehrgangInput
  }

  export type ff_mitglied_lehrgangUncheckedCreateWithoutLehrgangInput = {
    ID?: number
    FF_Mitglied_ID: number
    Datum_bestanden?: Date | string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type ff_mitglied_lehrgangCreateOrConnectWithoutLehrgangInput = {
    where: ff_mitglied_lehrgangWhereUniqueInput
    create: XOR<ff_mitglied_lehrgangCreateWithoutLehrgangInput, ff_mitglied_lehrgangUncheckedCreateWithoutLehrgangInput>
  }

  export type ff_mitglied_lehrgangCreateManyLehrgangInputEnvelope = {
    data: ff_mitglied_lehrgangCreateManyLehrgangInput | ff_mitglied_lehrgangCreateManyLehrgangInput[]
    skipDuplicates?: boolean
  }

  export type ff_mitglied_lehrgangUpsertWithWhereUniqueWithoutLehrgangInput = {
    where: ff_mitglied_lehrgangWhereUniqueInput
    update: XOR<ff_mitglied_lehrgangUpdateWithoutLehrgangInput, ff_mitglied_lehrgangUncheckedUpdateWithoutLehrgangInput>
    create: XOR<ff_mitglied_lehrgangCreateWithoutLehrgangInput, ff_mitglied_lehrgangUncheckedCreateWithoutLehrgangInput>
  }

  export type ff_mitglied_lehrgangUpdateWithWhereUniqueWithoutLehrgangInput = {
    where: ff_mitglied_lehrgangWhereUniqueInput
    data: XOR<ff_mitglied_lehrgangUpdateWithoutLehrgangInput, ff_mitglied_lehrgangUncheckedUpdateWithoutLehrgangInput>
  }

  export type ff_mitglied_lehrgangUpdateManyWithWhereWithoutLehrgangInput = {
    where: ff_mitglied_lehrgangScalarWhereInput
    data: XOR<ff_mitglied_lehrgangUpdateManyMutationInput, ff_mitglied_lehrgangUncheckedUpdateManyWithoutLehrgangInput>
  }

  export type ff_mitgliedCreateWithoutMitglied_funktionenInput = {
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
    allergie?: allergieCreateNestedManyWithoutFf_mitgliedInput
    einteilung?: einteilungCreateNestedManyWithoutFf_mitgliedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangCreateNestedManyWithoutFf_mitgliedInput
  }

  export type ff_mitgliedUncheckedCreateWithoutMitglied_funktionenInput = {
    ID?: number
    Person_ID: number
    Eintrittsdatum: Date | string
    Austrittsdatum?: Date | string | null
    Aufnahmedatum?: Date | string | null
    Status?: $Enums.ff_mitglied_status | null
    Erstellt_am: Date | string
    Geaendert_am?: Date | string | null
    allergie?: allergieUncheckedCreateNestedManyWithoutFf_mitgliedInput
    einteilung?: einteilungUncheckedCreateNestedManyWithoutFf_mitgliedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUncheckedCreateNestedManyWithoutFf_mitgliedInput
  }

  export type ff_mitgliedCreateOrConnectWithoutMitglied_funktionenInput = {
    where: ff_mitgliedWhereUniqueInput
    create: XOR<ff_mitgliedCreateWithoutMitglied_funktionenInput, ff_mitgliedUncheckedCreateWithoutMitglied_funktionenInput>
  }

  export type ff_mitgliedUpsertWithoutMitglied_funktionenInput = {
    update: XOR<ff_mitgliedUpdateWithoutMitglied_funktionenInput, ff_mitgliedUncheckedUpdateWithoutMitglied_funktionenInput>
    create: XOR<ff_mitgliedCreateWithoutMitglied_funktionenInput, ff_mitgliedUncheckedCreateWithoutMitglied_funktionenInput>
    where?: ff_mitgliedWhereInput
  }

  export type ff_mitgliedUpdateToOneWithWhereWithoutMitglied_funktionenInput = {
    where?: ff_mitgliedWhereInput
    data: XOR<ff_mitgliedUpdateWithoutMitglied_funktionenInput, ff_mitgliedUncheckedUpdateWithoutMitglied_funktionenInput>
  }

  export type ff_mitgliedUpdateWithoutMitglied_funktionenInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumff_mitglied_statusFieldUpdateOperationsInput | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergieUpdateManyWithoutFf_mitgliedNestedInput
    einteilung?: einteilungUpdateManyWithoutFf_mitgliedNestedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUpdateManyWithoutFf_mitgliedNestedInput
  }

  export type ff_mitgliedUncheckedUpdateWithoutMitglied_funktionenInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Eintrittsdatum?: DateTimeFieldUpdateOperationsInput | Date | string
    Austrittsdatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Aufnahmedatum?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Status?: NullableEnumff_mitglied_statusFieldUpdateOperationsInput | $Enums.ff_mitglied_status | null
    Erstellt_am?: DateTimeFieldUpdateOperationsInput | Date | string
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    allergie?: allergieUncheckedUpdateManyWithoutFf_mitgliedNestedInput
    einteilung?: einteilungUncheckedUpdateManyWithoutFf_mitgliedNestedInput
    ff_mitglied_lehrgang?: ff_mitglied_lehrgangUncheckedUpdateManyWithoutFf_mitgliedNestedInput
  }

  export type einteilungCreateManyDienstabendInput = {
    ID?: number
    Einsatz_ID: number
    Fahrzeug_ID: number
    FF_Mitglied_ID: number
    Einheit_ID: number
  }

  export type einteilungUpdateWithoutDienstabendInput = {
    einheit?: einheitUpdateOneRequiredWithoutEinteilungNestedInput
    einsatz?: einsatzUpdateOneRequiredWithoutEinteilungNestedInput
    fahrzeug?: fahrzeugUpdateOneRequiredWithoutEinteilungNestedInput
    ff_mitglied?: ff_mitgliedUpdateOneRequiredWithoutEinteilungNestedInput
  }

  export type einteilungUncheckedUpdateWithoutDienstabendInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatz_ID?: IntFieldUpdateOperationsInput | number
    Fahrzeug_ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Einheit_ID?: IntFieldUpdateOperationsInput | number
  }

  export type einteilungUncheckedUpdateManyWithoutDienstabendInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatz_ID?: IntFieldUpdateOperationsInput | number
    Fahrzeug_ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Einheit_ID?: IntFieldUpdateOperationsInput | number
  }

  export type einteilungCreateManyEinheitInput = {
    ID?: number
    Einsatz_ID: number
    Dienstabend_ID: number
    Fahrzeug_ID: number
    FF_Mitglied_ID: number
  }

  export type einteilungUpdateWithoutEinheitInput = {
    dienstabend?: dienstabendUpdateOneRequiredWithoutEinteilungNestedInput
    einsatz?: einsatzUpdateOneRequiredWithoutEinteilungNestedInput
    fahrzeug?: fahrzeugUpdateOneRequiredWithoutEinteilungNestedInput
    ff_mitglied?: ff_mitgliedUpdateOneRequiredWithoutEinteilungNestedInput
  }

  export type einteilungUncheckedUpdateWithoutEinheitInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatz_ID?: IntFieldUpdateOperationsInput | number
    Dienstabend_ID?: IntFieldUpdateOperationsInput | number
    Fahrzeug_ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
  }

  export type einteilungUncheckedUpdateManyWithoutEinheitInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatz_ID?: IntFieldUpdateOperationsInput | number
    Dienstabend_ID?: IntFieldUpdateOperationsInput | number
    Fahrzeug_ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
  }

  export type einteilungCreateManyEinsatzInput = {
    ID?: number
    Dienstabend_ID: number
    Fahrzeug_ID: number
    FF_Mitglied_ID: number
    Einheit_ID: number
  }

  export type einteilungUpdateWithoutEinsatzInput = {
    dienstabend?: dienstabendUpdateOneRequiredWithoutEinteilungNestedInput
    einheit?: einheitUpdateOneRequiredWithoutEinteilungNestedInput
    fahrzeug?: fahrzeugUpdateOneRequiredWithoutEinteilungNestedInput
    ff_mitglied?: ff_mitgliedUpdateOneRequiredWithoutEinteilungNestedInput
  }

  export type einteilungUncheckedUpdateWithoutEinsatzInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Dienstabend_ID?: IntFieldUpdateOperationsInput | number
    Fahrzeug_ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Einheit_ID?: IntFieldUpdateOperationsInput | number
  }

  export type einteilungUncheckedUpdateManyWithoutEinsatzInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Dienstabend_ID?: IntFieldUpdateOperationsInput | number
    Fahrzeug_ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Einheit_ID?: IntFieldUpdateOperationsInput | number
  }

  export type einteilungCreateManyFahrzeugInput = {
    ID?: number
    Einsatz_ID: number
    Dienstabend_ID: number
    FF_Mitglied_ID: number
    Einheit_ID: number
  }

  export type einteilungUpdateWithoutFahrzeugInput = {
    dienstabend?: dienstabendUpdateOneRequiredWithoutEinteilungNestedInput
    einheit?: einheitUpdateOneRequiredWithoutEinteilungNestedInput
    einsatz?: einsatzUpdateOneRequiredWithoutEinteilungNestedInput
    ff_mitglied?: ff_mitgliedUpdateOneRequiredWithoutEinteilungNestedInput
  }

  export type einteilungUncheckedUpdateWithoutFahrzeugInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatz_ID?: IntFieldUpdateOperationsInput | number
    Dienstabend_ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Einheit_ID?: IntFieldUpdateOperationsInput | number
  }

  export type einteilungUncheckedUpdateManyWithoutFahrzeugInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatz_ID?: IntFieldUpdateOperationsInput | number
    Dienstabend_ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Einheit_ID?: IntFieldUpdateOperationsInput | number
  }

  export type allergieCreateManyFf_mitgliedInput = {
    ID?: number
    JF_Mitglied_ID: number
    Allergie: string
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type einteilungCreateManyFf_mitgliedInput = {
    ID?: number
    Einsatz_ID: number
    Dienstabend_ID: number
    Fahrzeug_ID: number
    Einheit_ID: number
  }

  export type ff_mitglied_lehrgangCreateManyFf_mitgliedInput = {
    ID?: number
    Lehrgang_ID: number
    Datum_bestanden?: Date | string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type mitglied_funktionenCreateManyFf_mitgliedInput = {
    ID?: number
    Funktion_ID: number
    Typ: $Enums.mitglied_funktionen_typ
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type allergieUpdateWithoutFf_mitgliedInput = {
    Allergie?: StringFieldUpdateOperationsInput | string
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jf_mitglied?: jf_mitgliedUpdateOneRequiredWithoutAllergieNestedInput
  }

  export type allergieUncheckedUpdateWithoutFf_mitgliedInput = {
    ID?: IntFieldUpdateOperationsInput | number
    JF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Allergie?: StringFieldUpdateOperationsInput | string
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type allergieUncheckedUpdateManyWithoutFf_mitgliedInput = {
    ID?: IntFieldUpdateOperationsInput | number
    JF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Allergie?: StringFieldUpdateOperationsInput | string
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type einteilungUpdateWithoutFf_mitgliedInput = {
    dienstabend?: dienstabendUpdateOneRequiredWithoutEinteilungNestedInput
    einheit?: einheitUpdateOneRequiredWithoutEinteilungNestedInput
    einsatz?: einsatzUpdateOneRequiredWithoutEinteilungNestedInput
    fahrzeug?: fahrzeugUpdateOneRequiredWithoutEinteilungNestedInput
  }

  export type einteilungUncheckedUpdateWithoutFf_mitgliedInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatz_ID?: IntFieldUpdateOperationsInput | number
    Dienstabend_ID?: IntFieldUpdateOperationsInput | number
    Fahrzeug_ID?: IntFieldUpdateOperationsInput | number
    Einheit_ID?: IntFieldUpdateOperationsInput | number
  }

  export type einteilungUncheckedUpdateManyWithoutFf_mitgliedInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Einsatz_ID?: IntFieldUpdateOperationsInput | number
    Dienstabend_ID?: IntFieldUpdateOperationsInput | number
    Fahrzeug_ID?: IntFieldUpdateOperationsInput | number
    Einheit_ID?: IntFieldUpdateOperationsInput | number
  }

  export type ff_mitglied_lehrgangUpdateWithoutFf_mitgliedInput = {
    Datum_bestanden?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lehrgang?: lehrgangUpdateOneRequiredWithoutFf_mitglied_lehrgangNestedInput
  }

  export type ff_mitglied_lehrgangUncheckedUpdateWithoutFf_mitgliedInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Lehrgang_ID?: IntFieldUpdateOperationsInput | number
    Datum_bestanden?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ff_mitglied_lehrgangUncheckedUpdateManyWithoutFf_mitgliedInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Lehrgang_ID?: IntFieldUpdateOperationsInput | number
    Datum_bestanden?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mitglied_funktionenUpdateWithoutFf_mitgliedInput = {
    Funktion_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enummitglied_funktionen_typFieldUpdateOperationsInput | $Enums.mitglied_funktionen_typ
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mitglied_funktionenUncheckedUpdateWithoutFf_mitgliedInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Funktion_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enummitglied_funktionen_typFieldUpdateOperationsInput | $Enums.mitglied_funktionen_typ
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type mitglied_funktionenUncheckedUpdateManyWithoutFf_mitgliedInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Funktion_ID?: IntFieldUpdateOperationsInput | number
    Typ?: Enummitglied_funktionen_typFieldUpdateOperationsInput | $Enums.mitglied_funktionen_typ
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type allergieCreateManyJf_mitgliedInput = {
    ID?: number
    FF_Mitglied_ID: number
    Allergie: string
    Beschreibung?: string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type jf_erziehungsberechtigterCreateManyJf_mitgliedInput = {
    ID?: number
    Person_ID: number
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type allergieUpdateWithoutJf_mitgliedInput = {
    Allergie?: StringFieldUpdateOperationsInput | string
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ff_mitglied?: ff_mitgliedUpdateOneRequiredWithoutAllergieNestedInput
  }

  export type allergieUncheckedUpdateWithoutJf_mitgliedInput = {
    ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Allergie?: StringFieldUpdateOperationsInput | string
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type allergieUncheckedUpdateManyWithoutJf_mitgliedInput = {
    ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Allergie?: StringFieldUpdateOperationsInput | string
    Beschreibung?: NullableStringFieldUpdateOperationsInput | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jf_erziehungsberechtigterUpdateWithoutJf_mitgliedInput = {
    Person_ID?: IntFieldUpdateOperationsInput | number
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jf_erziehungsberechtigterUncheckedUpdateWithoutJf_mitgliedInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jf_erziehungsberechtigterUncheckedUpdateManyWithoutJf_mitgliedInput = {
    ID?: IntFieldUpdateOperationsInput | number
    Person_ID?: IntFieldUpdateOperationsInput | number
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ff_mitglied_lehrgangCreateManyLehrgangInput = {
    ID?: number
    FF_Mitglied_ID: number
    Datum_bestanden?: Date | string | null
    Erstellt_am?: Date | string | null
    Geaendert_am?: Date | string | null
  }

  export type ff_mitglied_lehrgangUpdateWithoutLehrgangInput = {
    Datum_bestanden?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ff_mitglied?: ff_mitgliedUpdateOneRequiredWithoutFf_mitglied_lehrgangNestedInput
  }

  export type ff_mitglied_lehrgangUncheckedUpdateWithoutLehrgangInput = {
    ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Datum_bestanden?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ff_mitglied_lehrgangUncheckedUpdateManyWithoutLehrgangInput = {
    ID?: IntFieldUpdateOperationsInput | number
    FF_Mitglied_ID?: IntFieldUpdateOperationsInput | number
    Datum_bestanden?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Erstellt_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Geaendert_am?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}